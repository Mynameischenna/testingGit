<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.ecm1</groupId>
	<artifactId>ECM1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ECM1</name>
	<description>ECM Project</description>

	<properties>
		<java.version>11</java.version>  <!-- Ensure Java 21 is used -->
	</properties>

	<dependencies>

		<!-- Spring Boot Web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Apache POI for Excel Processing -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.2.3</version>
		</dependency>

		<!-- Xerces (XML Processing) -->
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.12.2</version>
		</dependency>

		<!-- Spring Boot Test (For Unit Testing) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Apache Commons Utilities -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.12.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>1.3</version>
		</dependency>

		<!-- Spring Boot Core Starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Maven Compiler Plugin to Ensure Java 21 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.10.1</version>
				<configuration>
					<source>21</source>
					<target>21</target>
				</configuration>
			</plugin>

			<!-- Spring Boot Maven Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>




C:\compliance1\ECM1\src\main\java\com\ecm1\ECM1\controller\ECMcontroller.java:6:52
java: cannot access org.springframework.beans.factory.annotation.Autowired
  bad class file: /C:/Users/service-ascscripting/.m2/repository/org/springframework/spring-beans/6.1.13/spring-beans-6.1.13.jar!/org/springframework/beans/factory/annotation/Autowired.class
    class file has wrong version 61.0, should be 55.0
    Please remove or make sure it appears in the correct subdirectory of the classpath.
C:\compliance1\ECM1\src\main\java\com\ecm1\ECM1\controller\ECMcontroller.java:11:2
java: cannot access org.springframework.web.bind.annotation.RestController
  bad class file: /C:/Users/service-ascscripting/.m2/repository/org/springframework/spring-web/6.1.13/spring-web-6.1.13.jar!/org/springframework/web/bind/annotation/RestController.class
    class file has wrong version 61.0, should be 55.0
    Please remove or make sure it appears in the correct subdirectory of the classpath.
C:\compliance1\ECM1\src\main\java\com\ecm1\ECM1\controller\ECMcontroller.java:14:6
java: cannot find symbol
  symbol:   class Autowired
  location: class com.ecm1.ECM1.controller.ECMcontroller
C:\compliance1\ECM1\src\main\java\com\ecm1\ECM1\controller\ECMcontroller.java:17:6
java: cannot access org.springframework.web.bind.annotation.PostMapping
  bad class file: /C:/Users/service-ascscripting/.m2/repository/org/springframework/spring-web/6.1.13/spring-web-6.1.13.jar!/org/springframework/web/bind/annotation/PostMapping.class
    class file has wrong version 61.0, should be 55.0
    Please remove or make sure it appears in the correct subdirectory of the classpath.
C:\compliance1\ECM1\src\main\java\com\ecm1\ECM1\controller\ECMcontroller.java:27:6
java: cannot access org.springframework.web.bind.annotation.DeleteMapping
  bad class file: /C:/Users/service-ascscripting/.m2/repository/org/springframework/spring-web/6.1.13/spring-web-6.1.13.jar!/org/springframework/web/bind/annotation/DeleteMapping.class
    class file has wrong version 61.0, should be 55.0
    Please remove or make sure it appears in the correct subdirectory of the classpath.
C:\compliance1\ECM1\src\main\java\com\ecm1\ECM1\controller\ECMcontroller.java:37:6
java: cannot find symbol
  symbol:   class DeleteMapping
  location: class com.ecm1.ECM1.controller.ECMcontroller




package com.ecm1.ECM1.audit;

import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

@Service
public class AuditTrailLogger {

    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private final String LOG_FILE_PATH = "C:\\ECM\\PVR\\PVR\\audit-logs.log"; // Path to the log file
    private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    // Flag to track if the headers are written
    private boolean headersWritten = false;

    public void logAction(String actionType, String status, String message, String fileName, String filePath, String user) {

        String timestamp = dateFormat.format(new Date());

        // Format the log entry to be in a single line
        String logEntry = String.format(
                "%s | Action: %s | Status: %s | Message: %s | File Name: %s | File Path: %s | User: %s",
                timestamp, actionType, status, message, fileName, filePath, user
        );

        // Write the log entry to the file
        writeLogToFile(logEntry);
        writeLogToFile("\n"); // Add a new line for readability
    }

    public void failureLog(String fileName, String status, String errorMessage) {
        String timestamp = LocalDateTime.now().format(dateTimeFormatter);
        String logEntry = String.format("%s | File: %s | Status: %s | Error: %s",
                timestamp, fileName, status, (errorMessage != null ? errorMessage : "None"));
        writeLogToFile(logEntry);
    }

    // Writes the header only once at the beginning of the log file
    public void writeHeaders(String fileName) {
        String header =
                "==================================================\n" +
                "                 ECM1 Audit Log                   \n" +
                "              Environment: Production             \n" +
                "           Input FileName : " + fileName + "      \n" +
                "           Log Start Time: " + dateFormat.format(new Date()) + "\n" +
                "==================================================\n\n";

        writeLogToFile(header);
    }

    // Writes the footer with success and failure counts
    public void writeFooter(int successCount, int failureCount) {
        String footer =
                "\n==================================================\n" +
                "            End of ECM1 Audit Log                 \n" +
                "            Success Count: " + successCount + "   \n" +
                "            Failure Count: " + failureCount + "   \n" +
                "==================================================\n";

        writeLogToFile(footer);
    }

    // Writes log entries to the specified log file
    private void writeLogToFile(String logEntry) {
        try {
            Files.write(
                    Paths.get(LOG_FILE_PATH),
                    logEntry.getBytes(),
                    StandardOpenOption.CREATE, StandardOpenOption.APPEND
            );
        } catch (IOException e) {
            System.err.println("Error writing log to file: " + e.getMessage());
        }
    }
}




package com.ecm1.ECM1.audit;

import org.springframework.stereotype.Service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.Date;
@Service
public class AuditTrailLogger {

    private  final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private  final String LOG_FILE_PATH = "C:\\ECM\\PVR\\PVR\\audit-logs.log"; // Path to the log file
    private  final String FileName = "";
    // Flag to track if the headers are written
    private  boolean headersWritten = false;

    public void logAction(String actionType, String status, String message, String fileName, String filePath, String user) {

        String timestamp = dateFormat.format(new Date());

        // Format the log entry to be in a single line
        String logEntry = String.format(
                "%s | Action: %s | Status: %s | Message: %s | File Name: %s | File Path: %s | User: %s",
                timestamp, actionType, status, message, fileName, filePath, user
        );

        // Write the log entry to the file
        writeLogToFile(logEntry);
        // Add a space (new line) after each log entry for better readability
        writeLogToFile("\n");
    }

    public  void failureLog(String fileName, String status, String errorMessage) {
        String logEntry = String.format("%s | File: %s | Status: %s | Error: %s",
                LocalDateTime.now(), fileName, status, (errorMessage != null ? errorMessage : "None"));
        writeLogToFile(logEntry);
    }
    // Writes the header only once at the beginning of the log file
    public void writeHeaders(String fileName) {
        String header = String.format(
                """
                        ==================================================
                                         ECM1 Audit Log
                                      Environment: Production
                                    Input FileName : %s
                                    Log Start Time: %s
                        ==================================================

                        """,fileName
                ,dateFormat.format(new Date())
        );

        writeLogToFile(header);
    }

    // Writes the footer with success and failure counts
    public  void writeFooter(int successCount , int failureCount) {
        String footer = String.format(
                """

                        ==================================================
                                   End of ECM1 Audit Log
                                   Success Count: %d
                                   Failure Count: %d
                        ==================================================
                        """,
                successCount, failureCount
        );

        writeLogToFile(footer);
    }

    // Writes log entries to the specified log file
    private void writeLogToFile(String logEntry) {
        try {
            Files.write(
                    Paths.get(LOG_FILE_PATH),
                    logEntry.getBytes(),
                    StandardOpenOption.CREATE, StandardOpenOption.APPEND
            );
        } catch (IOException e) {
            System.err.println("Error writing log to file: " + e.getMessage());
        }
    }

}




<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.15</version> <!-- Downgraded to support Java 11 -->
        <relativePath/>
    </parent>

    <groupId>com.ecm1</groupId>
    <artifactId>ECM1</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>ECM1</name>
    <description>ECM Project</description>

    <properties>
        <java.version>11</java.version>  <!-- Changed to Java 11 -->
    </properties>

    <dependencies>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Apache POI for Excel Processing -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.3</version>
        </dependency>

        <!-- Xerces (XML Processing) -->
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.12.2</version>
        </dependency>

        <!-- Spring Boot Test (For Unit Testing) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Apache Commons Utilities -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
            <version>1.3</version>
        </dependency>

        <!-- Spring Boot Core Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin for Java 11 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>11</source>
                    <target>11</target>
                </configuration>
            </plugin>

            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>






<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.ecm1</groupId>
	<artifactId>ECM1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ECM1</name>
	<description>ECM Project</description>

	<properties>
		<java.version>11</java.version>  <!-- Ensure Java 21 is used -->
	</properties>

	<dependencies>

		<!-- Spring Boot Web -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- Apache POI for Excel Processing -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.2.3</version>
		</dependency>

		<!-- Xerces (XML Processing) -->
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.12.2</version>
		</dependency>

		<!-- Spring Boot Test (For Unit Testing) -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Apache Commons Utilities -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.12.0</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>1.3</version>
		</dependency>

		<!-- Spring Boot Core Starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<!-- Maven Compiler Plugin to Ensure Java 21 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.10.1</version>
				<configuration>
					<source>21</source>
					<target>21</target>
				</configuration>
			</plugin>

			<!-- Spring Boot Maven Plugin -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>



Cannot invoke "com.ecm1.ECM1.service.Service1$Document.getImage()" because the return value of "com.ecm1.ECM1.service.Service1$OnBaseResponse.getDocument()" is null
	at com.ecm1.ECM1.service.Service1.getOnBaseDocument(Service1.java:255)
	at com.ecm1.ECM1.controller.ECMcontroller.getFile(ECMcontroller.java:40)
	at com.ecm1.ECM1.Ecm1Application.run(Ecm1Application.java:25)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:401)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:219)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1798)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.ecm1.ECM1.Ecm1Application.main(Ecm1Application.java:19)
2025-03-25T04:56:06.979-06:00  INFO 10248 --- [ECM1] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-03-25T04:56:06.995-06:00  INFO 10248 --- [ECM1] [           main] com.ecm1.ECM1.Ecm1Application            : Started Ecm1Application in 9.813 seconds (process running for 13.529)







rg.springframework.web.client.HttpServerErrorException$InternalServerError: 500 : "{"error":{"code":"E-000","message":"Exception retrieveDocument token(null) id(2230789336) legacyStorageLocation(null) versionNumber(0) error(RETRIEVE_DOCUMENT_ERROR: Error retrieve document OnBase(2230789336):[class ErrorResponseErrorDetails {\n    field: retrieveDocument OnBase(2230789336)\n    issue: Onbase Document (2230789336) has been deleted and will be purged according to the purge schedule\n    location: body\n    hint: Please check the error details\n}])","details":[{"field":null,"issue":"Exception retrieveDocument token(null) id(2230789336) legacyStorageLocation(null) versionNumber(0) error(RETRIEVE_DOCUMENT_ERROR: Error retrieve document OnBase(2230789336):[class ErrorResponseErrorDetails {\n    field: retrieveDocument OnBase(2230789336)\n    issue: Onbase Document (2230789336) has been deleted and will be purged according to the purge schedule\n    location: body\n    hint: Please check the error details\n}])","location":null,"hint":null}],"link":null,"correlationId":"67e2886f30a35ee5436dcf7a4e420664"}}"
	at org.springframework.web.client.HttpServerErrorException.create(HttpServerErrorException.java:102)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:186)
	at org.springframework.web.client.DefaultResponseErrorHandler.handleError(DefaultResponseErrorHandler.java:137)
	at org.springframework.web.client.ResponseErrorHandler.handleError(ResponseErrorHandler.java:63)
	at org.springframework.web.client.RestTemplate.handleResponse(RestTemplate.java:942)
	at org.springframework.web.client.RestTemplate.doExecute(RestTemplate.java:891)
	at org.springframework.web.client.RestTemplate.execute(RestTemplate.java:790)
	at org.springframework.web.client.RestTemplate.exchange(RestTemplate.java:672)
	at com.ecm1.ECM1.service.Service1.getOnBaseDocument(Service1.java:246)
	at com.ecm1.ECM1.controller.ECMcontroller.getFile(ECMcontroller.java:40)
	at com.ecm1.ECM1.Ecm1Application.run(Ecm1Application.java:25)
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:401)
	at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:219)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:422)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1798)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1363)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1352)
	at com.e
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.Resource;
import java.util.Base64;

@RestController
@RequestMapping("/api/documents")
public class OnBaseDocumentController {

    private final RestTemplate restTemplate = new RestTemplate();
    
    @GetMapping("/{documentId}")
    public ResponseEntity<Resource> getOnBaseDocument(@PathVariable String documentId) throws Exception {
        if (documentId == null || documentId.isEmpty()) {
            throw new IllegalArgumentException("Document ID is required.");
        }

        String authorizationID = auth.getAuthorizationID();
        System.out.println("Authorization ID: " + authorizationID);

        // Base URL based on environment
        String url = runType.equals("PROD")
                ? "https://api.gwl.com/content-management/ecm-documents-api/documents"
                : "https://api-dev.gwl.com/content-management/ecm-documents-api/documents";

        // Append document ID to the URL
        url += "?id=" + documentId;

        // Set up headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", "JWT " + authorizationID);

        // Create the HTTP entity
        HttpEntity<String> requestEntity = new HttpEntity<>(headers);

        // Use RestTemplate to make the GET request
        ResponseEntity<OnBaseResponse> response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, OnBaseResponse.class);

        if (response.getStatusCode() != HttpStatus.OK || response.getBody() == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);
        }

        OnBaseResponse onBaseResponse = response.getBody();

        // Decode Base64 document
        byte[] decodedBytes = Base64.getDecoder().decode(onBaseResponse.getDocument().getImage());
        ByteArrayResource resource = new ByteArrayResource(decodedBytes);

        // Return the file as a downloadable response
        return ResponseEntity.ok()
                .contentType(MediaType.parseMediaType(onBaseResponse.getDocument().getMimeType()))
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + onBaseResponse.getDocument().getFileName() + "\"")
                .body(resource);
    }

    // DTO class to map API response
    public static class OnBaseResponse {
        private Document document;
        public Document getDocument() { return document; }
    }

    public static class Document {
        private String image; // Base64 encoded content
        private String fileName;
        private String mimeType;

        public String getImage() { return image; }
        public String getFileName() { return fileName; }
        public String getMimeType() { return mimeType; }
    }
}





public ResponseEntity<String> deleteOnBaseDocument(String documentId) throws Exception {
        if (documentId == null || documentId.isEmpty()) {
            throw new IllegalArgumentException("Document ID is required for deletion.");
        }

        String authorizationID = auth.getAuthorizationID();
        System.out.println("Authorization ID: " + authorizationID);

        // Base URL based on environment
        String url = runType.equals("PROD")
                ? "https://api.gwl.com/content-management/ecm-documents-api/documents"
                : "https://api-dev.gwl.com/content-management/ecm-documents-api/documents";

        // Append document ID to the URL
        url += "?id=" + documentId;

        // Set up headers
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);
        headers.add("Authorization", "JWT " + authorizationID);

        // Create the HTTP entity
        HttpEntity<String> requestEntity = new HttpEntity<>(headers);

        // Use RestTemplate to make the DELETE request
        RestTemplate restTemplate = new RestTemplate();
        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.DELETE, requestEntity, String.class);

        // Print response details
        System.out.println("Response status: " + response.getStatusCode());
        System.out.println("Response body: " + response.getBody());

        return response;
    }




REST method GET – gets a single image from the ECM And returns it 

          3 possible url parameters

          token – encrypted token generated from the docuemnt-list REST call

          id – unique id of the onbase document... if Filenet then the filenet guid and the legacyStorageArea

          legacyStorageArea – only used if attempting to get an image from Filenet and you have the legacyStorageArea(object_store) and id

          versionNumber – if you know your documents have versions, currently only FileSharing docs do.....you can request a previous version of the document.  this is an optional field if not given the latest document will be returned.

Retrieves a single document image from FileNet requires one of the following:

The token obtained from the documents-list REST request
the Id for OnBase or Id and ObjectStore for FileNet
Example for FileNet using ID and ObjectStore

/documents?id=EC400F00-EF98-41EE-BB82-6B0F77B2CCC0&legacyStorageArea=FASCORE_OS

Example for OnBase

/documents?id=76014794

Example for OnBase and using a previous version

/documents?id=76014794&versionNumber=3

Example using the token

/documents?token=123456abcdefg7890DEFG



Example response:

{
    "document": {
        "image": "JVBERi0xLjQKJeLjz9MKMiAwIG9iago8PC9MZW5ndGggNjA1L0ZpbHRlci9GbGF0ZURlY29kZT4+c3RyZWFtCnicjZTNctowFIX3fgot2wVUkiXZXhIG0jQdfow37c5ghbqDLSLbZOjT17ZYUClXDYwHzxx9Otx7dPUaPGRBKFCMBcqKAKMJ5ePbIgu2wev4UPStFx4DPOXoLYjjaYiiBCNG4ilDRCAtg90/YsQQxcmUWiJNov4XUg3KYx8KqAZl1IcCqkGp8KGAalCCfSigjqhIfG2CVINGvjZBqkGFr02QalDmaxOkGjT0tQlSDUq8bQLUEeWJr02QatDY1yZINajwtQlSDcp9bXLV7TC9BOH+SxBleEr6M5dQlFXBlyVBpH97CT6lu0f0lM7Q+nxWuu3qsr1+zn4PE35HJ3icXGGxT4W7lCbJOMf2WoyFmOPhs7yuL/vtbAnZCGyhd39t/VZLDZo6ZKaKAj10+iibBrJjDLZb5ZUE3RxwrupWl/uuLVWN0nX2FU3Q83q1mP9c/YDcaexx76q9p1oX3Uz6i4FxyiA3Yqf/OPNk6KyOGOaYTNIQ2F8kzgmpi/JSFl1+gn1cisZRHIURh2xiO+fZ4aC6uk3lsWxanQ8B+KJzN5grLa/oWdXyUP+BBkAIO/HdbgV6OIsJDRnvr98E2p7ZgWY6r5v8MJSTXc9wOQ647E4nyCW0U91oeSlV12y06qMq6+NcVee8fqcLNztnh3X7671zavyIne5Sq+oWmLcqB9zIuhlG63tXndGuqyBHbKd75+ifKRcNw5D2D2DFYzvkTH2gNBfrM6hKqYebGLISzulQH6rJBf8zXpzb+S6atqzyVhbjgXyROlWnk7pIPasGf9DZ2ajvL76t/gtnaE/5CmVuZHN0cmVhbQplbmRvYmoKNCAwIG9iago8PC9UeXBlL1BhZ2UvTWVkaWFCb3hbMCAwIDU5NSA4NDJdL1Jlc291cmNlczw8L0ZvbnQ8PC9GMSAxIDAgUj4+Pj4vQ29udGVudHMgMiAwIFIvUGFyZW50IDMgMCBSPj4KZW5kb2JqCjEgMCBvYmoKPDwvVHlwZS9Gb250L1N1YnR5cGUvVHlwZTEvQmFzZUZvbnQvSGVsdmV0aWNhL0VuY29kaW5nL1dpbkFuc2lFbmNvZGluZz4+CmVuZG9iagozIDAgb2JqCjw8L1R5cGUvUGFnZXMvQ291bnQgMS9LaWRzWzQgMCBSXT4+CmVuZG9iago1IDAgb2JqCjw8L1R5cGUvQ2F0YWxvZy9QYWdlcyAzIDAgUj4+CmVuZG9iago2IDAgb2JqCjw8L1Byb2R1Y2VyKGlUZXh0riA1LjUuMTMuMyCpMjAwMC0yMDIyIGlUZXh0IEdyb3VwIE5WIFwoQUdQTC12ZXJzaW9uXCkpL0NyZWF0aW9uRGF0ZShEOjIwMjIxMTIyMTEzMjAzLTA4JzAwJykvTW9kRGF0ZShEOjIwMjIxMTIyMTEzMjAzLTA4JzAwJyk+PgplbmRvYmoKeHJlZgowIDcKMDAwMDAwMDAwMCA2NTUzNSBmIAowMDAwMDAwNzk5IDAwMDAwIG4gCjAwMDAwMDAwMTUgMDAwMDAgbiAKMDAwMDAwMDg4NyAwMDAwMCBuIAowMDAwMDAwNjg3IDAwMDAwIG4gCjAwMDAwMDA5MzggMDAwMDAgbiAKMDAwMDAwMDk4MyAwMDAwMCBuIAp0cmFpbGVyCjw8L1NpemUgNy9Sb290IDUgMCBSL0luZm8gNiAwIFIvSUQgWzwxMGM3ZWIyMGEwNTZiZGI3NGQzOTBlOTEwZGY4YjQxNT48MTBjN2ViMjBhMDU2YmRiNzRkMzkwZTkxMGRmOGI0MTU+XT4+CiVpVGV4dC01LjUuMTMuMwpzdGFydHhyZWYKMTE0MwolJUVPRgo=",
        "fileName": "RK - Plan - 11/22/2022 - 932777-01 -  -  - JLSRTEST - CONTRACTS/AGREEMENTS/SIGNATURE PAGE -",
        "mimeType": "application/pdf"
    }




<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.3.4</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.ecm1</groupId>
    <artifactId>ECM1</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>ECM1</name>
    <description>ECM Project</description>

    <properties>
        <java.version>21</java.version>  <!-- Ensure Java 21 is used -->
    </properties>

    <dependencies>

        <!-- Spring Boot Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- Apache POI for Excel Processing -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>5.2.3</version>
        </dependency>

        <!-- Xerces (XML Processing) -->
        <dependency>
            <groupId>xerces</groupId>
            <artifactId>xercesImpl</artifactId>
            <version>2.12.2</version>
        </dependency>

        <!-- Spring Boot Test (For Unit Testing) -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Apache Commons Utilities -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
            <version>1.3</version>
        </dependency>

        <!-- Spring Boot Core Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <!-- Maven Compiler Plugin to Ensure Java 21 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                </configuration>
            </plugin>

            <!-- Spring Boot Maven Plugin -->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.ecm1</groupId>
	<artifactId>ECM1</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>ECM1</name>
	<description>ecm project</description>
	<url/>
	<licenses>
		<license/>
	</licenses>
	<developers>
		<developer/>
	</developers>
	<scm>
		<connection/>
		<developerConnection/>
		<tag/>
		<url/>
	</scm>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>


		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.2.3</version>
		</dependency>

		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.12.2</version> <!-- Use the latest compatible version -->
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
			<version>RELEASE</version>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>5.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.xmlbeans</groupId>
			<artifactId>xmlbeans</artifactId>
			<version>5.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>5.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.12.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>1.3</version>
		</dependency>

		<!-- Spring Boot Starter -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>





package com.hrlc.compliance.service;

import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;

@Service
public class XmlService {

    @Autowired
    private UserInfoRepository userInfoRepo;

    @Autowired
    private PlanInfoRepository planInfoRepo;

    @Autowired
    private ContactInfoRepository contactInfoRepo;

    @Autowired
    private PlanRepo planRepo;

    private Plans newPlan = null;
    private PlanInfo planNumber = null;

    public List<PlanInfo> getPlanInfo() {
        return planInfoRepo.findAll();
    }

    public List<UserInfo> getUserInfo() {
        return userInfoRepo.findAll();
    }

    public ResponseEntity<String> processXmlData(String xmlData) {
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document document = dBuilder.parse(new InputSource(new StringReader(xmlData)));

            NodeList parentNodes = document.getElementsByTagName("*");

            for (int i = 0; i < parentNodes.getLength(); i++) {
                Element parent = (Element) parentNodes.item(i);
                processNode(parent);
            }
            return new ResponseEntity<>("Data saved successfully", HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private void processNode(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        if (gaId == null) {
            System.err.println("ga_id is null for element: " + parent.getTagName());
            return; // Skip processing this node
        }

        planNumber = planInfoRepo.findByGaId(gaId);
        if (planNumber == null) {
            System.err.println("No plan found for ga_id: " + gaId);
        }

        switch (parent.getTagName()) {
            case "user_info":
                saveUserInfo(parent);
                break;
            case "plan_info":
                savePlanInfo(parent);
                break;
            case "contact_info":
                saveContactInfo(parent);
                break;
            default:
                System.err.println("Unknown tag: " + parent.getTagName());
        }
    }

    private void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        if (gaId == null) {
            System.err.println("ga_id is null in plan_info");
            return;
        }

        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
            updatePlanInfo(existingRow, parent);
        } else {
            createNewPlanInfo(parent);
        }
    }

    private void updatePlanInfo(PlanInfo planInfo, Element parent) {
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        // Set other fields as needed
        planInfoRepo.save(planInfo);
    }

    private void createNewPlanInfo(Element parent) {
        Plans plan = new Plans();
        plan.setPlanNumber(getElementValue(parent, "ga_id"));
        plan.setPlanName(getElementValue(parent, "plan_name"));
        planRepo.save(plan);

        PlanInfo planInfo = new PlanInfo();
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfo.setPlans(plan);
        newPlan = plan;
        // Set other fields as needed
        planInfoRepo.save(planInfo);
    }

    private void saveUserInfo(Element parent) {
        if (planNumber == null) {
            System.err.println("planNumber is null while saving user_info");
            return;
        }

        UserInfo existingUserInfo = userInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));

        if (existingUserInfo != null) {
            existingUserInfo.setLogonId(getElementValue(parent, "logon_id"));
            existingUserInfo.setLastName(getElementValue(parent, "last_name"));
            existingUserInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            existingUserInfo.setJobTitle(getElementValue(parent, "job_title"));
            existingUserInfo.setMiddleName(getElementValue(parent, "middle_name"));
            existingUserInfo.setAreaCode(getElementValue(parent, "area_code"));
            existingUserInfo.setFirstName(getElementValue(parent, "first_name"));
            existingUserInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
            userInfoRepo.save(existingUserInfo);
        } else {
            UserInfo userInfo = new UserInfo();
            userInfo.setLogonId(getElementValue(parent, "logon_id"));
            userInfo.setLastName(getElementValue(parent, "last_name"));
            userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            userInfo.setJobTitle(getElementValue(parent, "job_title"));
            userInfo.setMiddleName(getElementValue(parent, "middle_name"));
            userInfo.setAreaCode(getElementValue(parent, "area_code"));
            userInfo.setFirstName(getElementValue(parent, "first_name"));
            userInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
            userInfo.setPlans(newPlan);
            userInfoRepo.save(userInfo);
        }
    }

    private void saveContactInfo(Element parent) {
        if (planNumber == null) {
            System.err.println("planNumber is null while saving contact_info");
            return;
        }

        ContactInfo existingContactInfo = contactInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));

        if (existingContactInfo != null) {
            existingContactInfo.setContactName(getElementValue(parent, "contact_name"));
            existingContactInfo.setContactEmail(getElementValue(parent, "contact_email"));
            existingContactInfo.setContactPhone(getElementValue(parent, "contact_phone"));
            // Add more fields here as needed
            contactInfoRepo.save(existingContactInfo);
        } else {
            ContactInfo contactInfo = new ContactInfo();
            contactInfo.setContactName(getElementValue(parent, "contact_name"));
            contactInfo.setContactEmail(getElementValue(parent, "contact_email"));
            contactInfo.setContactPhone(getElementValue(parent, "contact_phone"));
            // Add more fields here as needed
            contactInfo.setPlans(newPlan);
            contactInfoRepo.save(contactInfo);
        }
    }

    private String getElementValue(Element parent, String tagName) {
        NodeList nodeList = parent.getElementsByTagName(tagName);
        if (nodeList != null && nodeList.getLength() > 0) {
            return nodeList.item(0).getTextContent();
        }
        return null;
    }
}










package com.hrlc.compliance.service;

import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;

@Service
public class XmlService {

    @Autowired
    private UserInfoRepository userInfoRepo;

    @Autowired
    private PlanInfoRepository planInfoRepo;

    @Autowired
    private ContactInfoRepository contactInfoRepo;

    @Autowired
    private PlanRepo planRepo;

    private Plans newPlan = null;
    private PlanInfo planNumber = null;

    public List<PlanInfo> getPlanInfo() {
        return planInfoRepo.findAll();
    }

    public List<UserInfo> getUserInfo() {
        return userInfoRepo.findAll();
    }

    public ResponseEntity<String> processXmlData(String xmlData) {
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document document = dBuilder.parse(new InputSource(new StringReader(xmlData)));

            NodeList parentNodes = document.getElementsByTagName("*");

            for (int i = 0; i < parentNodes.getLength(); i++) {
                Element parent = (Element) parentNodes.item(i);
                processNode(parent);
            }
            return new ResponseEntity<>("Data saved successfully", HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private void processNode(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        if (gaId == null) {
            System.err.println("ga_id is null for element: " + parent.getTagName());
            return; // Skip processing this node
        }

        planNumber = planInfoRepo.findByGaId(gaId);
        if (planNumber == null) {
            System.err.println("No plan found for ga_id: " + gaId);
        }

        switch (parent.getTagName()) {
            case "user_info":
                saveUserInfo(parent);
                break;
            case "plan_info":
                savePlanInfo(parent);
                break;
            case "contact_info":
                saveContactInfo(parent);
                break;
            default:
                System.err.println("Unknown tag: " + parent.getTagName());
        }
    }

    private void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
            updatePlanInfo(existingRow, parent);
        } else {
            createNewPlanInfo(parent);
        }
    }

    private void updatePlanInfo(PlanInfo planInfo, Element parent) {
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        // Set other fields as needed
        planInfoRepo.save(planInfo);
    }

    private void createNewPlanInfo(Element parent) {
        Plans plan = new Plans();
        plan.setPlanNumber(getElementValue(parent, "ga_id"));
        plan.setPlanName(getElementValue(parent, "plan_name"));
        planRepo.save(plan);

        PlanInfo planInfo = new PlanInfo();
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfo.setPlans(plan);
        newPlan = plan;
        // Set other fields as needed
        planInfoRepo.save(planInfo);
    }

    private void saveUserInfo(Element parent) {
        if (planNumber == null) {
            System.err.println("planNumber is null while saving user_info");
            return;
        }

        UserInfo existingUserInfo = userInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));

        if (existingUserInfo != null) {
            existingUserInfo.setLogonId(getElementValue(parent, "logon_id"));
            existingUserInfo.setLastName(getElementValue(parent, "last_name"));
            existingUserInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            existingUserInfo.setJobTitle(getElementValue(parent, "job_title"));
            existingUserInfo.setMiddleName(getElementValue(parent, "middle_name"));
            existingUserInfo.setAreaCode(getElementValue(parent, "area_code"));
            existingUserInfo.setFirstName(getElementValue(parent, "first_name"));
            existingUserInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
            userInfoRepo.save(existingUserInfo);
        } else {
            UserInfo userInfo = new UserInfo();
            userInfo.setLogonId(getElementValue(parent, "logon_id"));
            userInfo.setLastName(getElementValue(parent, "last_name"));
            userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            userInfo.setJobTitle(getElementValue(parent, "job_title"));
            userInfo.setMiddleName(getElementValue(parent, "middle_name"));
            userInfo.setAreaCode(getElementValue(parent, "area_code"));
            userInfo.setFirstName(getElementValue(parent, "first_name"));
            userInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
            userInfo.setPlans(newPlan);
            userInfoRepo.save(userInfo);
        }
    }

    private void saveContactInfo(Element parent) {
        if (planNumber == null) {
            System.err.println("planNumber is null while saving contact_info");
            return;
        }

        ContactInfo existingContactInfo = contactInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));

        if (existingContactInfo != null) {
            existingContactInfo.setContactName(getElementValue(parent, "contact_name"));
            existingContactInfo.setContactEmail(getElementValue(parent, "contact_email"));
            existingContactInfo.setContactPhone(getElementValue(parent, "contact_phone"));
            // Add more fields here as needed
            contactInfoRepo.save(existingContactInfo);
        } else {
            ContactInfo contactInfo = new ContactInfo();
            contactInfo.setContactName(getElementValue(parent, "contact_name"));
            contactInfo.setContactEmail(getElementValue(parent, "contact_email"));
            contactInfo.setContactPhone(getElementValue(parent, "contact_phone"));
            // Add more fields here as needed
            contactInfo.setPlans(newPlan);
            contactInfoRepo.save(contactInfo);
        }
    }

    private String getElementValue(Element parent, String tagName) {
        NodeList nodeList = parent.getElementsByTagName(tagName);
        if (nodeList != null && nodeList.getLength() > 0) {
            return nodeList.item(0).getTextContent();
        }
        return null;
    }
}





package com.hrlc.compliance.service;

import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;

@Service
public class XmlService {
    
    @Autowired
    private UserInfoRepository userInfoRepo;

    @Autowired
    private PlanInfoRepository planInfoRepo;

    @Autowired
    private ContactInfoRepository contactInfoRepo;

    @Autowired
    private PlanRepo planRepo;

    private Plans newPlan = null;
    private PlanInfo planNumber = null;

    public List<PlanInfo> getPlanInfo() {
        return planInfoRepo.findAll();
    }

    public List<UserInfo> getUserInfo() {
        return userInfoRepo.findAll();
    }

    public ResponseEntity<String> processXmlData(String xmlData) {
        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document document = dBuilder.parse(new InputSource(new StringReader(xmlData)));

            NodeList parentNodes = document.getElementsByTagName("*");

            for (int i = 0; i < parentNodes.getLength(); i++) {
                Element parent = (Element) parentNodes.item(i);
                processNode(parent);
            }
            return new ResponseEntity<>("Data saved successfully", HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private void processNode(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        planNumber = planInfoRepo.findByGaId(gaId);

        switch (parent.getTagName()) {
            case "user_info":
                saveUserInfo(parent);
                break;
            case "plan_info":
                savePlanInfo(parent);
                break;
            case "contact_info":
                saveContactInfo(parent);
                break;
        }
    }

    private void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
            updatePlanInfo(existingRow, parent);
        } else {
            createNewPlanInfo(parent);
        }
    }

    private void updatePlanInfo(PlanInfo planInfo, Element parent) {
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfoRepo.save(planInfo);
    }

    private void createNewPlanInfo(Element parent) {
        Plans plan = new Plans();
        plan.setPlanNumber(getElementValue(parent, "ga_id"));
        plan.setPlanName(getElementValue(parent, "plan_name"));
        planRepo.save(plan);

        PlanInfo planInfo = new PlanInfo();
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfo.setPlans(plan);
        newPlan = plan;
        planInfoRepo.save(planInfo);
    }

    private void saveUserInfo(Element parent) {
        UserInfo existingUserInfo = null;
        if (planNumber != null) {
            existingUserInfo = userInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));
        }

        if (existingUserInfo != null) {
            updateUserInfo(existingUserInfo, parent);
        } else {
            createNewUserInfo(parent);
        }
    }

    private void updateUserInfo(UserInfo userInfo, Element parent) {
        userInfo.setLogonId(getElementValue(parent, "logon_id"));
        userInfo.setLastName(getElementValue(parent, "last_name"));
        userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
        userInfo.setJobTitle(getElementValue(parent, "job_title"));
        userInfo.setMiddleName(getElementValue(parent, "middle_name"));
        userInfo.setAreaCode(getElementValue(parent, "area_code"));
        userInfo.setFirstName(getElementValue(parent, "first_name"));
        userInfo.setEmailAddress(getElementValue(parent, "email_address"));
        userInfoRepo.save(userInfo);
    }

    private void createNewUserInfo(Element parent) {
        UserInfo userInfo = new UserInfo();
        userInfo.setLogonId(getElementValue(parent, "logon_id"));
        userInfo.setLastName(getElementValue(parent, "last_name"));
        userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
        userInfo.setJobTitle(getElementValue(parent, "job_title"));
        userInfo.setMiddleName(getElementValue(parent, "middle_name"));
        userInfo.setAreaCode(getElementValue(parent, "area_code"));
        userInfo.setFirstName(getElementValue(parent, "first_name"));
        userInfo.setEmailAddress(getElementValue(parent, "email_address"));
        userInfo.setPlans(newPlan);
        userInfoRepo.save(userInfo);
    }

    private void saveContactInfo(Element parent) {
        if (planNumber != null) {
            List<ContactInfo> existingContactInfos = contactInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));
            if (!existingContactInfos.isEmpty()) {
                updateContactInfos(existingContactInfos, parent);
            } else {
                createNewContactInfo(parent);
            }
        } else {
            createNewContactInfo(parent);
        }
    }

    private void updateContactInfos(List<ContactInfo> contactInfos, Element parent) {
        for (ContactInfo contactInfo : contactInfos) {
            contactInfo.setFirstName(getElementValue(parent, "first_name"));
            contactInfo.setLastName(getElementValue(parent, "last_name"));
            contactInfo.setJobTitle(getElementValue(parent, "job_title"));
            contactInfo.setCompanyName(getElementValue(parent, "company_name"));
            contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
            contactInfo.setCity(getElementValue(parent, "city"));
            contactInfo.setStateCode(getElementValue(parent, "state_code"));
            contactInfo.setZipCode(getElementValue(parent, "zip_code"));
            contactInfo.setCountry(getElementValue(parent, "country"));
            contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
            contactInfo.setEmailAddress(getElementValue(parent, "email_address"));
            contactInfoRepo.save(contactInfo);
        }
    }

    private void createNewContactInfo(Element parent) {
        ContactInfo contactInfo = new ContactInfo();
        contactInfo.setContactId(getElementValue(parent, "contact_id"));
        contactInfo.setFirstName(getElementValue(parent, "first_name"));
        contactInfo.setLastName(getElementValue(parent, "last_name"));
        contactInfo.setJobTitle(getElementValue(parent, "job_title"));
        contactInfo.setCompanyName(getElementValue(parent, "company_name"));
        contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
        contactInfo.setCity(getElementValue(parent, "city"));
        contactInfo.setStateCode(getElementValue(parent, "state_code"));
        contactInfo.setZipCode(getElementValue(parent, "zip_code"));
        contactInfo.setCountry(getElementValue(parent, "country"));
        contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
        contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
        contactInfo.setEmailAddress(getElementValue(parent, "email_address"));
        contactInfo.setPlans(newPlan);
        contactInfoRepo.save(contactInfo);
    }

    private String getElementValue(Element parseElement, String childTagName) {
        NodeList childNodes = parseElement.getElementsByTagName(childTagName);
        if (childNodes.getLength() > 0) {
            return childNodes.item(0).getTextContent();
        }
        return null;
    }

    public PlanInfo findByGaId(String gaId) {
        return planInfoRepo.findByGaId(gaId);
    }

    public List<ContactInfo> contactByPlanId(int id) {
        return contactInfoRepo.findByPlansPlanId(id);
    }

    public PlanInfo findByPlanId(int planId) {
        return planInfoRepo.findByPlanId(planId);
    }

    public Plans getLastRow() {
        Optional<Plans> plans = planRepo.findLastRow();
        return plans.orElse(null);
    }

    public void updatePlanInfo(PlanInfo planInfo) {
        planInfoRepo.save(planInfo);
    }

    public void updateContactInfo(ContactInfo contactInfo) {
        contactInfoRepo.save(contactInfo);
    }

    public void deletePlan(int id) {
        PlanInfo planInfo = planInfoRepo.findByPlanId(id);
        if (planInfo != null) {
            planInfoRepo.delete(planInfo);
        }

        List<ContactInfo> contactInfos = contactInfoRepo.findByPlansPlanId(id);
        if (contactInfos != null && !contactInfos.isEmpty()) {
            contactInfoRepo.deleteAll(contactInfos);
        }

        Plans plan = planRepo.findById(id).orElse(null);
        if (plan != null) {
            planRepo.delete(plan);
        }
    }

    public List<Plans> getPlans() {
        return planRepo.findAll();
    }
}







package com.hrlc.compliance.service;
import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
//
import com.hrlc.compliance.entity.ContactInfo;
//import com.hrlc.compliance.entity.ContactRole;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
//import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
//import com.hrlc.compliance.repository.ContactInfoRepository;
//import com.hrlc.compliance.repository.ContactRoleRepo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;


@Service
public class xmlService {
	@Autowired
	private UserInfoRepository userInfoRepo;
	
	@Autowired
	private	PlanInfoRepository planInfoRepo;
	
	@Autowired
	private ContactInfoRepository contactInfoRepo;
//	@Autowired
//	private ContactRoleRepo contactRoleRepo;
	
	@Autowired
	private PlanRepo planRepo;
	
	String imp = null;
	
	public List<PlanInfo> getPlanInfo()
	{
		return planInfoRepo.findAll();
	}
	
//	public List<ContactInfo> getContactInfo()
//	{
//		return contactInfoRepo.findAll();
//	}
	public List<UserInfo> getUserInfo()
	{
		return userInfoRepo.findAll();
	}
	public ResponseEntity<String> processXmlData(String xmlData) {
        try {
            DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
            Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

            NodeList parentNodes = document.getElementsByTagName("*");

            for (int i = 0; i < parentNodes.getLength(); i++) {
                Element parent = (Element) parentNodes.item(i);
                processNode(parent);
            }
            return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
	PlanInfo planNumber;
    private void processNode(Element parent) {
    	  String gaId = getElementValue(parent, "ga_id");
          PlanInfo existingRow = planInfoRepo.findByGaId(gaId);
          planNumber = existingRow;
        switch (parent.getTagName()) {
            case "user_info":
                saveUserInfo(parent);
                break;
            case "plan_info":
                savePlanInfo(parent);
                break;
            case "contact_info":
                saveContactInfo(parent);
                break;
        }
    }

 
    Plans newPlan=null;
    private void savePlanInfo(Element parent) {
    	
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
        	System.out.println("exisiting  plan");
            existingRow.setEvId(getElementValue(parent, "ev_id"));
            existingRow.setPlanName(getElementValue(parent, "plan_name"));
            existingRow.setIrsrlCode(getElementValue(parent, "irsrl_code"));
            existingRow.setProvCompany(getElementValue(parent, "prov_company"));
            existingRow.setProdId(getElementValue(parent, "prod_id"));
            existingRow.setStatusCode(getElementValue(parent, "status_code"));
            existingRow.setDpDateTime(getElementValue(parent, "dpdate_time"));
            existingRow.setRolloverInd(getElementValue(parent, "rollover_ind"));
            existingRow.setClientName(getElementValue(parent, "client_name"));
            existingRow.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            existingRow.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
            existingRow.setCity(getElementValue(parent, "city"));
            existingRow.setStateCode(getElementValue(parent, "state_code"));
            existingRow.setZipCode(getElementValue(parent, "zip_code"));
            existingRow.setCountry(getElementValue(parent, "country"));
            existingRow.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
            existingRow.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
            existingRow.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
            existingRow.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
            existingRow.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
            existingRow.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
            existingRow.setClientEntityType(getElementValue(parent, "client_entity_type"));
            existingRow.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
            // Set other fields as needed
        } else {
        	System.out.println("new plan");
        	// creating new plan
            Plans plan = new Plans();
            plan.setPlanNumber(getElementValue(parent, "ga_id"));
            plan.setPlanName(getElementValue(parent, "plan_name"));
            planRepo.save(plan);
            
            
            PlanInfo planInfo = new PlanInfo();
            planInfo.setGaId(getElementValue(parent, "ga_id"));
            planInfo.setEvId(getElementValue(parent, "ev_id"));
            planInfo.setPlanName(getElementValue(parent, "plan_name"));
            planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
            planInfo.setProvCompany(getElementValue(parent, "prov_company"));
            planInfo.setProdId(getElementValue(parent, "prod_id"));
            planInfo.setStatusCode(getElementValue(parent, "status_code"));
            planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
            planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
            planInfo.setClientName(getElementValue(parent, "client_name"));
            planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
            planInfo.setCity(getElementValue(parent, "city"));
            planInfo.setStateCode(getElementValue(parent, "state_code"));
            planInfo.setZipCode(getElementValue(parent, "zip_code"));
            planInfo.setCountry(getElementValue(parent, "country"));
            planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
            planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
            planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
            planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
            planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
            planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
            planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
            planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
            planInfo.setPlans(plan);
            newPlan = plan;
            // Set other fields as needed
            planInfoRepo.save(planInfo);
        }
    }
    private void saveUserInfo(Element parent) {
    	UserInfo existingUserInfo=null;
        if(planNumber!=null) {
        	existingUserInfo = userInfoRepo.findByPlansPlanId(Integer.parseInt(planNumber.getGaId()));
        }
        
        if (existingUserInfo != null) {
            existingUserInfo.setLogonId(getElementValue(parent, "logon_id"));
            existingUserInfo.setLastName(getElementValue(parent, "last_name"));
            existingUserInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            existingUserInfo.setJobTitle(getElementValue(parent, "job_title"));
            existingUserInfo.setMiddleName(getElementValue(parent, "middle_name"));
            existingUserInfo.setAreaCode(getElementValue(parent, "area_code"));
            existingUserInfo.setFirstName(getElementValue(parent, "first_name"));
            existingUserInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
        } else {
            UserInfo userInfo = new UserInfo();
            userInfo.setLogonId(getElementValue(parent, "logon_id"));
            userInfo.setLastName(getElementValue(parent, "last_name"));
            userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            userInfo.setJobTitle(getElementValue(parent, "job_title"));
            userInfo.setMiddleName(getElementValue(parent, "middle_name"));
            userInfo.setAreaCode(getElementValue(parent, "area_code"));
            userInfo.setFirstName(getElementValue(parent, "first_name"));
            userInfo.setEmailAddress(getElementValue(parent, "email_address"));
            userInfo.setPlans(newPlan);
            // Add more fields here as needed
            userInfoRepo.save(userInfo);
        }
    }

    private void saveContactInfo(Element parent) {
    	List<ContactInfo> existingContactInfo1=null;
    	Plans plan=null;
        if(planNumber!=null) {
        	existingContactInfo1 = contactInfoRepo.findByPlansPlanId(Integer.parseInt( planNumber.getGaId()));
        	plan = planRepo.findByPlannumber(planNumber.getGaId());
        	
        }
//        String contactId = getElementValue(parent, "contact_id");
//        ContactInfo existingContactInfo = contactInfoRepo.findById(contactId).orElse(null);
    	
      int k=0;  
    if (existingContactInfo1 != null) {
        for(int i=0;i<existingContactInfo1.size();i++);{
        	ContactInfo existingContactInfo = existingContactInfo1.get(k);
        	k++;

            existingContactInfo.setFirstName(getElementValue(parent, "first_name"));
            existingContactInfo.setLastName(getElementValue(parent, "last_name"));
            existingContactInfo.setJobTitle(getElementValue(parent, "job_title"));
            existingContactInfo.setCompanyName(getElementValue(parent, "company_name"));
            existingContactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            existingContactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
            existingContactInfo.setCity(getElementValue(parent, "city"));
            existingContactInfo.setStateCode(getElementValue(parent, "state_code"));
            existingContactInfo.setZipCode(getElementValue(parent, "zip_code"));
            existingContactInfo.setCountry(getElementValue(parent, "country"));
            existingContactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            existingContactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
            existingContactInfo.setEmailAddress(getElementValue(parent, "email_address"));
//            existingContactInfo.setPlans(plan);
            // Set other fields as needed
        }
    }else {
    	// adding new contact info
            ContactInfo contactInfo = new ContactInfo();
            contactInfo.setContactId(getElementValue(parent, "contact_id"));
            contactInfo.setFirstName(getElementValue(parent, "first_name"));
            contactInfo.setLastName(getElementValue(parent, "last_name"));
            contactInfo.setJobTitle(getElementValue(parent, "job_title"));
            contactInfo.setCompanyName(getElementValue(parent, "company_name"));
            contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
            contactInfo.setCity(getElementValue(parent, "city"));
            contactInfo.setStateCode(getElementValue(parent, "state_code"));
            contactInfo.setZipCode(getElementValue(parent, "zip_code"));
            contactInfo.setCountry(getElementValue(parent, "country"));
            contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
            contactInfo.setEmailAddress(getElementValue(parent, "email_address"));
            contactInfo.setPlans(newPlan);
            // Set other fields as needed
            contactInfoRepo.save(contactInfo);
        }
    }




	private String getElementValue(Element parseElement, String childTagName) {
	    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
	    if (childNodes.getLength() > 0) {
	        return childNodes.item(0).getTextContent();
	    }
	    return null;
	}
	
	public  PlanInfo findbygaid(String GaId){
		return planInfoRepo.findByGaId(GaId);
	}
	
	public List<ContactInfo> contactbyplaid(int id) {
		return contactInfoRepo.findByPlansPlanId(id);
	}
	
	public PlanInfo findByPlanId(int planId) {
		System.out.println("last row is "+getLastRow());
		return planInfoRepo.findByPlanId(planId);
	}
	
	public Plans getLastRow() {
//		Plans lastRow = null;
		Optional<Plans> plans = planRepo.findLastRow();
		System.out.println(plans);
		return plans.orElse(null);
	}
	
	public void uodatePlanInfo(PlanInfo planinfo) {
		PlanInfo pf = planInfoRepo.findByGaId(planinfo.getGaId());
		System.out.println(planinfo);
		if(pf!=null) {
			planInfoRepo.save(planinfo);
			System.out.println("saved");
		}
	}
	 public void updatePlanInfo(PlanInfo planInfo) {
	        
	           planInfoRepo.save(planInfo);
	           System.out.println("updated");
	        
	    }
	 public void updateContactInfo(ContactInfo contactInfo) {
	        
         contactInfoRepo.save(contactInfo);
         System.out.println("updated");
      
  }
	 public void deleteplan(int id) {
		PlanInfo planInfo= planInfoRepo.findByPlanId(id);
		if(planInfo!=null) {
			planInfoRepo.delete(planInfo);
			
		}
//		String cid=""+id;
		List<ContactInfo> info =contactInfoRepo.findByPlansPlanId(id);
		if(info!=null) {
			contactInfoRepo.deleteAll(info);
		}
		Plans plan = planRepo.findById(id).orElse(null);
		if(plan!=null) {
			planRepo.delete(plan);
		}
		System.out.println("deleted successfully");
	 }
	 
	 public List<Plans> getplans() {
		 return planRepo.findAll();
	 }

	
}

	






ibernate: select pi1_0.plan_infoid,pi1_0.city,pi1_0.client_entity_type,pi1_0.client_name,pi1_0.country,pi1_0.dp_date_time,pi1_0.est_implementation_date,pi1_0.est_number_of_participants,pi1_0.est_plan_assets,pi1_0.ev_id,pi1_0.first_line_mailing,pi1_0.ga_id,pi1_0.internal_compliance_ind,pi1_0.irsrl_code,pi1_0.plan_anniv_date,pi1_0.plan_name,pi1_0.plans_plan_id,pi1_0.prod_id,pi1_0.prov_company,pi1_0.rollover_ind,pi1_0.scnd_line_mailing,pi1_0.state_code,pi1_0.status_code,pi1_0.subset_cash_code,pi1_0.tpa_firm_id,pi1_0.zip_code from plan_info pi1_0
Hibernate: select p1_0.plan_id,p1_0.plan_name,p1_0.plannumber from plans p1_0 where p1_0.plan_id=?
Hibernate: select p1_0.plan_id,p1_0.plan_name,p1_0.plannumber from plans p1_0 where p1_0.plan_id=?
Hibernate: select p1_0.plan_id,p1_0.plan_name,p1_0.plannumber from plans p1_0 where p1_0.plan_id=?
Hibernate: select p1_0.plan_id,p1_0.plan_name,p1_0.plannumber from plans p1_0 where p1_0.plan_id=?
Hibernate: select ui1_0.user_infoid,ui1_0.area_code,ui1_0.email_address,ui1_0.first_name,ui1_0.job_title,ui1_0.last_name,ui1_0.logon_id,ui1_0.middle_name,ui1_0.phone_nbr,ui1_0.plans_plan_id from user_info ui1_0
2024-06-10T05:58:50.386-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hwpf.model.PAPBinTable    : Paragraph [91; 92) has no PAPX. Creating new one.
2024-06-10T05:58:50.415-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.423-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.424-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.425-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.425-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.425-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.444-06:00  INFO 9652 --- [nio-8082-exec-6] org.apache.poi.POIDocument               : Wrote property set SummaryInformation of size 460
2024-06-10T05:58:50.445-06:00  INFO 9652 --- [nio-8082-exec-6] org.apache.poi.POIDocument               : Wrote property set DocumentSummaryInformation of size 324
2024-06-10T05:58:50.537-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hwpf.model.PAPBinTable    : Paragraph [91; 92) has no PAPX. Creating new one.
2024-06-10T05:58:50.552-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.553-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.553-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.553-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.553-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.553-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.581-06:00  INFO 9652 --- [nio-8082-exec-6] org.apache.poi.POIDocument               : Wrote property set SummaryInformation of size 460
2024-06-10T05:58:50.583-06:00  INFO 9652 --- [nio-8082-exec-6] org.apache.poi.POIDocument               : Wrote property set DocumentSummaryInformation of size 324
2024-06-10T05:58:50.697-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hwpf.model.PAPBinTable    : Paragraph [91; 92) has no PAPX. Creating new one.
2024-06-10T05:58:50.715-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.716-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.717-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.717-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.717-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.717-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hpsf.CodePageString       : String terminator (\0) for CodePageString property value occurred before the end of string. Trimming and hope for the best.
2024-06-10T05:58:50.760-06:00  INFO 9652 --- [nio-8082-exec-6] org.apache.poi.POIDocument               : Wrote property set SummaryInformation of size 460
2024-06-10T05:58:50.761-06:00  INFO 9652 --- [nio-8082-exec-6] org.apache.poi.POIDocument               : Wrote property set DocumentSummaryInformation of size 324
2024-06-10T05:58:50.844-06:00  WARN 9652 --- [nio-8082-exec-6] org.apache.poi.hwpf.model.PAPBinTable    : Paragraph [91; 92) has no PAPX. Creating new one.
2024-06-10T05:58:50.855-06:00 ERROR 9652 --- [nio-8082-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.NullPointerException] with root cause

java.lang.NullPointerException: null
	at java.base/java.util.Objects.requireNonNull(Objects.java:209) ~[na:na]
	at java.base/java.util.ImmutableCollections$MapN.<init>(ImmutableCollections.java:1186) ~[na:na]
	at java.base/java.util.Map.of(Map.java:1373) ~[na:na]
	at com.hrlc.compliance.controller.ReplaceDocxTags.replaceTags(ReplaceDocxTags.java:109) ~[classes/:na]
	at com.hrlc.compliance.controller.ReplaceDocxTags.replaceXmlTagsInDocx(ReplaceDocxTags.java:95) ~[classes/:na]
	at com.hrlc.compliance.controller.ReplaceDocxTags.generateDocxFiles(ReplaceDocxTags.java:73) ~[classes/:na]
	at com.hrlc.compliance.controller.ReplaceDocxTags.generateDocxFiles(ReplaceDocxTags.java:48) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.18.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.18.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at java.base/java.lang.Thread.run(Thread.java:840) ~[na:na]


--------
package com.hrlc.compliance.controller;

//replacing tags with acutal data and generating seperate file for each row
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class ReplaceDocxTags {

 @Autowired
 private PlanInfoRepository planInfoRepo;

 @Autowired
 private UserInfoRepository userInfoRepo;

 @PostMapping("/generate-docx-files")
 public ResponseEntity<List<String>> generateDocxFiles() {
     try {
         // Fetch data from the database
         List<PlanInfo> planInfoList = planInfoRepo.findAll();
         List<UserInfo> userInfoList = userInfoRepo.findAll();

         // Generate DOCX files
         List<String> filePaths = generateDocxFiles(planInfoList, userInfoList);

         return ResponseEntity.ok().body(filePaths);
     } catch (IOException e) {
         e.printStackTrace();
         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
     }
 }

 private List<String> generateDocxFiles(List<PlanInfo> planInfoList, List<UserInfo> userInfoList) throws IOException {
     // Create a list to store the file paths of the generated DOCX files
     List<String> filePaths = new ArrayList<>();
     
     int minLength = Math.min(planInfoList.size(), userInfoList.size());

     // Iterate over the data fetched from the database
     for (int i = 0; i <minLength; i++) {
         PlanInfo planInfo = planInfoList.get(i);
         UserInfo userInfo = userInfoList.get(i);

         try {
             // Read the DOCX template file content
             byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot"));

             // Replace XML tags in the DOCX file
             byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, planInfo, userInfo);

             // Save the modified DOCX file
             String filePath = saveModifiedDocxFile(modifiedDocument, planInfo.getEvId());

             // Add the file path to the list
             filePaths.add(filePath);
         } catch (IOException e) {
             // Handle exceptions for the current xmlEntity if needed
             e.printStackTrace();
         }
     }

     return filePaths;
 }

 private byte[] replaceXmlTagsInDocx(byte[] dotContent, PlanInfo planInfo, UserInfo userInfo) throws IOException {
     try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
          HWPFDocument document = new HWPFDocument(inputStream);
          ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

         // Replace tags for PlanInfo
         replaceTags(document, planInfo);

         // Replace tags for UserInfo
         replaceTags(document, userInfo);

         document.write(outputStream);
         return outputStream.toByteArray();
     }
 }

 private void replaceTags(HWPFDocument document, PlanInfo planInfo) {
     Range range = document.getRange();

     // Define your tag replacements for PlanInfo
     Map<String, String> tagReplacements = Map.of(
             "<ssmPlanName>", planInfo.getPlanName(),
             "<ssmPlanNumber>", planInfo.getGaId()
             // Add more tag replacements as needed
     );

     // Iterate through the tag replacements
     for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
         String tag = entry.getKey();
         String replacement = entry.getValue();

//         // Debugging: Print the tag and replacement value
//         System.out.println("Replacing tag: " + tag);
//         System.out.println("With value: " + replacement);

         // Replace the tag in the document
         range.replaceText(tag, replacement);
     }
 }

 private void replaceTags(HWPFDocument document, UserInfo userInfo) {
     Range range = document.getRange();

     // Define your tag replacements for UserInfo
     Map<String, String> tagReplacements = Map.of(
             "<ssmPlanName>", userInfo.getLogonId(),
             "<ssmPlanNumber>", userInfo.getLastName()
             // Add more tag replacements as needed
     );

     // Iterate through the tag replacements
     for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
         String tag = entry.getKey();
         String replacement = entry.getValue();

//         // Debugging: Print the tag and replacement value
//         System.out.println("Replacing tag: " + tag);
//         System.out.println("With value: " + replacement);

         // Replace the tag in the document
         range.replaceText(tag, replacement);
     }
 }

 private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
	    // Generate a timestamp for the filename
	    LocalDateTime currentTime = LocalDateTime.now();
	    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
	    String timestamp = currentTime.format(formatter);

	    // Construct the filename with the timestamp
	    String filename = evId + " " + timestamp + ".doc";

	    // Construct the file path with the timestamped filename
	    String filePath = "C:\\TestXML\\Files\\" + filename;

	    // Write the modified DOCX content to the file
	    try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
	        fileOutputStream.write(modifiedDocxContent);
	    }

	    // Return the file path
	    return filePath;
	}
}



-------------------------------
-package com.hrlc.compliance.controller;

import org.apache.poi.xwpf.usermodel.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class ReplaceDocxTags {

    @Autowired
    private PlanInfoRepository planInfoRepo;

    @Autowired
    private UserInfoRepository userInfoRepo;

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch data from the database
            List<PlanInfo> planInfoList = planInfoRepo.findAll();
            List<UserInfo> userInfoList = userInfoRepo.findAll();

            // Generate DOCX files
            List<String> filePaths = generateDocxFiles(planInfoList, userInfoList);

            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<PlanInfo> planInfoList, List<UserInfo> userInfoList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();
        
        int minLength = Math.min(planInfoList.size(), userInfoList.size());

        // Iterate over the data fetched from the database
        for (int i = 0; i < minLength; i++) {
            PlanInfo planInfo = planInfoList.get(i);
            UserInfo userInfo = userInfoList.get(i);

            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\Users\\chnksv\\Desktop\\Plan Express Specifications.docx"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, planInfo, userInfo);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, planInfo.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, PlanInfo planInfo, UserInfo userInfo) throws IOException {
        try (
            ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
            XWPFDocument document = new XWPFDocument(inputStream);
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream()
        ) {
            // Replace tags for PlanInfo
            replaceTags(document, planInfo);

            // Replace tags for UserInfo
//             replaceTags(document, userInfo);

            document.write(outputStream);
            return outputStream.toByteArray();
        }
    }

    public void replaceTags(XWPFDocument document, PlanInfo planInfo) {
        // Define your tag replacements for PlanInfo
        Map<String, String> tagReplacements = Map.of(
            "<ssmNRA>", planInfo.getPlanName(),
            "{{status_code}}", planInfo.getStatusCode()
            // Add more tag replacements as needed
        );

        // Iterate through all paragraphs in the document
        for (XWPFParagraph paragraph : document.getParagraphs()) {
            for (XWPFRun run : paragraph.getRuns()) {
                String text = run.getText(0);
                if (text != null) {
                    // Replace tags in the text
                    for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
                        String tag = entry.getKey();
                        String replacement = entry.getValue();
                        text = text.replace(tag, replacement);
                    }
                    // Set the modified text back to the run
                    run.setText(text, 0);
                }
            }
        }
    }

    private void replaceTags(HWPFDocument document, UserInfo userInfo) {
        Range range = document.getRange();

        // Define your tag replacements for UserInfo
        Map<String, String> tagReplacements = Map.of(
            "ssmPlanNumber", userInfo.getLogonId(),
            "{{last_name}}", userInfo.getLastName()
            // Add more tag replacements as needed
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        // Generate a timestamp for the filename
        LocalDateTime currentTime = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
        String timestamp = currentTime.format(formatter);

        // Construct the filename with the timestamp
        String filename = evId + " " + timestamp + ".docx";

        // Construct the file path with the timestamped filename
        String filePath = "C:\\TestXML\\Files\\" + filename;

        // Write the modified DOCX content to the file
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }

        // Return the file path
        return filePath;
    }
}





----------------
package com.hrlc.compliance.controller;

//replacing tags with acutal data and generating seperate file for each row
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class ReplaceDocxTags {

 @Autowired
 private PlanInfoRepository planInfoRepo;

 @Autowired
 private UserInfoRepository userInfoRepo;

 @PostMapping("/generate-docx-files")
 public ResponseEntity<List<String>> generateDocxFiles() {
     try {
         // Fetch data from the database
         List<PlanInfo> planInfoList = planInfoRepo.findAll();
         List<UserInfo> userInfoList = userInfoRepo.findAll();

         // Generate DOCX files
         List<String> filePaths = generateDocxFiles(planInfoList, userInfoList);

         return ResponseEntity.ok().body(filePaths);
     } catch (IOException e) {
         e.printStackTrace();
         return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
     }
 }

 private List<String> generateDocxFiles(List<PlanInfo> planInfoList, List<UserInfo> userInfoList) throws IOException {
     // Create a list to store the file paths of the generated DOCX files
     List<String> filePaths = new ArrayList<>();
     
     int minLength = Math.min(planInfoList.size(), userInfoList.size());

     // Iterate over the data fetched from the database
     for (int i = 0; i <minLength; i++) {
         PlanInfo planInfo = planInfoList.get(i);
         UserInfo userInfo = userInfoList.get(i);

         try {
             // Read the DOCX template file content
             byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\Users\\chnksv\\Desktop\\Plan Express Specifications.docx"));

             // Replace XML tags in the DOCX file
             byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, planInfo, userInfo);

             // Save the modified DOCX file
             String filePath = saveModifiedDocxFile(modifiedDocument, planInfo.getEvId());

             // Add the file path to the list
             filePaths.add(filePath);
         } catch (IOException e) {
             // Handle exceptions for the current xmlEntity if needed
             e.printStackTrace();
         }
     }

     return filePaths;
 }

 private byte[] replaceXmlTagsInDocx(byte[] dotContent, PlanInfo planInfo, UserInfo userInfo) throws IOException {
     try (
    		 ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
    		 XWPFDocument document = new XWPFDocument(inputStream);
          ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

         // Replace tags for PlanInfo
         replaceTags(document, planInfo);

         // Replace tags for UserInfo
//         replaceTags(document, userInfo);

         document.write(outputStream);
         return outputStream.toByteArray();
     }
 }

 public void replaceTags(XWPFDocument document, PlanInfo planInfo) {
     // Define your tag replacements for PlanInfo
	 System.out.println("helo boss");
     Map<String, String> tagReplacements = Map.of(
             "<ssmNRA>", planInfo.getPlanName(),
             "{{status_code}}", planInfo.getStatusCode()
             // Add more tag replacements as needed
     );

     // Iterate through all paragraphs in the document
     for (XWPFParagraph paragraph : document.getParagraphs()) {
         // Iterate through the runs (text elements) in the paragraph
         for (XWPFRun run : paragraph.getRuns()) {
             String text = run.getText(0);
             if (text != null) {
                 // Replace tags in the text
                 for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
                     String tag = entry.getKey();
                     String replacement = entry.getValue();
                     text = text.replace(tag, replacement);
                 }
                 // Set the modified text back to the run
                 run.setText(text, 0);
             }
         }
     }
 }
 private void replaceTags(HWPFDocument document, UserInfo userInfo) {
     Range range = document.getRange();

     // Define your tag replacements for UserInfo
     Map<String, String> tagReplacements = Map.of(
             "ssmPlanNumber", userInfo.getLogonId(),
             "{{last_name}}", userInfo.getLastName()
             // Add more tag replacements as needed
     );

     // Iterate through the tag replacements
     for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
         String tag = entry.getKey();
         String replacement = entry.getValue();

//         // Debugging: Print the tag and replacement value
//         System.out.println("Replacing tag: " + tag);
//         System.out.println("With value: " + replacement);

         // Replace the tag in the document
         range.replaceText(tag, replacement);
     }
 }

 private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
	    // Generate a timestamp for the filename
	    LocalDateTime currentTime = LocalDateTime.now();
	    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd_HH-mm-ss");
	    String timestamp = currentTime.format(formatter);

	    // Construct the filename with the timestamp
	    String filename = evId + " " + timestamp + ".docx";

	    // Construct the file path with the timestamped filename
	    String filePath = "C:\\TestXML\\Files\\" + filename;

	    // Write the modified DOCX content to the file
	    try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
	        fileOutputStream.write(modifiedDocxContent);
	    }

	    // Return the file path
	    return filePath;
	}
}




public void replaceTags(XWPFDocument document, PlanInfo planInfo) {
        // Define your tag replacements for PlanInfo
        Map<String, String> tagReplacements = Map.of(
                "ssmPlanName", planInfo.getPlanName(),
                "{{status_code}}", planInfo.getStatusCode()
                // Add more tag replacements as needed
        );

        // Iterate through all paragraphs in the document
        for (XWPFParagraph paragraph : document.getParagraphs()) {
            // Iterate through the runs (text elements) in the paragraph
            for (XWPFRun run : paragraph.getRuns()) {
                String text = run.getText(0);
                if (text != null) {
                    // Replace tags in the text
                    for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
                        String tag = entry.getKey();
                        String replacement = entry.getValue();
                        text = text.replace(tag, replacement);
                    }
                    // Set the modified text back to the run
                    run.setText(text, 0);
                }
            }
        }
    }





private void replaceTags(XWPFDocument document, PlanInfo planInfo) {
     Range range = document.getRange();

     // Define your tag replacements for PlanInfo
     Map<String, String> tagReplacements = Map.of(
             "ssmPlanName", planInfo.getPlanName(),
             "{{status_code}}", planInfo.getStatusCode()
             // Add more tag replacements as needed
     );

     // Iterate through the tag replacements
     for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
         String tag = entry.getKey();
         String replacement = entry.getValue();

//         // Debugging: Print the tag and replacement value
//         System.out.println("Replacing tag: " + tag);
//         System.out.println("With value: " + replacement);

         // Replace the tag in the document
         range.replaceText(tag, replacement);
     }
 }




Home1.jsx:62 
        
        
       GET http://localhost:8082/getplans net::ERR_FAILED 200 (OK)



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;

@Service
public class XmlService {
    @Autowired
    private UserInfoRepository userInfoRepo;

    @Autowired
    private PlanInfoRepository planInfoRepo;

    @Autowired
    private ContactInfoRepository contactInfoRepo;

    @Autowired
    private PlanRepo planRepo;

    public ResponseEntity<String> processXmlData(String xmlData) {
        try {
            DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
            Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

            NodeList parentNodes = document.getElementsByTagName("*");

            for (int i = 0; i < parentNodes.getLength(); i++) {
                Element parent = (Element) parentNodes.item(i);
                processNode(parent);
            }
            return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
        } catch (Exception e) {
            e.printStackTrace();
            return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    private void processNode(Element parent) {
        switch (parent.getTagName()) {
            case "user_info":
                saveUserInfo(parent);
                break;
            case "plan_info":
                savePlanInfo(parent);
                break;
            case "contact_info":
                saveContactInfo(parent);
                break;
        }
    }

    private void saveUserInfo(Element parent) {
        String logonId = getElementValue(parent, "logon_id");
        UserInfo existingUserInfo = userInfoRepo.findByLogonId(logonId);
        if (existingUserInfo != null) {
            existingUserInfo.setLogonId(getElementValue(parent, "logon_id"));
            existingUserInfo.setLastName(getElementValue(parent, "last_name"));
            existingUserInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            existingUserInfo.setJobTitle(getElementValue(parent, "job_title"));
            existingUserInfo.setMiddleName(getElementValue(parent, "middle_name"));
            existingUserInfo.setAreaCode(getElementValue(parent, "area_code"));
            existingUserInfo.setFirstName(getElementValue(parent, "first_name"));
            existingUserInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
        } else {
            UserInfo userInfo = new UserInfo();
            userInfo.setLogonId(getElementValue(parent, "logon_id"));
            userInfo.setLastName(getElementValue(parent, "last_name"));
            userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            userInfo.setJobTitle(getElementValue(parent, "job_title"));
            userInfo.setMiddleName(getElementValue(parent, "middle_name"));
            userInfo.setAreaCode(getElementValue(parent, "area_code"));
            userInfo.setFirstName(getElementValue(parent, "first_name"));
            userInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Add more fields here as needed
            userInfoRepo.save(userInfo);
        }
    }

    private void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
            existingRow.setEvId(getElementValue(parent, "ev_id"));
            existingRow.setPlanName(getElementValue(parent, "plan_name"));
            existingRow.setIrsrlCode(getElementValue(parent, "irsrl_code"));
            existingRow.setProvCompany(getElementValue(parent, "prov_company"));
            existingRow.setProdId(getElementValue(parent, "prod_id"));
            existingRow.setStatusCode(getElementValue(parent, "status_code"));
            existingRow.setDpDateTime(getElementValue(parent, "dpdate_time"));
            existingRow.setRolloverInd(getElementValue(parent, "rollover_ind"));
            existingRow.setClientName(getElementValue(parent, "client_name"));
            existingRow.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            existingRow.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
            existingRow.setCity(getElementValue(parent, "city"));
            existingRow.setStateCode(getElementValue(parent, "state_code"));
            existingRow.setZipCode(getElementValue(parent, "zip_code"));
            existingRow.setCountry(getElementValue(parent, "country"));
            existingRow.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
            existingRow.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
            existingRow.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
            existingRow.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
            existingRow.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
            existingRow.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
            existingRow.setClientEntityType(getElementValue(parent, "client_entity_type"));
            existingRow.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
            // Set other fields as needed
        } else {
            PlanInfo planInfo = new PlanInfo();
            planInfo.setGaId(getElementValue(parent, "ga_id"));
            planInfo.setEvId(getElementValue(parent, "ev_id"));
            planInfo.setPlanName(getElementValue(parent, "plan_name"));
            planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
            planInfo.setProvCompany(getElementValue(parent, "prov_company"));
            planInfo.setProdId(getElementValue(parent, "prod_id"));
            planInfo.setStatusCode(getElementValue(parent, "status_code"));
            planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
            planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
            planInfo.setClientName(getElementValue(parent, "client_name"));
            planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
            planInfo.setCity(getElementValue(parent, "city"));
            planInfo.setStateCode(getElementValue(parent, "state_code"));
            planInfo.setZipCode(getElementValue(parent, "zip_code"));
            planInfo.setCountry(getElementValue(parent, "country"));
            planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
            planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
            planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
            planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
            planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
            planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
            planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
            planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
            // Set other fields as needed
            planInfoRepo.save(planInfo);
        }
    }


    private void saveContactInfo(Element parent) {
        String contactId = getElementValue(parent, "contact_id");
        ContactInfo existingContactInfo = contactInfoRepo.findByContactId(contactId);

        if (existingContactInfo != null) {
            existingContactInfo.setFirstName(getElementValue(parent, "first_name"));
            existingContactInfo.setLastName(getElementValue(parent, "last_name"));
            existingContactInfo.setJobTitle(getElementValue(parent, "job_title"));
            existingContactInfo.setCompanyName(getElementValue(parent, "company_name"));
            existingContactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            existingContactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
            existingContactInfo.setCity(getElementValue(parent, "city"));
            existingContactInfo.setStateCode(getElementValue(parent, "state_code"));
            existingContactInfo.setZipCode(getElementValue(parent, "zip_code"));
            existingContactInfo.setCountry(getElementValue(parent, "country"));
            existingContactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            existingContactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
            existingContactInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Set other fields as needed
        } else {
            ContactInfo contactInfo = new ContactInfo();
            contactInfo.setContactId(getElementValue(parent, "contact_id"));
            contactInfo.setFirstName(getElementValue(parent, "first_name"));
            contactInfo.setLastName(getElementValue(parent, "last_name"));
            contactInfo.setJobTitle(getElementValue(parent, "job_title"));
            contactInfo.setCompanyName(getElementValue(parent, "company_name"));
            contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
            contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
            contactInfo.setCity(getElementValue(parent, "city"));
            contactInfo.setStateCode(getElementValue(parent, "state_code"));
            contactInfo.setZipCode(getElementValue(parent, "zip_code"));
            contactInfo.setCountry(getElementValue(parent, "country"));
            contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
            contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
            contactInfo.setEmailAddress(getElementValue(parent, "email_address"));
            // Set other fields as needed
            contactInfoRepo.save(contactInfo);
        }
    }


    private String getElementValue(Element parseElement, String childTagName) {
        NodeList childNodes = parseElement.getElementsByTagName(childTagName);
        if (childNodes.getLength() > 0) {
            return childNodes.item(0).getTextContent();
        }
        return null;
    }
}







package com.hrlc.compliance.service;
import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
//
import com.hrlc.compliance.entity.ContactInfo;
//import com.hrlc.compliance.entity.ContactRole;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
//import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
//import com.hrlc.compliance.repository.ContactInfoRepository;
//import com.hrlc.compliance.repository.ContactRoleRepo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;


@Service
public class xmlService {
	@Autowired
	private UserInfoRepository userInfoRepo;
	
	@Autowired
	private	PlanInfoRepository planInfoRepo;
	
	@Autowired
	private ContactInfoRepository contactInfoRepo;
//	@Autowired
//	private ContactRoleRepo contactRoleRepo;
	
	@Autowired
	private PlanRepo planRepo;
	
	String imp = null;
	
	public List<PlanInfo> getPlanInfo()
	{
		return planInfoRepo.findAll();
	}
	
//	public List<ContactInfo> getContactInfo()
//	{
//		return contactInfoRepo.findAll();
//	}
	public List<UserInfo> getUserInfo()
	{
		return userInfoRepo.findAll();
	}
	public ResponseEntity<String> processXmlData(String xmlData) {
		try {
	        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();// to parse xml documents
	        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

	        NodeList parentNodes = document.getElementsByTagName("*"); // Get all parent nodes

	        for (int i = 0; i < parentNodes.getLength(); i++) {
	            Element parent = (Element) parentNodes.item(i);

	            switch (parent.getTagName()) {
	                case "user_info":
	                    saveUserInfo(parent);
	                    break;
	                case "plan_info":
	                    savePlanInfo(parent);
	                    break;
	                case "contact_info":
	                    saveContactInfo(parent);
	                    break;
	                
	            }
	        }

	        return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}
	
	public void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
            // If the row exists, update it
            updateExistingRow(existingRow, parent);
        } else {
            // If the row does not exist, insert a new row
            insertNewRow(parent);
        }
    }

    private void updateExistingRow(PlanInfo existingRow, Element parent) {
        // Update the existing row with the new values from the XML
        existingRow.setEvId(getElementValue(parent, "ev_id"));
        existingRow.setPlanName(getElementValue(parent, "plan_name"));
        existingRow.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        existingRow.setProvCompany(getElementValue(parent, "prov_company"));
        existingRow.setProdId(getElementValue(parent, "prod_id"));
        existingRow.setStatusCode(getElementValue(parent, "status_code"));
        existingRow.setDpDateTime(getElementValue(parent, "dpdate_time"));
        existingRow.setRolloverInd(getElementValue(parent, "rollover_ind"));
        existingRow.setGaId(getElementValue(parent, "ga_id"));
        existingRow.setClientName(getElementValue(parent, "client_name"));
        existingRow.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        existingRow.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        existingRow.setCity(getElementValue(parent, "city"));
        existingRow.setStateCode(getElementValue(parent, "state_code"));
        existingRow.setZipCode(getElementValue(parent, "zip_code"));
        existingRow.setCountry(getElementValue(parent, "country"));
        existingRow.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        existingRow.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        existingRow.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        existingRow.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        existingRow.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        existingRow.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        existingRow.setClientEntityType(getElementValue(parent, "client_entity_type"));
        existingRow.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        // Update the relationship with associated Plans
        System.out.println("update row");
        Plans plans = planRepo.findByPlannumber(existingRow.getGaId());
        if (plans != null) {
        	existingRow.setPlans(plans); 
        }
        
        // Save the updated row
        planInfoRepo.save(existingRow);
    }

    private void insertNewRow(Element parent) {
        PlanInfo planInfo = new PlanInfo();
        Plans plan = new Plans();
        
        plan.setPlanNumber(getElementValue(parent, "ga_id"));
        plan.setPlanName(getElementValue(parent, "plan_name"));
        planRepo.save(plan);
        Plans plan1 = getLastRow();
		System.out.println("planinfo"+plan1);
		planInfo.setPlans(plan1);
        // Set values from the XML
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));

        // Save the new row
        
       
        planInfoRepo.save(planInfo);

        // Save associated Plans if necessary
        System.out.println("new row");
        
    }

    private void saveAssociatedPlan(Element parent) {
        Plans plans = new Plans();
        plans.setPlanNumber(getElementValue(parent, "ga_id")); // Assuming ga_id maps to planNumber
        plans.setPlanName(getElementValue(parent, "plan_name")); // Assuming plan_name maps to planName
        planRepo.save(plans);
    }
	private void saveUserInfo(Element parent) {
	    UserInfo userInfo = new UserInfo();

	    userInfo.setLogonId(getElementValue(parent, "logon_id"));
	    userInfo.setLastName(getElementValue(parent, "last_name"));
	    userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
	    userInfo.setJobTitle(getElementValue(parent, "job_title"));
	    userInfo.setMiddleName(getElementValue(parent, "middle_name"));
	    userInfo.setAreaCode(getElementValue(parent, "area_code"));
	    userInfo.setFirstName(getElementValue(parent, "first_name"));
	    userInfo.setEmailAddress(getElementValue(parent, "email_address"));
	    userInfoRepo.save(userInfo);
	    
	}




	

	private void saveContactInfo(Element parent)
	{
		 ContactInfo contactInfo = new ContactInfo();
		 
		//setting plan_info id
		Plans plan1 = getLastRow();
		System.out.println("contact in "+plan1+"and imp is "+imp);
		contactInfo.setPlans(plan1);
         contactInfo.setContactId(getElementValue(parent, "contact_id"));
         contactInfo.setFirstName(getElementValue(parent, "first_name"));
         contactInfo.setLastName(getElementValue(parent, "last_name"));
         contactInfo.setJobTitle(getElementValue(parent, "job_title"));
         contactInfo.setCompanyName(getElementValue(parent, "company_name"));
         contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
         contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
         contactInfo.setCity(getElementValue(parent, "city"));
         contactInfo.setStateCode(getElementValue(parent, "state_code"));
         contactInfo.setZipCode(getElementValue(parent, "zip_code"));
         contactInfo.setCountry(getElementValue(parent, "country"));
         contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
         contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
         contactInfo.setEmailAddress(getElementValue(parent, "email_address"));

//          Assuming contact_roles is a list of strings
//         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
//         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
//             contactInfo.getContactRoles().add(contactRoleNodes.item(i).getTextContent());
//         }

         contactInfoRepo.save(contactInfo);
	}
//         
//         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
//         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
//             Element contactRoleElement = (Element) contactRoleNodes.item(i);
//             String role = contactRoleElement.getTextContent();
//             
//             // Create a new ContactRole entity
//             ContactRole contactRole = new ContactRole();
//             contactRole.setRole(role);
//             contactRole.setContactInfo(contactInfo); // Set the ContactInfo
//             System.out.println("dub");
//             // Save the ContactRole
//             contactRoleRepo.save(contactRole);
//         }
//	}

	private String getElementValue(Element parseElement, String childTagName) {
	    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
	    if (childNodes.getLength() > 0) {
	        return childNodes.item(0).getTextContent();
	    }
	    return null;
	}
	
	public  PlanInfo findbygaid(String GaId){
		return planInfoRepo.findByGaId(GaId);
	}
	
	public List<ContactInfo> contactbyplaid(int id) {
		return contactInfoRepo.findByPlansPlanId(id);
	}
	
	public PlanInfo findByPlanId(int planId) {
		System.out.println("last row is "+getLastRow());
		return planInfoRepo.findByPlanId(planId);
	}
	
	public Plans getLastRow() {
//		Plans lastRow = null;
		Optional<Plans> plans = planRepo.findLastRow();
		System.out.println(plans);
		return plans.orElse(null);
	}
	
	public void uodatePlanInfo(PlanInfo planinfo) {
		PlanInfo pf = planInfoRepo.findByGaId(planinfo.getGaId());
		System.out.println(planinfo);
		if(pf!=null) {
			planInfoRepo.save(planinfo);
			System.out.println("saved");
		}
	}
	 public void updatePlanInfo(PlanInfo planInfo) {
	        
	           planInfoRepo.save(planInfo);
	           System.out.println("updated");
	        
	    }
	 public void updateContactInfo(ContactInfo contactInfo) {
	        
         contactInfoRepo.save(contactInfo);
         System.out.println("updated");
      
  }
	 public void deleteplan(int id) {
		PlanInfo planInfo= planInfoRepo.findByPlanId(id);
		if(planInfo!=null) {
			planInfoRepo.delete(planInfo);
			
		}
		List<ContactInfo> info =contactInfoRepo.findByPlansPlanId(id);
		if(info!=null) {
			contactInfoRepo.deleteAll(info);
		}
		Plans plan = planRepo.findById(id).orElse(null);
		if(plan!=null) {
			planRepo.delete(plan);
		}
		System.out.println("deleted successfully");
	 }
	 
	 public List<Plans> getplans() {
		 return planRepo.findAll();
	 }

	
}

	







package com.hrlc.compliance.controller;
import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.Queue;
import java.util.concurrent.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import com.hrlc.compliance.service.xmlService;

@RestController
public class Fileprocess {

	 @Autowired
	 private xmlService yourService; 
    private static final String SOURCE_FOLDER = "C:\\file processor\\new_files";
    private static final String DESTINATION_FOLDER = "C:\\file processor\\done";
    private static final String FAILED_FOLDER = "C:\\file processor\\failed";
    
    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    private final ExecutorService executor = Executors.newSingleThreadExecutor();

   

    private Queue<Path> filesQueue = new LinkedBlockingQueue<>();

    @PostMapping("/start")
    public ResponseEntity<String> startFileProcessing() {
        try {
            // Schedule task to search for new files every 20 seconds
            scheduler.scheduleAtFixedRate(this::enqueueFiles, 0, 20, TimeUnit.SECONDS);
            return ResponseEntity.ok("File processing started.");
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(500).body("Error occurred while starting file processing.");
        }
    }

    private void enqueueFiles() {
        try {
            // Add new files to the queue
            Files.walkFileTree(Paths.get(SOURCE_FOLDER), new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    if (!filesQueue.contains(file)) {
                        filesQueue.offer(file);
                        System.out.println("New file detected and added to queue: " + file.getFileName());
                    }
                    return FileVisitResult.CONTINUE;
                }
            });
            // Start processing files from the queue
            executor.execute(this::processNextFile);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void processNextFile() {
        try {
            if (!filesQueue.isEmpty()) {
                Path file = filesQueue.poll();
                // Process the file
                System.out.println("Processing file: " + file.getFileName());
                String fileContent = new String(Files.readAllBytes(file));
                // Call the method with file content as string parameter
                ResponseEntity<String> response = yourService.processXmlData(fileContent);
                // Move the file based on the response
                if (response.getStatusCode() == HttpStatus.OK) {
                    // If successful, move the file to the destination folder
                    Path destinationFile = Paths.get(DESTINATION_FOLDER).resolve(file.getFileName());
                    Files.move(file, destinationFile, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("File processed and moved: " + file.getFileName());
                } else {
                    // If failed, move the file to the failed folder
                    Path failedFile = Paths.get(FAILED_FOLDER).resolve(file.getFileName());
                    Files.move(file, failedFile, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("File processing failed: " + file.getFileName());
                }
            } else {
                System.out.println("No more files to process.");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



https://login.microsoftonline.com/common/oauth2/v2.0/authorize?client_id=451f2815-40fe-44bb-b8a6-3a2e55cf40c4&scope=https%3A%2F%2Fwww.wvd.microsoft.com%2FUser.Access%20openid%20profile%20offline_access&redirect_uri=https%3A%2F%2Fwindows365.microsoft.com%2Fent%2Fspa-signin-oidc&client-request-id=86d259c6-3739-4835-bef6-3a63bc9ee5e1&response_mode=fragment&response_type=code&x-client-SKU=msal.js.browser&x-client-VER=2.31.0&client_info=1&code_challenge=GCctYMmPiFs-55gAFDSNyPucoF6jHzQt2dJCgl5he54&code_challenge_method=S256&prompt=select_account&nonce=6848fbc2-2254-43ea-bfa0-81468aef7486&state=eyJpZCI6IjNhNWY5YjY3LTIzM2QtNDA5ZS1hZjQ2LWZlM2VjZmQ2N2QyMiIsIm1ldGEiOnsiaW50ZXJhY3Rpb25UeXBlIjoicmVkaXJlY3QifX0%3D



https://login.microsoftonline.com/common/SAS/ProcessAuth



"Transitioning from Java to data analytics, I bring Python proficiency and college projects showcasing data analysis skills. Excited to leverage my experience and passion for data to contribute effectively to the Empower India Data Science team.


Continue to build your rewarding career helping others achieve their financial dream at an organization that values your own long-term success. With your unique talents, you have what it takes to be bold and brilliant in everything you do and reach new heights for a company dedicated to diversity and inclusion, community and you. 

This role is a job level of G Professional.
Empower India Data Science team is looking for an Analyst who is capable of producing in-depth analysis that suggests strategic and operational changes. The ideal candidate will understand the business problem, collect and study relevant data and able to produce meaningful and actionable analysis that helps to solve the business problem in hand.


Role Responsibilities:

Understand the business problem, able to convert it as an analytical problem.
Understand the data need, collect, interpret and clean the data for analysis
Produce meaningful insights using analytical/data modelling techniques and interpret and justify the results with the business context
Able to present the analysis and results to the business stakeholders
Generate BI reports and able to automate them
Work with management to prioritize business and information needs
Educational Qualification:

Graduate / Post-graduate degree in Business Management/Statistics/Economics/Finance
Required Experience:

1-3 years of experience working in analytics, data science or related experience
Attention to detail, and should be open to learn quickly on new technologies and statistical techniques in analytics like Machine Learning, AI, SAS, AWS, Python, Tableau etc.
Working experience with tools such as Google Analytics/ Adobe Analytics
Required skills and competencies:

Technical expertise regarding data modelling using statistical techniques, data mining, generate and automate BI reports
Strong knowledge of and experience with the data modelling techniques like Time Series, Regression, Segmentation, Clustering, Market Mix, Machine Learning, AI
Strong analytical skills to be able to understand the business problem, collect and analyze the data and able to interpret the results
Strong written and verbal communication skill and be able to present the results to the senior stakeholders
Overall understanding of US Retirement Industry
Self-motivation, excellent accountability and ownership skills
Excellent team player


This job description is not intended to be an exhaustive list of all duties, responsibilities and qualifications of the job.  The employer has the right to revise this job description at any time.   You will be evaluated in part based on your performance of the responsibilities and/or tasks listed in this job description.   You may be required perform other duties that are not included on this job description.  The job description is not a contract for employment, and either you or the employer may terminate employment at any time, for any reason, as per terms and conditions of your employment contract.
We are an equal opportunity employer with a commitment to diversity.  All individuals, regardless of personal characteristics, are encouraged to apply.  All qualified applicants will receive consideration for employment without regard to age, race, color, national origin, ancestry, sex, sexual orientation, gender, gender identity, gender expression, marital status, pregnancy, religion, physical or mental disability, military or veteran status, genetic information, or any other status protected by applicable state or local law. 


	public void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepo.findByGaId(gaId);

        if (existingRow != null) {
            // If the row exists, update it
            updateExistingRow(existingRow, parent);
        } else {
            // If the row does not exist, insert a new row
            insertNewRow(parent);
        }
    }

    private void updateExistingRow(PlanInfo existingRow, Element parent) {
        // Update the existing row with the new values from the XML
        existingRow.setEvId(getElementValue(parent, "ev_id"));
        existingRow.setPlanName(getElementValue(parent, "plan_name"));
        existingRow.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        existingRow.setProvCompany(getElementValue(parent, "prov_company"));
        existingRow.setProdId(getElementValue(parent, "prod_id"));
        existingRow.setStatusCode(getElementValue(parent, "status_code"));
        existingRow.setDpDateTime(getElementValue(parent, "dpdate_time"));
        existingRow.setRolloverInd(getElementValue(parent, "rollover_ind"));
        existingRow.setGaId(getElementValue(parent, "ga_id"));
        existingRow.setClientName(getElementValue(parent, "client_name"));
        existingRow.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        existingRow.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        existingRow.setCity(getElementValue(parent, "city"));
        existingRow.setStateCode(getElementValue(parent, "state_code"));
        existingRow.setZipCode(getElementValue(parent, "zip_code"));
        existingRow.setCountry(getElementValue(parent, "country"));
        existingRow.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        existingRow.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        existingRow.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        existingRow.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        existingRow.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        existingRow.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        existingRow.setClientEntityType(getElementValue(parent, "client_entity_type"));
        existingRow.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        // Update the relationship with associated Plans
        Plans plans = planRepo.findByPlannumber(existingRow.getGaId());
        if (plans != null) {
            plans = new Plans();
            System.out.println("hey i am boss");
            plans.setPlanNumber(existingRow.getGaId());
            plans.setPlanName(existingRow.getPlanName());
//            planRepo.save(plans);
        }
        existingRow.setPlans(plans);
        // Save the updated row
        planInfoRepo.save(existingRow);
    }

    private void insertNewRow(Element parent) {
        PlanInfo planInfo = new PlanInfo();

        // Set values from the XML
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));

        // Save the new row
        planInfoRepo.save(planInfo);

        // Save associated Plans if necessary
        saveAssociatedPlan(parent);
    }

    private void saveAssociatedPlan(Element parent) {
        Plans plans = new Plans();
        plans.setPlanNumber(getElementValue(parent, "ga_id")); // Assuming ga_id maps to planNumber
        plans.setPlanName(getElementValue(parent, "plan_name")); // Assuming plan_name maps to planName
        planRepo.save(plans);
    }


hey i am boss
org.springframework.dao.InvalidDataAccessApiUsageException: org.hibernate.TransientPropertyValueException: object references an unsaved transient instance - save the transient instance before flushing : com.hrlc.compliance.entity.PlanInfo.plans -> com.hrlc.compliance.entity.Plans
	at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:368)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:246)
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:565)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794)
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220)
	at jdk.proxy2/jdk.proxy2.$Proxy116.save(Unknown Source)
	at com.hrlc.compliance.service.xmlService.updateExistingRow(xmlService.java:146)
	at com.hrlc.compliance.service.xmlService.savePlanInfo(xmlService.java:102)
	at com.hrlc.compliance.service.xmlService.processXmlData(xmlService.java:80)
	at com.hrlc.compliance.controller.Fileprocess.processNextFile(Fileprocess.java:69)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: java.lang.IllegalStateException: org.hibernate.TransientPropertyValueException: object references an unsaved transient instance - save the transient instance before flushing : com.hrlc.compliance.entity.PlanInfo.plans -> com.hrlc.compliance.entity.Plans
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:173)
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1427)
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:504)
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2339)
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1996)
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439)
	at org.hib




// Update the relationship with associated Plans
        Plans plans = planRepository.findByPlanNumber(existingRow.getGaId());
        if (plans == null) {
            plans = new Plans();
            plans.setPlanNumber(existingRow.getGaId());
            plans.setPlanName(existingRow.getPlanName());
            planRepository.save(plans);
        }
        existingRow.setPlans(plans);

@Service
public class PlanInfoService {

    @Autowired
    private PlanInfoRepository planInfoRepository; // Inject your repository here

    @Autowired
    private PlansRepository planRepository; // Inject your Plans repository here

    public void savePlanInfo(Element parent) {
        String gaId = getElementValue(parent, "ga_id");
        PlanInfo existingRow = planInfoRepository.findByGaId(gaId);

        if (existingRow != null) {
            // If the row exists, update it
            updateExistingRow(existingRow, parent);
        } else {
            // If the row does not exist, insert a new row
            insertNewRow(parent);
        }
    }

    private void updateExistingRow(PlanInfo existingRow, Element parent) {
        // Update the existing row with the new values from the XML
        existingRow.setEvId(getElementValue(parent, "ev_id"));
        existingRow.setPlanName(getElementValue(parent, "plan_name"));
        existingRow.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        existingRow.setProvCompany(getElementValue(parent, "prov_company"));
        existingRow.setProdId(getElementValue(parent, "prod_id"));
        existingRow.setStatusCode(getElementValue(parent, "status_code"));
        existingRow.setDpDateTime(getElementValue(parent, "dpdate_time"));
        existingRow.setRolloverInd(getElementValue(parent, "rollover_ind"));
        existingRow.setGaId(getElementValue(parent, "ga_id"));
        existingRow.setClientName(getElementValue(parent, "client_name"));
        existingRow.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        existingRow.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
        existingRow.setCity(getElementValue(parent, "city"));
        existingRow.setStateCode(getElementValue(parent, "state_code"));
        existingRow.setZipCode(getElementValue(parent, "zip_code"));
        existingRow.setCountry(getElementValue(parent, "country"));
        existingRow.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        existingRow.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        existingRow.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        existingRow.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        existingRow.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        existingRow.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        existingRow.setClientEntityType(getElementValue(parent, "client_entity_type"));
        existingRow.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));

        // Save the updated row
        planInfoRepository.save(existingRow);
    }

    private void insertNewRow(Element parent) {
        PlanInfo planInfo = new PlanInfo();

        // Set values from the XML
        planInfo.setEvId(getElementValue(parent, "ev_id"));
        planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));

        // Save the new row
        planInfoRepository.save(planInfo);

        // Save associated Plans if necessary
        saveAssociatedPlan(parent);
    }

    private void saveAssociatedPlan(Element parent) {
        Plans plans = new Plans();
        plans.setPlanNumber(getElementValue(parent, "ga_id")); // Assuming ga_id maps to planNumber
        plans.setPlanName(getElementValue(parent, "plan_name")); // Assuming plan_name maps to planName
        planRepository.save(plans);
    }
}




private void savePlanInfo(Element parent) {
		PlanInfo planInfo = new PlanInfo();
		Plans plans = new  Plans();
		String ga_id=getElementValue(parent, "ga_id");
		String planName = getElementValue(parent, "plan_name");
		
		// check its already exists or new file
				
				PlanInfo existingfRow = planInfoRepo.findByGaId(ga_id);
				if(existingfRow!=null) {
					planRepo.save(plans);
					planInfo.setEvId(getElementValue(parent,"ev_id"));
				 	planInfo.setPlanName(getElementValue(parent, "plan_name"));
			        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
			        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
			        planInfo.setProdId(getElementValue(parent, "prod_id"));
			        planInfo.setStatusCode(getElementValue(parent, "status_code"));
			        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
			        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
			        planInfo.setGaId(getElementValue(parent, "ga_id"));
			        planInfo.setClientName(getElementValue(parent, "client_name"));
			        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
			        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
			        planInfo.setCity(getElementValue(parent, "city"));
			        planInfo.setStateCode(getElementValue(parent, "state_code"));
			        planInfo.setZipCode(getElementValue(parent, "zip_code"));
			        planInfo.setCountry(getElementValue(parent, "country"));
			        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
			        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
			        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
			        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
			        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
			        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
			        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
			        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
			        planInfoRepo.save(planInfo);
				}
				
				else {
					
				
							plans.setPlanNumber(ga_id);
							plans.setPlanName(planName);
							planRepo.save(plans);
							imp=ga_id;
		//setting plan_info id
		Plans plan1 = getLastRow();
		System.out.println("planinfo"+plan1);
		planInfo.setPlans(plan1);
		planInfo.setEvId(getElementValue(parent,"ev_id"));
	 	planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfoRepo.save(planInfo);
				}



package com.hrlc.compliance.entity;


import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;

@Entity
public class ContactInfo {
	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	private int contactInfoID;
	
	@ManyToOne
	@JoinColumn(name = "planId")
	private Plans plans;
	
 	
    public int getContactInfoID() {
		return contactInfoID;
	}

	public void setContactInfoID(int contactInfoID) {
		this.contactInfoID = contactInfoID;
	}

	public Plans getPlans() {
		return plans;
	}

	public void setPlans(Plans plans) {
		this.plans = plans;
	}

	private String contactId;
    private String firstName;
    private String lastName;
    private String jobTitle;
    private String companyName;
    private String firstLineMailing;
    private String secondLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String phoneNbr;
    private String faxNbr;
    private String emailAddress;
    
//    @OneToMany(mappedBy = "contactInfo")
//    private List<ContactRole> contactRoles = new ArrayList<>();
    
    
//    public List<ContactRole> getContactRoles() {
//		return contactRoles;
//	}
//
//	public void setContactRoles(List<ContactRole> contactRoles) {
//		this.contactRoles = contactRoles;
//	}

	public String getContactId() {
        return contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getFirstLineMailing() {
        return firstLineMailing;
    }

    public void setFirstLineMailing(String firstLineMailing) {
        this.firstLineMailing = firstLineMailing;
    }

    public String getSecondLineMailing() {
        return secondLineMailing;
    }

    public void setSecondLineMailing(String secondLineMailing) {
        this.secondLineMailing = secondLineMailing;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getStateCode() {
        return stateCode;
    }

    public void setStateCode(String stateCode) {
        this.stateCode = stateCode;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhoneNbr() {
        return phoneNbr;
    }

    public void setPhoneNbr(String phoneNbr) {
        this.phoneNbr = phoneNbr;
    }

    public String getFaxNbr() {
        return faxNbr;
    }

    public void setFaxNbr(String faxNbr) {
        this.faxNbr = faxNbr;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

	@Override
	public String toString() {
		return "ContactInfo [contactInfoID=" + contactInfoID + ", plans=" + plans + ", contactId=" + contactId
				+ ", firstName=" + firstName + ", lastName=" + lastName + ", jobTitle=" + jobTitle + ", companyName="
				+ companyName + ", firstLineMailing=" + firstLineMailing + ", secondLineMailing=" + secondLineMailing
				+ ", city=" + city + ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
				+ ", phoneNbr=" + phoneNbr + ", faxNbr=" + faxNbr + ", emailAddress=" + emailAddress + "]";
	}
    

//    public List<String> getContactRoles() {
//        return contactRoles;
//    }
//
//    public void setContactRoles(List<String> contactRoles) {
//        this.contactRoles = contactRoles;
//    }
}
package com.hrlc.compliance.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

@Entity
public class ContactRole {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String role;
	@ManyToOne 
	@JoinColumn(name = "contact_info_id")
	private ContactInfo contactInfo;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getRole() {
		return role;
	}
	public void setRole(String role) {
		this.role = role;
	}
	public ContactInfo getContactInfo() {
		return contactInfo;
	}
	public void setContactInfo(ContactInfo contact_info) {
		this.contactInfo = contact_info;
	}
	
	

}




public void deleteContactRolesByPlanId(int planId) {
        // Find ContactInfo entities by planId
        Iterable<ContactInfo> contactInfos = contactInfoRepository.findByPlanId(planId);

        // Iterate over each ContactInfo entity
        for (ContactInfo contactInfo : contactInfos) {
            // Find ContactRole entities associated with the current ContactInfo
            Iterable<ContactRole> contactRoles = contactRoleRepository.findByContactInfo(contactInfo);

            // Delete each ContactRole entity
            contactRoleRepository.deleteAll(contactRoles);
        }



Hibernate: select cil1_0.plan_id,cil1_0.contact_infoid,cil1_0.city,cil1_0.company_name,cil1_0.contact_id,cil1_0.country,cil1_0.email_address,cil1_0.fax_nbr,cil1_0.first_line_mailing,cil1_0.first_name,cil1_0.job_title,cil1_0.last_name,cil1_0.phone_nbr,cil1_0.second_line_mailing,cil1_0.state_code,cil1_0.zip_code from contact_info cil1_0 where cil1_0.plan_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: select cr1_0.contact_info_id,cr1_0.id,cr1_0.role from contact_role cr1_0 where cr1_0.contact_info_id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_role where id=?
Hibernate: delete from contact_info where contact_infoid=?
Hibernate: delete from plans where plan_id=?
2024-05-02T04:56:41.576-06:00  WARN 17004 --- [nio-8082-exec-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 547, SQLState: 23000
2024-05-02T04:56:41.577-06:00 ERROR 17004 --- [nio-8082-exec-2] o.h.engine.jdbc.spi.SqlExceptionHelper   : The DELETE statement conflicted with the REFERENCE constraint "FKpgxs0b2ndeu2gd50kt5sj6yj2". The conflict occurred in database "comp", table "dbo.plan_info", column 'plans_plan_id'.
2024-05-02T04:56:41.645-06:00 ERROR 17004 --- [nio-8082-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: org.springframework.dao.DataIntegrityViolationException: could not execute statement [The DELETE statement conflicted with the REFERENCE constraint "FKpgxs0b2ndeu2gd50kt5sj6yj2". The conflict occurred in database "comp", table "dbo.plan_info", column 'plans_plan_id'.] [delete from plans where plan_id=?]; SQL [delete from plans where plan_id=?]; constraint [null]] with root cause

com.microsoft.sqlserver.jdbc.SQLServerException: The DELETE statement conflicted with the REFERENCE constraint "FKpgxs0b2ndeu2gd50kt5sj6yj2". The conflict occurred in database "comp", table "dbo.plan_info", column 'plans_plan_id'.
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:261) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1752) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:657) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:576) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7739) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:4384) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:293) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:263) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeUpdate(SQLServerPreparedStatement.java:519) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:107) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:40) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:52) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.coordinateDelete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.delete(AbstractEntityPersister.java:2979) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.action.internal.EntityDeleteAction.execute(EntityDeleteAction.java:131) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:632) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.spi.ActionQueue.executeActions(ActionQueue.java:499) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:363) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:41) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.internal.SessionImpl.doFlush(SessionImpl.java:1423) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.internal.SessionImpl.managedFlush(SessionImpl.java:504) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.internal.SessionImpl.flushBeforeTransactionCompletion(SessionImpl.java:2339) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.internal.SessionImpl.beforeTransactionCompletion(SessionImpl.java:1996) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.beforeTransactionCompletion(JdbcCoordinatorImpl.java:439) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl.beforeCompletionCallback(JdbcResourceLocalTransactionCoordinatorImpl.java:169) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.commit(JdbcResourceLocalTransactionCoordinatorImpl.java:267) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.transaction.internal.TransactionImpl.commit(TransactionImpl.java:101) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.springframework.orm.jpa.JpaTransactionManager.doCommit(JpaTransactionManager.java:561) ~[spring-orm-6.1.3.jar:6.1.3]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:794) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.transaction.support.AbstractPlatformTransactionManager.commit(AbstractPlatformTransactionManager.java:757) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.commitTransactionAfterReturning(TransactionAspectSupport.java:669) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:419) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164) ~[spring-data-jpa-3.2.2.jar:3.2.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220) ~[spring-aop-6.1.3.jar:6.1.3]
	at jdk.proxy2/jdk.proxy2.$Proxy115.delete(Unknown Source) ~[na:na]
	at com.hrlc.compliance.service.xmlService.deleteplan(xmlService.java:251) ~[classes/:na]
	at com.hrlc.compliance.controller.xmlController.deleteplan(xmlController.java:67) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.FrameworkServlet.doDelete(FrameworkServlet.java:936) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:596) ~[tomcat-embed-core-10.1.18.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.18.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at java.base/java.lang.Thread.run(Thread.java:840) ~[na:na]





com.microsoft.sqlserver.jdbc.SQLServerException: The DELETE statement conflicted with the REFERENCE constraint "FKfbu28vr6h861amodsdpsokf4u". The conflict occurred in database "comp", table "dbo.contact_role", column 'contact_info_id'.
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:261) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1752) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:657) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:576) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7739) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:4384) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:293) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:263) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeUpdate(SQLServerPreparedStatement.java:519) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.performNonBatchedMutation(AbstractMutationExecutor.java:107) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorSingleNonBatched.performNonBatchedOperations(MutationExecutorSingleNonBatched.java:40) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.AbstractMutationExecutor.execute(AbstractMutationExecutor.java:52) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.doStaticDelete(AbstractDeleteCoordinator.java:279) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.mutation.AbstractDeleteCoordinator.coordinateDelete(AbstractDeleteCoordinator.java:87) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	
package com.hrlc.compliance.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;

@Entity
public class ContactRole {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int id;
	private String role;
	@ManyToOne 
	@JoinColumn(name = "contact_info_id")
	private ContactInfo contactInfo;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getRole() {
		return role;
	}
	public void setRole(String role) {
		this.role = role;
	}
	public ContactInfo getContactInfo() {
		return contactInfo;
	}
	public void setContactInfo(ContactInfo contact_info) {
		this.contactInfo = contact_info;
	}
	
	

}


package com.hrlc.compliance.service;
import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.ContactRole;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
//import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;

import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.ContactRoleRepo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;


@Service
public class xmlService {
	@Autowired
	private UserInfoRepository userInfoRepo;
	
	@Autowired
	private	PlanInfoRepository planInfoRepo;
	
	@Autowired
	private ContactInfoRepository contactInfoRepo;
	@Autowired
	private ContactRoleRepo contactRoleRepo;
	
	@Autowired
	private PlanRepo planRepo;
	
	String imp = null;
	
	public List<PlanInfo> getPlanInfo()
	{
		return planInfoRepo.findAll();
	}
	
	public List<ContactInfo> getContactInfo()
	{
		return contactInfoRepo.findAll();
	}
	public List<UserInfo> getUserInfo()
	{
		return userInfoRepo.findAll();
	}
	public ResponseEntity<String> processXmlData(String xmlData) {
		try {
	        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
	        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

	        NodeList parentNodes = document.getElementsByTagName("*"); // Get all parent nodes

	        for (int i = 0; i < parentNodes.getLength(); i++) {
	            Element parent = (Element) parentNodes.item(i);

	            switch (parent.getTagName()) {
	                case "user_info":
	                    saveUserInfo(parent);
	                    break;
	                case "plan_info":
	                    savePlanInfo(parent);
	                    break;
	                case "contact_info":
	                    saveContactInfo(parent);
	                    break;
	                
	            }
	        }

	        return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'fileList': Unsatisfied dependency expressed through field 'planRepo': Error creating bean with name 'planRepo' defined in com.hrlc.compliance.repository.PlanRepo defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract com.hrlc.compliance.entity.Plans com.hrlc.compliance.repository.PlanRepo.findByPlannumber(java.lang.String); Reason: Failed to create query for method public abstract com.hrlc.compliance.entity.Plans com.hrlc.compliance.repository.PlanRepo.findByPlannumber(java.lang.String); No property 'plannumber' found for type 'Plans'; Did you mean 'planNumber'
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:787) ~[spring-beans-6.1.3.jar:6.1.3]
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:767) ~[spring-beans-6.1.3.jar:6.1.3]
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145) ~[spring-beans-6.1.3.jar:6.1.3]

	private void saveUserInfo(Element parent) {
	    UserInfo userInfo = new UserInfo();

	    userInfo.setLogonId(getElementValue(parent, "logon_id"));
	    userInfo.setLastName(getElementValue(parent, "last_name"));
	    userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
	    userInfo.setJobTitle(getElementValue(parent, "job_title"));
	    userInfo.setMiddleName(getElementValue(parent, "middle_name"));
	    userInfo.setAreaCode(getElementValue(parent, "area_code"));
	    userInfo.setFirstName(getElementValue(parent, "first_name"));
	    userInfo.setEmailAddress(getElementValue(parent, "email_address"));
	    userInfoRepo.save(userInfo);
	    
	}
	
	private void savePlanInfo(Element parent) {
		PlanInfo planInfo = new PlanInfo();
		Plans plans = new  Plans();
		String ga_id=getElementValue(parent, "ga_id");
		String planName = getElementValue(parent, "plan_name");
	
				plans.setPlanNumber(ga_id);
				plans.setPlanName(planName);
				planRepo.save(plans);
				imp=ga_id;
		

		//setting plan_info id
		Plans plan1 = getLastRow();
		System.out.println("planinfo"+plan1);
		planInfo.setPlans(plan1);
		planInfo.setEvId(getElementValue(parent,"ev_id"));
	 	planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfoRepo.save(planInfo);
	}

	private void saveContactInfo(Element parent)
	{
		 ContactInfo contactInfo = new ContactInfo();
		 
		//setting plan_info id
		Plans plan1 = getLastRow();
		System.out.println("contact in "+plan1+"and imp is "+imp);
		contactInfo.setPlans(plan1);
         contactInfo.setContactId(getElementValue(parent, "contact_id"));
         contactInfo.setFirstName(getElementValue(parent, "first_name"));
         contactInfo.setLastName(getElementValue(parent, "last_name"));
         contactInfo.setJobTitle(getElementValue(parent, "job_title"));
         contactInfo.setCompanyName(getElementValue(parent, "company_name"));
         contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
         contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
         contactInfo.setCity(getElementValue(parent, "city"));
         contactInfo.setStateCode(getElementValue(parent, "state_code"));
         contactInfo.setZipCode(getElementValue(parent, "zip_code"));
         contactInfo.setCountry(getElementValue(parent, "country"));
         contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
         contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
         contactInfo.setEmailAddress(getElementValue(parent, "email_address"));

//          Assuming contact_roles is a list of strings
//         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
//         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
//             contactInfo.getContactRoles().add(contactRoleNodes.item(i).getTextContent());
//         }

         contactInfoRepo.save(contactInfo);
         
         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
             Element contactRoleElement = (Element) contactRoleNodes.item(i);
             String role = contactRoleElement.getTextContent();
             
             // Create a new ContactRole entity
             ContactRole contactRole = new ContactRole();
             contactRole.setRole(role);
             contactRole.setContactInfo(contactInfo); // Set the ContactInfo
//             System.out.println("dub");
             // Save the ContactRole
             contactRoleRepo.save(contactRole);
         }
	}

	private String getElementValue(Element parseElement, String childTagName) {
	    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
	    if (childNodes.getLength() > 0) {
	        return childNodes.item(0).getTextContent();
	    }
	    return null;
	}
	
	public  PlanInfo findbygaid(String GaId){
		return planInfoRepo.findByGaId(GaId);
	}
	
	public List<ContactInfo> contactbyplaid(int id) {
		return contactInfoRepo.findByPlansPlanId(id);
	}
	
	public PlanInfo findByPlanId(int planId) {
		System.out.println("last row is "+getLastRow());
		return planInfoRepo.findByPlanId(planId);
	}
	
	public Plans getLastRow() {
		Plans lastRow = null;
		Optional<Plans> plans = planRepo.findLastRow();
		System.out.println(plans);
		return plans.orElse(null);
	}
	
//	public void uodatePlanInfo(PlanInfo planinfo) {
//		PlanInfo pf = planInfoRepo.findByGaId(planinfo.getGaId());
//		System.out.println(planinfo);
//		if(pf!=null) {
//			planInfoRepo.save(planinfo);
//			System.out.println("saved");
//		}
//	}
	 public void updatePlanInfo(PlanInfo planInfo) {
	        
	           planInfoRepo.save(planInfo);
	           System.out.println("updated");
	        
	    }
	 public void updateContactInfo(ContactInfo contactInfo) {
	        
         contactInfoRepo.save(contactInfo);
         System.out.println("updated");
      
  }
	 public void deleteplan(int id) {
		Plans plsns = planRepo.findById(id).orElse(null);
		System.out.println("not deleted");
		 planRepo.delete(plsns);
		 System.out.println("deleted");
	 }
	
	
}
	




import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
public class Plans {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int planId;

    @Column(name = "plan_number") // Matches the field name in the database
    private String planNumber;

    private String planName;

    // One-to-One mapping with PlanInfo
    @OneToOne(mappedBy = "plans", cascade = CascadeType.ALL, orphanRemoval = true)
    private PlanInfo planInfo;

    // One-to-Many mapping with ContactInfo
    @OneToMany(mappedBy = "plans", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<ContactInfo> contactInfoList = new ArrayList<>();

    // Constructors, getters, and setters
}
import javax.persistence.*;

@Entity
public class PlanInfo {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int planInfoID;

    // One-to-One mapping with Plans
    @OneToOne
    @JoinColumn(name = "plan_id")
    private Plans plans;

    // Constructors, getters, and setters
}

---------------------------previous data
package com.hrlc.compliance.entity;



import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;

@Entity
public class PlanInfo {
	 	@Id
	 	@GeneratedValue(strategy = GenerationType.IDENTITY)
	 	private int planInfoID;
	 	@OneToOne
	 	private Plans plans;
	 	
	    public Plans getPlans() {
			return plans;
		}

		public void setPlans(Plans plans) {
			this.plans = plans;
		}
		private String evId;
	    private String planName;
	    private String irsrlCode;
	    private String provCompany;
	    private String prodId;
	    private String statusCode;
	    private String dpDateTime;
	    private String rolloverInd;
	    private String gaId;
	    private String clientName;
	    private String firstLineMailing;
	    private String scndLineMailing;
	    private String city;
	    private String stateCode;
	    private String zipCode;
	    private String country;
	    private String internalComplianceInd;
	    private String planAnnivDate;
	    private String estNumberOfParticipants;
	    private String estPlanAssets;
	    private LocalDate estImplementationDate;
	    private String subsetCashCode;
	    private String clientEntityType;
	    private String tpaFirmId;
		
	    
	    
	    public String getEvId() {
	        return evId;
	    }

	    public void setEvId(String evId) {
	        this.evId = evId;
	    }
		public String getPlanName() {
			return planName;
		}
		public void setPlanName(String planName) {
			this.planName = planName;
		}
		public int getPlanInfoID() {
			return planInfoID;
		}

		public void setPlanInfoID(int planInfoID) {
			this.planInfoID = planInfoID;
		}

		public String getIrsrlCode() {
			return irsrlCode;
		}
		public void setIrsrlCode(String irsrlCode) {
			this.irsrlCode = irsrlCode;
		}
		public String getProvCompany() {
			return provCompany;
		}
		public void setProvCompany(String provCompany) {
			this.provCompany = provCompany;
		}
		public String getProdId() {
			return prodId;
		}
		public void setProdId(String prodId) {
			this.prodId = prodId;
		}
		public String getStatusCode() {
			return statusCode;
		}
		public void setStatusCode(String statusCode) {
			this.statusCode = statusCode;
		}
		public String getDpDateTime() {
			return dpDateTime;
		}
		public void setDpDateTime(String dpDateTime) {
			this.dpDateTime = dpDateTime;
		}
		public String getRolloverInd() {
			return rolloverInd;
		}
		public void setRolloverInd(String rolloverInd) {
			this.rolloverInd = rolloverInd;
		}
		public String getGaId() {
			return gaId;
		}
		public void setGaId(String gaId) {
			this.gaId = gaId;
		}
		public String getClientName() {
			return clientName;
		}
		public void setClientName(String clientName) {
			this.clientName = clientName;
		}
		public String getFirstLineMailing() {
			return firstLineMailing;
		}
		public void setFirstLineMailing(String firstLineMailing) {
			this.firstLineMailing = firstLineMailing;
		}
		public String getScndLineMailing() {
			return scndLineMailing;
		}
		public void setScndLineMailing(String scndLineMailing) {
			this.scndLineMailing = scndLineMailing;
		}
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public String getStateCode() {
			return stateCode;
		}
		public void setStateCode(String stateCode) {
			this.stateCode = stateCode;
		}
		public String getZipCode() {
			return zipCode;
		}
		public void setZipCode(String zipCode) {
			this.zipCode = zipCode;
		}
		public String getCountry() {
			return country;
		}
		public void setCountry(String country) {
			this.country = country;
		}
		public String getInternalComplianceInd() {
			return internalComplianceInd;
		}
		public void setInternalComplianceInd(String internalComplianceInd) {
			this.internalComplianceInd = internalComplianceInd;
		}
		public String getPlanAnnivDate() {
			return planAnnivDate;
		}
		public void setPlanAnnivDate(String planAnnivDate) {
			this.planAnnivDate = planAnnivDate;
		}
		public String getEstNumberOfParticipants() {
			return estNumberOfParticipants;
		}
		public void setEstNumberOfParticipants(String estNumberOfParticipants) {
			this.estNumberOfParticipants = estNumberOfParticipants;
		}
		public String getEstPlanAssets() {
			return estPlanAssets;
		}
		public void setEstPlanAssets(String estPlanAssets) {
			this.estPlanAssets = estPlanAssets;
		}
		public LocalDate getEstImplementationDate() {
			return estImplementationDate;
		}
		public void setEstImplementationDate(LocalDate estImplementationDate) {
			this.estImplementationDate = estImplementationDate;
		}
		public String getSubsetCashCode() {
			return subsetCashCode;
		}
		public void setSubsetCashCode(String subsetCashCode) {
			this.subsetCashCode = subsetCashCode;
		}
		public String getClientEntityType() {
			return clientEntityType;
		}
		public void setClientEntityType(String clientEntityType) {
			this.clientEntityType = clientEntityType;
		}
		public String getTpaFirmId() {
			return tpaFirmId;
		}
		public void setTpaFirmId(String tpaFirmId) {
			this.tpaFirmId = tpaFirmId;
		}
		@Override
		public String toString() {
			return "PlanInfo [ evId=" + evId + ", planName=" + planName + ", irsrlCode=" + irsrlCode
					+ ", provCompany=" + provCompany + ", prodId=" + prodId + ", statusCode=" + statusCode + ", dpDateTime="
					+ dpDateTime + ", rolloverInd=" + rolloverInd + ", gaId=" + gaId + ", clientName=" + clientName
					+ ", firstLineMailing=" + firstLineMailing + ", scndLineMailing=" + scndLineMailing + ", city=" + city
					+ ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
					+ ", internalComplianceInd=" + internalComplianceInd + ", planAnnivDate=" + planAnnivDate
					+ ", estNumberOfParticipants=" + estNumberOfParticipants + ", estPlanAssets=" + estPlanAssets
					+ ", estImplementationDate=" + estImplementationDate + ", subsetCashCode=" + subsetCashCode
					+ ", clientEntityType=" + clientEntityType + ", tpaFirmId=" + tpaFirmId + "]";
		}
	
}

---
package com.hrlc.compliance.entity;


import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;

@Entity
public class ContactInfo {
	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	private int contactInfoID;
	
	@ManyToOne
	@JoinColumn(name = "planId")
	private Plans plans;
	
 	
    public int getContactInfoID() {
		return contactInfoID;
	}

	public void setContactInfoID(int contactInfoID) {
		this.contactInfoID = contactInfoID;
	}

	public Plans getPlans() {
		return plans;
	}

	public void setPlans(Plans plans) {
		this.plans = plans;
	}

	private String contactId;
    private String firstName;
    private String lastName;
    private String jobTitle;
    private String companyName;
    private String firstLineMailing;
    private String secondLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String phoneNbr;
    private String faxNbr;
    private String emailAddress;
    
//    @OneToMany(mappedBy = "contactInfo")
//    private List<ContactRole> contactRoles = new ArrayList<>();
    
    
//    public List<ContactRole> getContactRoles() {
//		return contactRoles;
//	}
//
//	public void setContactRoles(List<ContactRole> contactRoles) {
//		this.contactRoles = contactRoles;
//	}

	public String getContactId() {
        return contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getFirstLineMailing() {
        return firstLineMailing;
    }

    public void setFirstLineMailing(String firstLineMailing) {
        this.firstLineMailing = firstLineMailing;
    }

    public String getSecondLineMailing() {
        return secondLineMailing;
    }

    public void setSecondLineMailing(String secondLineMailing) {
        this.secondLineMailing = secondLineMailing;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getStateCode() {
        return stateCode;
    }

    public void setStateCode(String stateCode) {
        this.stateCode = stateCode;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhoneNbr() {
        return phoneNbr;
    }

    public void setPhoneNbr(String phoneNbr) {
        this.phoneNbr = phoneNbr;
    }

    public String getFaxNbr() {
        return faxNbr;
    }

    public void setFaxNbr(String faxNbr) {
        this.faxNbr = faxNbr;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

	@Override
	public String toString() {
		return "ContactInfo [contactInfoID=" + contactInfoID + ", plans=" + plans + ", contactId=" + contactId
				+ ", firstName=" + firstName + ", lastName=" + lastName + ", jobTitle=" + jobTitle + ", companyName="
				+ companyName + ", firstLineMailing=" + firstLineMailing + ", secondLineMailing=" + secondLineMailing
				+ ", city=" + city + ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
				+ ", phoneNbr=" + phoneNbr + ", faxNbr=" + faxNbr + ", emailAddress=" + emailAddress + "]";
	}
    

//    public List<String> getContactRoles() {
//        return contactRoles;
//    }
//
//    public void setContactRoles(List<String> contactRoles) {
//        this.contactRoles = contactRoles;
//    }
}
---
package com.hrlc.compliance.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;

@Entity
public class Plans {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int planId;
	private String plannumber;
	private String planName;
	
	
	

	public String getPlanName() {
		return planName;
	}

	public void setPlanName(String planName) {
		this.planName = planName;
	}

	public int getPlanId() {
		return planId;
	}

	public void setPlanId(int planId) {
		this.planId = planId;
	}

	public String getPlanNumber() {
		return plannumber;
	}

	public void setPlanNumber(String planNumber) {
		this.plannumber = planNumber;
	}

	@Override
	public String toString() {
		return "Plans [planId=" + planId + ", planNumber=" + plannumber + "]";
	}

	
	
	

}














@Entity
public class Plans {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int planId;
	private String plannumber;
	private String planName;
	
@Entity
public class PlanInfo {
	 	@Id
	 	@GeneratedValue(strategy = GenerationType.IDENTITY)
	 	private int planInfoID;
	 	@OneToOne
	 	private Plans plans;
	 	
	    public Plans getPlans() {
			return plans;	

@Entity
public class ContactInfo {
	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	private int contactInfoID;
	
	@ManyToOne
	@JoinColumn(name = "planId")
	private Plans plans;
	
 	
    public int getContactInfoID() {
		return contactInfoID;

existingPlanInfo.setEvId(planInfo.getEvId());
        existingPlanInfo.setPlanName(planInfo.getPlanName());
        existingPlanInfo.setIrsrlCode(planInfo.getIrsrlCode());
        existingPlanInfo.setProvCompany(planInfo.getProvCompany());
        existingPlanInfo.setProdId(planInfo.getProdId());
        existingPlanInfo.setStatusCode(planInfo.getStatusCode());
        existingPlanInfo.setDpDateTime(planInfo.getDpDateTime());
        existingPlanInfo.setRolloverInd(planInfo.getRolloverInd());
        existingPlanInfo.setGaId(planInfo.getGaId());
        existingPlanInfo.setClientName(planInfo.getClientName());
        existingPlanInfo.setFirstLineMailing(planInfo.getFirstLineMailing());
        existingPlanInfo.setScndLineMailing(planInfo.getScndLineMailing());
        existingPlanInfo.setCity(planInfo.getCity());
        existingPlanInfo.setStateCode(planInfo.getStateCode());
        existingPlanInfo.setZipCode(planInfo.getZipCode());
        existingPlanInfo.setCountry(planInfo.getCountry());
        existingPlanInfo.setInternalComplianceInd(planInfo.getInternalComplianceInd());
        existingPlanInfo.setPlanAnnivDate(planInfo.getPlanAnnivDate());
        existingPlanInfo.setEstNumberOfParticipants(planInfo.getEstNumberOfParticipants());
        existingPlanInfo.setEstPlanAssets(planInfo.getEstPlanAssets());
        existingPlanInfo.setEstImplementationDate(planInfo.getEstImplementationDate());
        existingPlanInfo.setSubsetCashCode(planInfo.getSubsetCashCode());
        existingPlanInfo.setClientEntityType(planInfo.getClientEntityType());
        existingPlanInfo.setTpaFirmId(planInfo.getTpaFirmId());



public void uodatePlanInfo(PlanInfo planInfo) {
	        // Check if a record with the same planInfoID already exists in the database
	        PlanInfo existingPlanInfoOptional = planInfoRepo.findByPlanId(planInfo.getPlanInfoID());
	        
	        if (existingPlanInfoOptional!=null) {
	            // If a record with the same ID exists, update the existing record
	            PlanInfo existingPlanInfo = existingPlanInfoOptional.get();
	            // Update the existing record with the new data
	            existingPlanInfo.setEvId(planInfo.getEvId());
	            existingPlanInfo.setPlanName(planInfo.getPlanName());
	            // Set other fields as needed

	            // Save the updated record
	            planInfoRepository.save(existingPlanInfo);
	        } else {
	            // If no record with the same ID exists, simply save the new record
	            planInfoRepository.save(planInfo);
	        }
	    }


    public void uodatePlanInfo(PlanInfo planInfo) {
        // Check if a record with the same planInfoID already exists in the database
        Optional<PlanInfo> existingPlanInfoOptional = planInfoRepository.findById(planInfo.getPlanInfoID());
        
        if (existingPlanInfoOptional.isPresent()) {
            // If a record with the same ID exists, update the existing record
            PlanInfo existingPlanInfo = existingPlanInfoOptional.get();
            // Update the existing record with the new data
            existingPlanInfo.setEvId(planInfo.getEvId());
            existingPlanInfo.setPlanName(planInfo.getPlanName());
            // Set other fields as needed

            // Save the updated record
            planInfoRepository.save(existingPlanInfo);
        } else {
            // If no record with the same ID exists, simply save the new record
            planInfoRepository.save(planInfo);
        }
    }

package com.hrlc.compliance.entity;



import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;

@Entity
public class PlanInfo {
	 	@Id
	 	@GeneratedValue(strategy = GenerationType.IDENTITY)
	 	private int planInfoID;
	 	@OneToOne
	 	private Plans plans;
	 	
	    public Plans getPlans() {
			return plans;
		}

		public void setPlans(Plans plans) {
			this.plans = plans;
		}
		private String evId;
	    private String planName;
	    private String irsrlCode;
	    private String provCompany;
	    private String prodId;
	    private String statusCode;
	    private String dpDateTime;
	    private String rolloverInd;
	    private String gaId;
	    private String clientName;
	    private String firstLineMailing;
	    private String scndLineMailing;
	    private String city;
	    private String stateCode;
	    private String zipCode;
	    private String country;
	    private String internalComplianceInd;
	    private String planAnnivDate;
	    private String estNumberOfParticipants;
	    private String estPlanAssets;
	    private LocalDate estImplementationDate;
	    private String subsetCashCode;
	    private String clientEntityType;
	    private String tpaFirmId;
		
	    
	    
	    public String getEvId() {
	        return evId;
	    }

	    public void setEvId(String evId) {
	        this.evId = evId;
	    }
		public String getPlanName() {
			return planName;
		}
		public void setPlanName(String planName) {
			this.planName = planName;
		}
		public String getIrsrlCode() {
			return irsrlCode;
		}
		public void setIrsrlCode(String irsrlCode) {
			this.irsrlCode = irsrlCode;
		}
		public String getProvCompany() {
			return provCompany;
		}
		public void setProvCompany(String provCompany) {
			this.provCompany = provCompany;
		}
		public String getProdId() {
			return prodId;
		}
		public void setProdId(String prodId) {
			this.prodId = prodId;
		}
		public String getStatusCode() {
			return statusCode;
		}
		public void setStatusCode(String statusCode) {
			this.statusCode = statusCode;
		}
		public String getDpDateTime() {
			return dpDateTime;
		}
		public void setDpDateTime(String dpDateTime) {
			this.dpDateTime = dpDateTime;
		}
		public String getRolloverInd() {
			return rolloverInd;
		}
		public void setRolloverInd(String rolloverInd) {
			this.rolloverInd = rolloverInd;
		}
		public String getGaId() {
			return gaId;
		}
		public void setGaId(String gaId) {
			this.gaId = gaId;
		}
		public String getClientName() {
			return clientName;
		}
		public void setClientName(String clientName) {
			this.clientName = clientName;
		}
		public String getFirstLineMailing() {
			return firstLineMailing;
		}
		public void setFirstLineMailing(String firstLineMailing) {
			this.firstLineMailing = firstLineMailing;
		}
		public String getScndLineMailing() {
			return scndLineMailing;
		}
		public void setScndLineMailing(String scndLineMailing) {
			this.scndLineMailing = scndLineMailing;
		}
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public String getStateCode() {
			return stateCode;
		}
		public void setStateCode(String stateCode) {
			this.stateCode = stateCode;
		}
		public String getZipCode() {
			return zipCode;
		}
		public void setZipCode(String zipCode) {
			this.zipCode = zipCode;
		}
		public String getCountry() {
			return country;
		}
		public void setCountry(String country) {
			this.country = country;
		}
		public String getInternalComplianceInd() {
			return internalComplianceInd;
		}
		public void setInternalComplianceInd(String internalComplianceInd) {
			this.internalComplianceInd = internalComplianceInd;
		}
		public String getPlanAnnivDate() {
			return planAnnivDate;
		}
		public void setPlanAnnivDate(String planAnnivDate) {
			this.planAnnivDate = planAnnivDate;
		}
		public String getEstNumberOfParticipants() {
			return estNumberOfParticipants;
		}
		public void setEstNumberOfParticipants(String estNumberOfParticipants) {
			this.estNumberOfParticipants = estNumberOfParticipants;
		}
		public String getEstPlanAssets() {
			return estPlanAssets;
		}
		public void setEstPlanAssets(String estPlanAssets) {
			this.estPlanAssets = estPlanAssets;
		}
		public LocalDate getEstImplementationDate() {
			return estImplementationDate;
		}
		public void setEstImplementationDate(LocalDate estImplementationDate) {
			this.estImplementationDate = estImplementationDate;
		}
		public String getSubsetCashCode() {
			return subsetCashCode;
		}
		public void setSubsetCashCode(String subsetCashCode) {
			this.subsetCashCode = subsetCashCode;
		}
		public String getClientEntityType() {
			return clientEntityType;
		}
		public void setClientEntityType(String clientEntityType) {
			this.clientEntityType = clientEntityType;
		}
		public String getTpaFirmId() {
			return tpaFirmId;
		}
		public void setTpaFirmId(String tpaFirmId) {
			this.tpaFirmId = tpaFirmId;
		}
		@Override
		public String toString() {
			return "PlanInfo [ evId=" + evId + ", planName=" + planName + ", irsrlCode=" + irsrlCode
					+ ", provCompany=" + provCompany + ", prodId=" + prodId + ", statusCode=" + statusCode + ", dpDateTime="
					+ dpDateTime + ", rolloverInd=" + rolloverInd + ", gaId=" + gaId + ", clientName=" + clientName
					+ ", firstLineMailing=" + firstLineMailing + ", scndLineMailing=" + scndLineMailing + ", city=" + city
					+ ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
					+ ", internalComplianceInd=" + internalComplianceInd + ", planAnnivDate=" + planAnnivDate
					+ ", estNumberOfParticipants=" + estNumberOfParticipants + ", estPlanAssets=" + estPlanAssets
					+ ", estImplementationDate=" + estImplementationDate + ", subsetCashCode=" + subsetCashCode
					+ ", clientEntityType=" + clientEntityType + ", tpaFirmId=" + tpaFirmId + "]";
		}
	
}





com.microsoft.sqlserver.jdbc.SQLServerException: Cannot insert duplicate key row in object 'dbo.plan_info' with unique index 'UK_58ublq9h4m4rkky15f45tuhf'. The duplicate key value is (2).
	at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDatabaseError(SQLServerException.java:261) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.getNextResult(SQLServerStatement.java:1752) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.doExecutePreparedStatement(SQLServerPreparedStatement.java:657) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement$PrepStmtExecCmd.doExecute(SQLServerPreparedStatement.java:576) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.TDSCommand.execute(IOBuffer.java:7739) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerConnection.executeCommand(SQLServerConnection.java:4384) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeCommand(SQLServerStatement.java:293) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerStatement.executeStatement(SQLServerStatement.java:263) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.microsoft.sqlserver.jdbc.SQLServerPreparedStatement.executeUpdate(SQLServerPreparedStatement.java:519) ~[mssql-jdbc-12.6.0.jre11.jar:na]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeUpdate(ProxyPreparedStatement.java:61) ~[HikariCP-5.0.1.jar:na]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeUpdate(HikariProxyPreparedStatement.java) ~[HikariCP-5.0.1.jar:na]
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:194) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.id.insert.GetGeneratedKeysDelegate.performInsert(GetGeneratedKeysDelegate.java:107) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.jdbc.mutation.internal.MutationExecutorPostInsertSingleTable.execute(MutationExecutorPostInsertSingleTable.java:100) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.mutation.InsertCoordinator.doStaticInserts(InsertCoordinator.java:175) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.mutation.InsertCoordinator.coordinateInsert(InsertCoordinator.java:113) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2868) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:670) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:291) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:272) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:322) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:386) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:300) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:219) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:134) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.entityIsTransient(DefaultPersistEventListener.java:175) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.persist(DefaultPersistEventListener.java:93) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:77) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.internal.DefaultPersistEventListener.onPersist(DefaultPersistEventListener.java:54) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.event.service.internal.EventListenerGroupImpl.fireEventOnEachListener(EventListenerGroupImpl.java:127) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.internal.SessionImpl.firePersist(SessionImpl.java:774) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at org.hibernate.internal.SessionImpl.persist(SessionImpl.java:758) ~[hibernate-core-6.4.1.Final.jar:6.4.1.Final]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.orm.jpa.ExtendedEntityManagerCreator$ExtendedEntityManagerInvocationHandler.invoke(ExtendedEntityManagerCreator.java:364) ~[spring-orm-6.1.3.jar:6.1.3]
	at jdk.proxy2/jdk.proxy2.$Proxy109.persist(Unknown Source) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:319) ~[spring-orm-6.1.3.jar:6.1.3]
	at jdk.proxy2/jdk.proxy2.$Proxy109.persist(Unknown Source) ~[na:na]
	at org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:618) ~[spring-data-jpa-3.2.2.jar:3.2.2]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:351) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker$RepositoryFragmentMethodInvoker.lambda$new$0(RepositoryMethodInvoker.java:277) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:516) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:285) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:628) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:168) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:143) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:70) ~[spring-data-commons-3.2.2.jar:3.2.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:123) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:385) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:137) ~[spring-tx-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:164) ~[spring-data-jpa-3.2.2.jar:3.2.2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:97) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.1.3.jar:6.1.3]
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:220) ~[spring-aop-6.1.3.jar:6.1.3]
	at jdk.proxy2/jdk.proxy2.$Proxy116.save(Unknown Source) ~[na:na]
	at com.hrlc.compliance.service.xmlService.uodatePlanInfo(xmlService.java:232) ~[classes/:na]
	at com.hrlc.compliance.controller.xmlController.updatePlaninfo(xmlController.java:55) ~[classes/:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at org.springframework.web.servlet.FrameworkServlet.doPut(FrameworkServlet.java:925) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:593) ~[tomcat-embed-core-10.1.18.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.3.jar:6.1.3]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.18.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.3.jar:6.1.3]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.3.jar:6.1.3]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.18.jar:10.1.18]
	at org.apache.t

package com.hrlc.compliance.service;
import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.ContactRole;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
//import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;

import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.ContactRoleRepo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;


@Service
public class xmlService {
	@Autowired
	private UserInfoRepository userInfoRepo;
	
	@Autowired
	private	PlanInfoRepository planInfoRepo;
	
	@Autowired
	private ContactInfoRepository contactInfoRepo;
	@Autowired
	private ContactRoleRepo contactRoleRepo;
	
	@Autowired
	private PlanRepo planRepo;
	
	String imp = null;
	
	public List<PlanInfo> getPlanInfo()
	{
		return planInfoRepo.findAll();
	}
	
	public List<ContactInfo> getContactInfo()
	{
		return contactInfoRepo.findAll();
	}
	public List<UserInfo> getUserInfo()
	{
		return userInfoRepo.findAll();
	}
	public ResponseEntity<String> processXmlData(String xmlData) {
		try {
	        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
	        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

	        NodeList parentNodes = document.getElementsByTagName("*"); // Get all parent nodes

	        for (int i = 0; i < parentNodes.getLength(); i++) {
	            Element parent = (Element) parentNodes.item(i);

	            switch (parent.getTagName()) {
	                case "user_info":
	                    saveUserInfo(parent);
	                    break;
	                case "plan_info":
	                    savePlanInfo(parent);
	                    break;
	                case "contact_info":
	                    saveContactInfo(parent);
	                    break;
	                
	            }
	        }

	        return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

	private void saveUserInfo(Element parent) {
	    UserInfo userInfo = new UserInfo();

	    userInfo.setLogonId(getElementValue(parent, "logon_id"));
	    userInfo.setLastName(getElementValue(parent, "last_name"));
	    userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
	    userInfo.setJobTitle(getElementValue(parent, "job_title"));
	    userInfo.setMiddleName(getElementValue(parent, "middle_name"));
	    userInfo.setAreaCode(getElementValue(parent, "area_code"));
	    userInfo.setFirstName(getElementValue(parent, "first_name"));
	    userInfo.setEmailAddress(getElementValue(parent, "email_address"));
	    userInfoRepo.save(userInfo);
	    
	}
	
	private void savePlanInfo(Element parent) {
		PlanInfo planInfo = new PlanInfo();
		Plans plans = new  Plans();
		String ga_id=getElementValue(parent, "ga_id");
		String planName = getElementValue(parent, "plan_name");
	
				plans.setPlanNumber(ga_id);
				plans.setPlanName(planName);
				planRepo.save(plans);
				imp=ga_id;
		

		//setting plan_info id
		Plans plan1 = getLastRow();
		System.out.println("planinfo"+plan1);
		planInfo.setPlans(plan1);
		planInfo.setEvId(getElementValue(parent,"ev_id"));
	 	planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfoRepo.save(planInfo);
	}

	private void saveContactInfo(Element parent)
	{
		 ContactInfo contactInfo = new ContactInfo();
		 
		//setting plan_info id
		Plans plan1 = getLastRow();
		System.out.println("contact in "+plan1+"and imp is "+imp);
		contactInfo.setPlans(plan1);
         contactInfo.setContactId(getElementValue(parent, "contact_id"));
         contactInfo.setFirstName(getElementValue(parent, "first_name"));
         contactInfo.setLastName(getElementValue(parent, "last_name"));
         contactInfo.setJobTitle(getElementValue(parent, "job_title"));
         contactInfo.setCompanyName(getElementValue(parent, "company_name"));
         contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
         contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
         contactInfo.setCity(getElementValue(parent, "city"));
         contactInfo.setStateCode(getElementValue(parent, "state_code"));
         contactInfo.setZipCode(getElementValue(parent, "zip_code"));
         contactInfo.setCountry(getElementValue(parent, "country"));
         contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
         contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
         contactInfo.setEmailAddress(getElementValue(parent, "email_address"));

//          Assuming contact_roles is a list of strings
//         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
//         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
//             contactInfo.getContactRoles().add(contactRoleNodes.item(i).getTextContent());
//         }

         contactInfoRepo.save(contactInfo);
         
         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
             Element contactRoleElement = (Element) contactRoleNodes.item(i);
             String role = contactRoleElement.getTextContent();
             
             // Create a new ContactRole entity
             ContactRole contactRole = new ContactRole();
             contactRole.setRole(role);
             contactRole.setContactInfo(contactInfo); // Set the ContactInfo
//             System.out.println("dub");
             // Save the ContactRole
             contactRoleRepo.save(contactRole);
         }
	}

	private String getElementValue(Element parseElement, String childTagName) {
	    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
	    if (childNodes.getLength() > 0) {
	        return childNodes.item(0).getTextContent();
	    }
	    return null;
	}
	
	public  PlanInfo findbygaid(String GaId){
		return planInfoRepo.findByGaId(GaId);
	}
	
	public List<ContactInfo> contactbyplaid(int id) {
		return contactInfoRepo.findByPlansPlanId(id);
	}
	
	public PlanInfo findByPlanId(int planId) {
		System.out.println("last row is "+getLastRow());
		return planInfoRepo.findByPlanId(planId);
	}
	
	public Plans getLastRow() {
		Plans lastRow = null;
		Optional<Plans> plans = planRepo.findLastRow();
		System.out.println(plans);
		return plans.orElse(null);
	}
	
	public void uodatePlanInfo(PlanInfo planinfo) {
		PlanInfo pf = planInfoRepo.findByGaId(planinfo.getGaId());
		System.out.println(planinfo);
		if(pf!=null) {
			planInfoRepo.save(pf);
			System.out.println("saved");
		}
	}
	
	
}
	





const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.put('http://localhost:8080/api/update', formData);
      console.log(response.data); // Assuming backend returns the saved data
      // Optionally, reset the form after successful submission
      setFormData({
        name: '',
        email: '',
      });
    } catch (error) {
      console.error('Error:', error);
    }
  };


https://teams.microsoft.com/l/meetup-join/19%3ameeting_NmY2YTczYTgtYWZiYi00YTc4LTg3ZDMtZGY2MWU4ZGZmMTBi%40thread.v2/0?context=%7b%22Tid%22%3a%22d344fc8a-8286-4945-9a21-49aed506d485%22%2c%22Oid%22%3a%22aeb1f80b-21fd-462f-86c6-40255d6bd1b9%22%7d
function Home1() {
    const [currentPlan, setCurrentPlan] = useState();
    const [currentPlanInfo, setCurrentPlanInfo] = useState();
    const [newPlan, setNewPlan] = useState();
    const [newPlanInfo, setNewPlanInfo] = useState();
    const [clickedPage, setClickedPage] = useState();
    const [sortOrder, setSortOrder] = useState("desc");
    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId');
    const [filteredPlans, setFilteredPlans] = useState([]);
    const [isDataFetched, setIsDataFetched] = useState(false);
    const [activeButton,setActiveButton]=useState(null);

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        filterPlans(value, searchBy);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        filterPlans(searchQuery, value);
    };

    const filterPlans = (query, searchBy) => {
        if (!newPlan) return;
        
        const filtered = newPlan.filter(plan => {
            const searchValue = query.toLowerCase();
            if (searchBy === 'planId') {
                return plan.planId.toString().includes(searchValue);
            } else if(searchBy === 'planNumber') {
                return plan.planNumber.toLowerCase().includes(searchValue);
            }
            else{
                return plan.planName.toLowerCase().includes(searchValue);
            }
        });
        setFilteredPlans(filtered);
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get("http://localhost:8082/getplans");
                setNewPlan(response.data);
                setIsDataFetched(true);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();

        async function getPlanInfodata(){
            await axios.get("http://localhost:8082/getPlanInfo")
            .then(res=>{
                setNewPlanInfo(res.data);
            })
            .catch(err =>{
                console.log(err);
            });
        }
        getPlanInfodata();
    }, []);

    useEffect(() => {
        if (isDataFetched) {
            filterPlans(searchQuery, searchBy);
        }
    }, [isDataFetched, searchQuery, searchBy]);

    const inputfield = async (obj) => {
        try {
            const response = await axios.get("http://localhost:8082/planid/"+obj.planId);
            setCurrentPlanInfo(response.data);
            setCurrentPlan(obj.planId);
            console.log("selected plan id is "+obj.planId);
        } catch (error) {
            console.error('Error fetching plan info:', error);
        }
    };

    const handleSort = (property) => {
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        setFilteredPlans(sortedPlan);
        toggleSortOrder(); // Toggle sorting order after sorting
    };

    const toggleSortOrder = () => {
        setSortOrder(sortOrder === "asc" ? 'desc' : 'asc');
    };

    const handlebutton = (page, id) => {
        setClickedPage(page);
        setActiveButton(id);
    };

    return (
        <div className='main'>
            {/* Your navbar and other UI elements */}
            <div className="bottom">
                <div className="btm-left">
                    {/* Your left-side UI elements */}
                </div>
                <div className="btm-right">
                    {/* Render the Testing component with currentPlanInfo as prop */}
                    {clickedPage === "planinfo" && <Testing currentPlanInfo={currentPlanInfo} />}
                    {/* Other components based on clickedPage */}
                </div>
            </div>
        </div>
    );
}

export default Home1;




import React, { useState } from 'react';
import './AddPlan.css';
import './Testing.css';

function Testing(props) {
    const [formData, setFormData] = useState(props.CurrentPLanInfo || {});

    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setFormData(prevState => ({
            ...prevState,
            [name]: value
        }));
    };

    return (
        <div className='body'>
            <div className='rightmenu'>
                <div className='row1'>
                    <div className='row11'>
                        <input name="clientName" value={formData.clientName || ''} style={{ width: "500px" }} onChange={handleInputChange} />
                        <br />Client Name
                    </div>
                    <div className='row11'>
                        <input name="estNumberOfParticipants" value={formData.estNumberOfParticipants || ''} onChange={handleInputChange} />
                        <br />Propective Plan Number
                    </div>
                    {/* Add other input fields similarly */}
                </div>
            </div>
        </div>
    );
}

export default Testing;



----
import React, { useState, useEffect } from 'react';
import axios from 'axios';

function YourFormComponent(props) {
    const initialValues = props.initialValues;
    const [formData, setFormData] = useState(initialValues);
    const [updatedFormData, setUpdatedFormData] = useState(initialValues);

    useEffect(() => {
        setUpdatedFormData(initialValues); // Initialize updatedFormData with initial form data from props
    }, [initialValues]);

    const handleChange = (e) => {
        setUpdatedFormData({ ...updatedFormData, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const response = await axios.put(`/api/forms/${id}`, updatedFormData); // Assuming id is the ID of the form data you want to update
            console.log('Form data updated:', response.data);
            // Handle successful update, e.g., show a success message
            setFormData(updatedFormData); // Update the form state with the updated form data
        } catch (error) {
            console.error('Error updating form data:', error);
            // Handle error, e.g., show an error message
        }
    };

    return (
        <form onSubmit={handleSubmit}>
            <input
                type="text"
                name="field1"
                value={updatedFormData.field1}
                onChange={handleChange}
            />
            <input
                type="text"
                name="field2"
                value={updatedFormData.field2}
                onChange={handleChange}
            />
            {/* Add other form fields here */}
            <button type="submit">Update Form</button>
        </form>
    );
}

export default YourFormComponent;









import React, { useState, useEffect } from 'react';

function Testing({ CurrentPLanInfo }) {
    // State variable to hold form data
    const [formData, setFormData] = useState({
        clientName: '',
        estNumberOfParticipants: '',
        estPlanAssets: '',
        // Add more fields as needed
    });

    // Update form data when new props are received
    useEffect(() => {
        if (CurrentPLanInfo) {
            setFormData(CurrentPLanInfo);
        }
    }, [CurrentPLanInfo]);

    // Handle input changes
    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setFormData(prevFormData => ({
            ...prevFormData,
            [name]: value
        }));
    };

    return (
        <div>
            <input name="clientName" value={formData.clientName} onChange={handleInputChange} placeholder="Client Name" />
            <input name="estNumberOfParticipants" value={formData.estNumberOfParticipants} onChange={handleInputChange} placeholder="Estimated Number of Participants" />
            <input name="estPlanAssets" value={formData.estPlanAssets} onChange={handleInputChange} placeholder="Estimated Plan Assets" />
            {/* Add more inputs for other fields */}
        </div>
    );
}

export default Testing;





import React, { useEffect, useState  ,useRef} from 'react';
import myimage from'./logo-new.png';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Testing from './Testing';
import PYE from './PYE';
import EventLog from './EventLog';
import NewSetup from './NewSetup';
import Searching from './Searching';
import './Home1.css'
import Contacts from './Contacts';


const Home1 = () => {
    const [currentPlan, setCurrentPlan] = useState();
    const [currentPlanInfo, setCurrentPlanInfo] = useState();
    const [newPlan, setNewPlan] = useState();
    const [newPlanInfo, setNewPlanInfo] = useState();
    const [clickedPage, setClickedPage] = useState();
    const navigate = useNavigate();
    const [sortOrder, setSortOrder] = useState("desc");
    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId');
    const [filteredPlans, setFilteredPlans] = useState([]);
    const [isDataFetched, setIsDataFetched] = useState(false);
    const [activeButton,setActiveButton]=useState(null);
    const modalRef = useRef(null);

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        filterPlans(value, searchBy);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        filterPlans(searchQuery, value);
    };

    const filterPlans = (query, searchBy) => {
        if (!newPlan) return;
        
        const filtered = newPlan.filter(plan => {
            const searchValue = query.toLowerCase();
            if (searchBy === 'planId') {
                return plan.planId.toString().includes(searchValue);
            } else if(searchBy === 'planNumber') {
                return plan.planNumber.toLowerCase().includes(searchValue);
            }
            else{
                return plan.planName.toLowerCase().includes(searchValue);
            }
        });
        setFilteredPlans(filtered);
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get("http://localhost:8082/getplans");
                setNewPlan(response.data);
                setIsDataFetched(true);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();

        async function getPlanInfodata(){
            await axios.get("http://localhost:8082/getPlanInfo")
            .then(res=>{
               
                setNewPlanInfo(res.data)
                })
            .catch(err =>{console.log(err)
            })
            }
            getPlanInfodata();
    }, []);

    useEffect(() => {
        if (isDataFetched) {
            filterPlans(searchQuery, searchBy);
        }
    }, [isDataFetched, searchQuery, searchBy]);

    const tohome = () => {
        console.log("going home");
        setClickedPage(null);
        navigate("/Home");
    };

    const toggleSortOrder = () => {
        setSortOrder(sortOrder === "asc" ? 'desc' : 'asc');
    };
    async function inputfield(obj){
        await axios.get("http://localhost:8082/planid/"+obj.planId)
            .then(res=>{
               
               setCurrentPlanInfo(res.data)
                })
            .catch(err =>{console.log(err)
            })

            setCurrentPlan(obj.planId)
            console.log("selected plan id is "+obj.planId);
        
    }
    const handleSort = (property) => {
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        setFilteredPlans(sortedPlan)
        toggleSortOrder(); // Toggle sorting order after sorting
    };
    const handlebutton=(page,id)=>{
        setClickedPage(page);
        setActiveButton(id)
    }

    return (
        <div className='main'>
            <div className="navbar">
                <div className="logo">
                    <img src={myimage} alt="Empower" />
                    <h1>Compliance</h1>
                    
                </div>
                <div className="right-btns">
                    <button className='btn01' onClick={tohome}>Home</button>
                    <button className={activeButton===1?'active':'btn01'} onClick={()=>handlebutton('planinfo',1)}>Plan Info</button>
                    <button className={activeButton===2?'active':'btn01'} onClick={()=>handlebutton('setup',2)}>SetUp</button>
                    <button className={activeButton===3?'active':'btn01'} onClick={()=>handlebutton('pye',3)}>PYE</button>
                    <button className={activeButton===4?'active':'btn01'} onClick={()=>handlebutton('eventlog',4)}>Event Log</button>
                    <button className={activeButton===5?'active':'btn01'} onClick={()=>handlebutton('contacts',5)}>Contacts</button>
                    <button className='btn01'>Amendments</button>
                    <button className='btn01'>Test</button>
                </div>
            </div>
            <div className="bottom">
                <div className="btm-left">
                    <div className="left-up">
                        <div className="search">
                            <input className='search-btn' type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />
                            <select className='option' value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                                <option value="planId">SearchID</option>
                                <option value="planNumber">Search by Plan Number</option>
                                <option value="planName">Search by Plan Name</option>
                            </select>
                        </div>
                        <div className="plan">
                            <table style={{borderSpacing:'10px'}}>
                                <thead>
                                <tr>
                                    <th>planId </th>
                                    <th>PlanNumber</th>
                                    <th>PlanName</th>
                                </tr>
                                </thead>
                    
                                <tbody>
                                    {filteredPlans.map(plan => (
                                        <tr style={{cursor:'pointer'}} onClick={()=>inputfield(plan)} key={plan.planId}>
                                            <td>{plan.planId}</td>
                                            <td>{plan.planNumber}</td>
                                            <td>{plan.planName}</td>
                                        </tr>
                                        
                                    ))}
                                </tbody>  
                            </table>
                            {/* {
                            filteredPlans.length > 0 &&
                            <ul>
                                {filteredPlans.map(plan => (
                                    <li  style={{cursor:'pointer'}} onClick={()=>inputfield(plan)} key={plan.planId}>
                                        PlanID: {plan.planId}, PlanNum: {plan.planNumber}
                                    </li>
                                ))}
                            </ul>
                    } */}
                    </div>
                        
                    </div>
                    <div className="left-down">
                        <button className='btn01' onClick={() => handleSort('planId')}>Sort by Plan ID </button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Sort by Plan Number </button>
                        <button className='btn01' onClick={() => handleSort('planName')}>Sort by Plan Name </button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans By Client</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans In StartUp</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>BY Institution</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Contacts</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>By Analyst</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Termed Plans</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans w/o Primary Contacts</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Deleted Plans</button>
                        <button className='btn01' onClick={() => setClickedPage('search')}>Search</button>
                    </div>
                </div>
                <div className="btm-right">
                    <div className='top-info'>
                        {currentPlanInfo? 
                        (<div className='top1'>
                        <p>Plan Id :{currentPlanInfo?.gaId}</p>
                        <p>Plan Name:{currentPlanInfo?.planName}</p></div>):
                            (<div className='top1'>
                            <p>Plan Id :</p>
                            <p>Plan Name:</p></div>)}
                        
                    </div>
                    {clickedPage === 'search' && <Searching plan={newPlan} />}
                    {clickedPage === "planinfo" && <Testing CurrentPLanInfo={currentPlanInfo} />}
                    {clickedPage === "setup" && <NewSetup />}
                    {clickedPage === "pye" && <PYE />}
                    {clickedPage === "eventlog" && <EventLog />}
                    {clickedPage === "contacts" && <Contacts currentplan={currentPlan}/>}
                </div>
                
            </div>
        </div>
    );
};

export default Home1;



import React, { useState } from 'react';
import './AddPlan.css';
import './Testing.css';

function Testing(props) {
    const [formData, setFormData] = useState(props.CurrentPLanInfo || {});

    const handleInputChange = (event) => {
        const { name, value } = event.target;
        setFormData(prevState => ({
            ...prevState,
            [name]: value
        }));
    };

    return (
        <div className='body'>
            <div className='rightmenu'>
                <div className='row1'>
                    <div className='row11'>
                        <input name="clientName" value={formData.clientName || ''} style={{ width: "500px" }} onChange={handleInputChange} />
                        <br />Client Name
                    </div>
                    <div className='row11'>
                        <input name="estNumberOfParticipants" value={formData.estNumberOfParticipants || ''} onChange={handleInputChange} />
                        <br />Propective Plan Number
                    </div>
                    {/* Add other input fields similarly */}
                </div>
            </div>
        </div>
    );
}

export default Testing;




import React ,{useState} from 'react';
import './AddPlan.css';
import './Testing.css';

function Testing(props){
    const [fileContent, setFileContent] = useState("");

    const handleButtonClick = async () => {
      try {
        const response = await fetch('P:/00000101/document/plandoc.pdf'); // Replace with the actual path to your file
        if (!response.ok) {
          throw new Error('Failed to fetch file');
        }
        const content = await response.text();
        setFileContent(content);
      } catch (error) {
        console.error('Error fetching file:', error);
      }
    }
    return (
    <div className='body'>
       
           
        <div className='rightmenu'>
            
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.CurrentPLanInfo?.clientName} style={{width:"500px"}}/>
                        <br/>Client Name
                    </div>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.estNumberOfParticipants}/>
                        <br/>Propective Plan Number
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.estPlanAssets}/>
                        <br/>EIN #
                    </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.CurrentPLanInfo?.provCompany}/>
                        <br/>Institution
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.groupOffice}/>
                        <br/>Group Office
                    </div>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.irsrlCode}/><br/>
                        Plan Type 
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.trustEin}/><br/>
                        Trust Ein
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.subInstitution}/>
                        <br/>Sub Institution
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.subInstitution}/>
                        <br/>Prov Company
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.subInstitution}/>
                        <br/>PSC Accu Code
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.subInstitution}/>
                        <br/>Common Remitter
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.complianceAnalyst}/>
                        <br/>Compliance Analyst
                    </div>
                    <div className='row11'><button  className='planbtn' onClick={handleButtonClick}>Plan Document</button></div> 
                     <div className='row11'><button className='planbtn'>Plan Folder</button></div>
                    <div className='row11'><button className='planbtn' ><a href='https://www.google.com' target='_blank' style={{textDecoration:'none',color:'white'}}>  Scan Sheets</a></button></div>
                    <div className='row11'><button className='planbtn'>Update FTW</button></div> 
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.secondaryCaseload} type='checkbox'/>Secondary Caseload
                    </div>   
                </div> 

                 <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.gwg} type='checkbox'/>GWG
                    </div> 
                    <div className='row11' style={{marginLeft:"120px"}}>
                        <input value={props.currentPlanInfo?.gwgServices}/>
                        <br/>GWG Services
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.gwgWorkTracking}/>
                        <br/>GWG Work Tracking
                    </div> 
                    <div className='row11'><button className='planbtn'>GWG Follow Up</button> </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.planYearEnd} type='date'/>
                        <br/>Plan Year End
                    </div>
                    <div className='row11' style={{marginLeft:"63px"}}>
                        <input value={props.currentPlanInfo?.planTier}/>
                        <br/>Plan Teir
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.irsPlanType}/><br/>
                        IRS Plan Type
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.marketSegment}/><br/>
                        Market Segment
                    </div>
                </div> 
                
                 
                <div className='row1'>
                    <div className='row11'>
                        Plan Characteristics
                    </div>
                    
                </div> 

                <div className='row1'>
                    <div className='row11' style={{marginRight:"55px"}}>
                    <input checked={props.currentPlanInfo?.ppsExternal} type='checkbox'/>PPSExternal 
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.jumbo401k} type='checkbox'/>Jumbo 401(k)<br/>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>PEAK Pilot Plan<br/>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>Hybrid Plan
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.jumbo401k} type='checkbox'/>403b Restatement Req<br/>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>403b Fee Waived<br/>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>403b Wave Change
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.jumbo401k} type='date'/><br/>
                        403b Request Date
                    </div>
                   
                </div> 
                <div className='row1'>
                
                    <div className='row11'>
                    <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>Plan Deconversion<br/>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>PPA Restatement Dashboard<br/>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>Cycle 3 Restatement Dashboard
                    </div>


                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.jumbo401k} type='checkbox'/>
                        Check this box to prevent ISIS from Updating the contacts and unlock the contacts form
                        <button>Delete This plan</button>
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                        FTW Customer ID<input checked={props.currentPlanInfo?.jumbo401k} type='text'/><br/>
                        FTW Plan ID<input checked={props.currentPlanInfo?.jumbo401k} type='text'/>
                    </div>
                </div>
                
                    
            </div>
        </div>
    
    )
}
export default Testing;



---------------------
package com.hrlc.compliance.entity;


import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;

@Entity
public class ContactInfo {
	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	private int contactInfoID;
	
	@ManyToOne
	@JoinColumn(name = "planId")
	private Plans plans;
	
 	
    public int getContactInfoID() {
		return contactInfoID;
	}

	public void setContactInfoID(int contactInfoID) {
		this.contactInfoID = contactInfoID;
	}

	public Plans getPlans() {
		return plans;
	}

	public void setPlans(Plans plans) {
		this.plans = plans;
	}

	private String contactId;
    private String firstName;
    private String lastName;
    private String jobTitle;
    private String companyName;
    private String firstLineMailing;
    private String secondLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String phoneNbr;
    private String faxNbr;
    private String emailAddress;
    
//    @OneToMany(mappedBy = "contactInfo")
//    private List<ContactRole> contactRoles = new ArrayList<>();
    
    
//    public List<ContactRole> getContactRoles() {
//		return contactRoles;
//	}
//
//	public void setContactRoles(List<ContactRole> contactRoles) {
//		this.contactRoles = contactRoles;
//	}

	public String getContactId() {
        return contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getFirstLineMailing() {
        return firstLineMailing;
    }

    public void setFirstLineMailing(String firstLineMailing) {
        this.firstLineMailing = firstLineMailing;
    }

    public String getSecondLineMailing() {
        return secondLineMailing;
    }

    public void setSecondLineMailing(String secondLineMailing) {
        this.secondLineMailing = secondLineMailing;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getStateCode() {
        return stateCode;
    }

    public void setStateCode(String stateCode) {
        this.stateCode = stateCode;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhoneNbr() {
        return phoneNbr;
    }

    public void setPhoneNbr(String phoneNbr) {
        this.phoneNbr = phoneNbr;
    }

    public String getFaxNbr() {
        return faxNbr;
    }

    public void setFaxNbr(String faxNbr) {
        this.faxNbr = faxNbr;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

//    public List<String> getContactRoles() {
//        return contactRoles;
//    }
//
//    public void setContactRoles(List<String> contactRoles) {
//        this.contactRoles = contactRoles;
//    }
}



org.springframework.mail.MailSendException: Mail server connection failed. Failed messages: org.eclipse.angus.mail.util.MailConnectException: Couldn't connect to host, port: smtp.gmail.com, 587; timeout -1;
  nested exception is:
	java.net.ConnectException: Connection timed out: connect
	at org.springframework.mail.javamail.JavaMailSenderImpl.doSend(JavaMailSe

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=chennakesava13579@gmail.com
spring.mail.password=lvfd zcds ykmm yuob
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true



package com.sample.mail;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;


import java.io.File;

@Service
public class MailService {
    @Autowired
    private JavaMailSender mailSender;

    public void sendSimpleEmail(String toEmail,
                                String subject,
                                String body
    ) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("chennakesava13579@gmail.com");
        message.setTo(toEmail);
        message.setText(body);
        message.setSubject(subject);
        mailSender.send(message);
        System.out.println("Mail Send...");


    }

    }

//	@EventListener(ApplicationReadyEvent.class)
//	public void triggerMail() throws MessagingException {
//		email.sendSimpleEmail("puthachennakesavareddy@gmail.com",
//				"This is email body",
//				"This is email subject");
//
//}




package com.hrlc.compliance;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;

import com.hrlc.compliance.service.EmailService;

import jakarta.mail.MessagingException;

@SpringBootApplication
public class ComplianceApplication {

	@Autowired
	private EmailService senderService;
	public static void main(String[] args) {
		
		SpringApplication.run(ComplianceApplication.class, args);
		EmailService emailSender = new EmailService();
	     String recipientEmail = "recipient@example.com"; // Replace with recipient's email address
	     String subject = "Test Email";
	     String body = "This is a test email sent from JavaMail.";
	     emailSender.sendEmail(recipientEmail, subject, body);
	}
//	@EventListener(ApplicationReadyEvent.class)
//	public void triggerMail() throws MessagingException {
//		senderService.sendSimpleEmail("puthachennakesavareddy@gmail.com",
//				"This is email body 232",
//				"This is email subject");
//
//}
}

Description:

Field senderService in com.hrlc.compliance.ComplianceApplication required a bean of type 'com.hrlc.compliance.service.EmailService' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.hrlc.compliance.service.EmailService' in your configuration.




EmailSender emailSender = new EmailSender();
	     String recipientEmail = "recipient@example.com"; // Replace with recipient's email address
	     String subject = "Test Email";
	     String body = "This is a test email sent from JavaMail.";
	     emailSender.sendEmail(recipientEmail, subject, body);


import j<dependency>
    <groupId>com.sun.mail</groupId>
    <artifactId>javax.mail</artifactId>
    <version>1.6.2</version>
</dependency>ava.util.Properties;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class EmailSender {

    public void sendEmail(String recipientEmail, String subject, String body) {
        // Set mail server properties
        Properties props = new Properties();
        props.put("mail.smtp.host", "smtp.east.ssp.aws.gwl.com");
        props.put("mail.smtp.auth", "true");
        props.put("mail.smtp.port", "25");

        // Create session with authentication
        Session session = Session.getInstance(props, new Authenticator() {
            protected PasswordAuthentication getPasswordAuthentication() {
                return new PasswordAuthentication("service-ascscripting", "Scriptin1");
            }
        });

        try {
            // Create a message
            Message message = new MimeMessage(session);
            message.setFrom(new InternetAddress("paul.raab@empower-retirement.com"));
            message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(recipientEmail));
            message.setSubject(subject);
            message.setText(body);

            // Send the message
            Transport.send(message);

            System.out.println("Email sent successfully to " + recipientEmail);
        } catch (MessagingException e) {
            System.out.println("Failed to send email: " + e.getMessage());
        }
    }
}




/*
	 * Send an email if number of tries without success is equal to 5
	 */
	private void sendEmail(int status2, String string) {
 
		Properties props = System.getProperties();
		//		props.put("mail.smtp.host", "mailhost.gwl.com");
		props.put("mail.smtp.host", "smtp.east.ssp.aws.gwl.com");
		props.put("mail.smtp.auth", "true");
		props.put("mail.debug", "true");
		props.put("mail.smtp.port", "25");
		//		Session session = Session.getDefaultInstance(props, null);
 
		Session session = Session.getDefaultInstance(props,
				new javax.mail.Authenticator() {
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication("service-ascscripting", "Scriptin1");
			}
		});
 
		// Define message
		MimeMessage message = new MimeMessage(session);
 
		// Set the from address
		try {
			message.setFrom(new InternetAddress("paul.raab@empower-retirement.com"));
 
			// Set the to address
			if (senderEmailID != null) {
				message.addRecipient(Message.RecipientType.TO, new InternetAddress(senderEmailID));
			}
			// Set the to address
			message.addRecipient(Message.RecipientType.CC, new InternetAddress("paul.raab@empower-retirement.com"));
			String msgStr = null;
 
			/*
			 * Success
			 */
			if (status2 == 0) {
 
				// Set the subject
				message.setSubject("Successful transmission - Compliance DocuSign");
 
				// Set the content
				msgStr = "This email is being sent to you after a successful transmission of\n" +
"your DocuSign document(s).\n" +
						string +"\n" +
"The details of this DocuSign order are as follows:\n" +
"\n" +
"PlanNumber: " + PlanNumber + "\n" +
"ISISReq_ID: " + ISISReq_ID + "\n" +
"DocuHttpStatus: " + DocuHttpStatus + "\n" +
"DocuStatus: " + DocuStatus + "\n" +
"DocuCount: " + DocuCount + "\n" +
"DocuErrorDetails: " + DocuErrorDetails + "\n";
			}
 
			/*
			 * Failure
			 */
			else if (status2 ==1) {
				// Set the subject
				message.setSubject("Validation Error - Compliance DocuSign");
 
				// Set the content
				msgStr = "This email is being sent to you due to a validation error for a DocuSign\n" +
"document(s) that you are trying to send. There will be no further automatic\n" +
"attempts to send this document. Please investigate this issue and take corrective\n" +
"action. \n" +
"Cause: " + string + "\n" +
"The details of this DocuSign order are as follows:\n" +
"\n" +
"PlanNumber: " + PlanNumber + "\n" +
"ISISReq_ID: " + ISISReq_ID + "\n" +
"DocuHttpStatus: " + DocuHttpStatus + "\n" +
"DocuStatus: " + DocuStatus + "\n" +
"DocuCount: " + DocuCount + "\n" +
"DocuErrorDetails: " + DocuErrorDetails + "\n";
			}
 
			/*
			 * Failure
			 */
			else if (status2 == 2) {
 
				// Set the subject
				message.setSubject("Transmission error - Compliance DocuSign");
 
				// Set the content
				msgStr = "This email is being sent to you due to a transmission error for a DocuSign\n" +
"document that you are trying to send. There will be no further automatic\n" +
"attempts to send this document. Please investigate this issue and take corrective\n" +
"action. \n" +
"Cause: " + string + "\n" +
"The details of this DocuSign order are as follows:\n" +
"\n" +
"PlanNumber: " + PlanNumber + "\n" +
"ISISReq_ID: " + ISISReq_ID + "\n" +
"DocuHttpStatus: " + DocuHttpStatus + "\n" +
"DocuStatus: " + DocuStatus + "\n" +
"DocuCount: " + DocuCount + "\n" +
"DocuErrorDetails: " + DocuErrorDetails + "\n";
			}
 
			message.setText(msgStr);
 
			// Send message
			Transport.send(message);
 
		} catch (AddressException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (MessagingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
 

		<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-mail</artifactId>
</dependency>

package com.sample;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;

import jakarta.mail.MessagingException;

@SpringBootApplication
public class DemoApplication {

	@Autowired
	private MailService senderService;
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
	@EventListener(ApplicationReadyEvent.class)
	public void triggerMail() throws MessagingException {
		senderService.sendSimpleEmail("puthachennakesavareddy@gmail.com",
				"This is email body",
				"This is email subject");

}
}


package com.sample;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;

import jakarta.mail.MessagingException;

@SpringBootApplication
public class DemoApplication {

	@Autowired
	private MailService senderService;
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
	@EventListener(ApplicationReadyEvent.class)
	public void triggerMail() throws MessagingException {
		senderService.sendSimpleEmail("puthachennakesavareddy@gmail.com",
				"This is email body",
				"This is email subject");

}
}



spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=chennakesava13579@gmail.com
spring.mail.password=idbn xoed otoz lqiq
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

package com.sample;



import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;


import java.io.File;

@Service
public class MailService {
    @Autowired
    private JavaMailSender mailSender;

    public void sendSimpleEmail(String toEmail,
                                String subject,
                                String body
    ) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setFrom("chennakesava13579@gmail.com");
        message.setTo(toEmail);
        message.setText(body);
        message.setSubject(subject);
        mailSender.send(message);
        System.out.println("Mail Send...");


    }

    }
package com.sample;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;

import jakarta.mail.MessagingException;

@SpringBootApplication
public class DemoApplication {

	@Autowired
	private MailService senderService;
	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
	@EventListener(ApplicationReadyEvent.class)
	public void triggerMail() throws MessagingException {
		senderService.sendSimpleEmail("puthachennakesavareddy@gmail.com",
				"This is email body",
				"This is email subject");

}
}



package com.hrlc.compliance.entity;



import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;

@Entity
public class PlanInfo {
	 	@Id
	 	@GeneratedValue(strategy = GenerationType.IDENTITY)
	 	private int planInfoID;
	 	@OneToOne
	 	private Plans plans;
	 	
	    public Plans getPlans() {
			return plans;
		}

		public void setPlans(Plans plans) {
			this.plans = plans;
		}
		private String evId;
	    private String planName;
	    private String irsrlCode;
	    private String provCompany;
	    private String prodId;
	    private String statusCode;
	    private String dpDateTime;
	    private String rolloverInd;
	    private String gaId;
	    private String clientName;
	    private String firstLineMailing;
	    private String scndLineMailing;
	    private String city;
	    private String stateCode;
	    private String zipCode;
	    private String country;
	    private String internalComplianceInd;
	    private String planAnnivDate;
	    private String estNumberOfParticipants;
	    private String estPlanAssets;
	    private LocalDate estImplementationDate;
	    private String subsetCashCode;
	    private String clientEntityType;
	    private String tpaFirmId;
		
	    
	    
	    public String getEvId() {
	        return evId;
	    }

	    public void setEvId(String evId) {
	        this.evId = evId;
	    }
		public String getPlanName() {
			return planName;
		}
		public void setPlanName(String planName) {
			this.planName = planName;
		}
		public String getIrsrlCode() {
			return irsrlCode;
		}
		public void setIrsrlCode(String irsrlCode) {
			this.irsrlCode = irsrlCode;
		}
		public String getProvCompany() {
			return provCompany;
		}
		public void setProvCompany(String provCompany) {
			this.provCompany = provCompany;
		}
		public String getProdId() {
			return prodId;
		}
		public void setProdId(String prodId) {
			this.prodId = prodId;
		}
		public String getStatusCode() {
			return statusCode;
		}
		public void setStatusCode(String statusCode) {
			this.statusCode = statusCode;
		}
		public String getDpDateTime() {
			return dpDateTime;
		}
		public void setDpDateTime(String dpDateTime) {
			this.dpDateTime = dpDateTime;
		}
		public String getRolloverInd() {
			return rolloverInd;
		}
		public void setRolloverInd(String rolloverInd) {
			this.rolloverInd = rolloverInd;
		}
		public String getGaId() {
			return gaId;
		}
		public void setGaId(String gaId) {
			this.gaId = gaId;
		}
		public String getClientName() {
			return clientName;
		}
		public void setClientName(String clientName) {
			this.clientName = clientName;
		}
		public String getFirstLineMailing() {
			return firstLineMailing;
		}
		public void setFirstLineMailing(String firstLineMailing) {
			this.firstLineMailing = firstLineMailing;
		}
		public String getScndLineMailing() {
			return scndLineMailing;
		}
		public void setScndLineMailing(String scndLineMailing) {
			this.scndLineMailing = scndLineMailing;
		}
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public String getStateCode() {
			return stateCode;
		}
		public void setStateCode(String stateCode) {
			this.stateCode = stateCode;
		}
		public String getZipCode() {
			return zipCode;
		}
		public void setZipCode(String zipCode) {
			this.zipCode = zipCode;
		}
		public String getCountry() {
			return country;
		}
		public void setCountry(String country) {
			this.country = country;
		}
		public String getInternalComplianceInd() {
			return internalComplianceInd;
		}
		public void setInternalComplianceInd(String internalComplianceInd) {
			this.internalComplianceInd = internalComplianceInd;
		}
		public String getPlanAnnivDate() {
			return planAnnivDate;
		}
		public void setPlanAnnivDate(String planAnnivDate) {
			this.planAnnivDate = planAnnivDate;
		}
		public String getEstNumberOfParticipants() {
			return estNumberOfParticipants;
		}
		public void setEstNumberOfParticipants(String estNumberOfParticipants) {
			this.estNumberOfParticipants = estNumberOfParticipants;
		}
		public String getEstPlanAssets() {
			return estPlanAssets;
		}
		public void setEstPlanAssets(String estPlanAssets) {
			this.estPlanAssets = estPlanAssets;
		}
		public LocalDate getEstImplementationDate() {
			return estImplementationDate;
		}
		public void setEstImplementationDate(LocalDate estImplementationDate) {
			this.estImplementationDate = estImplementationDate;
		}
		public String getSubsetCashCode() {
			return subsetCashCode;
		}
		public void setSubsetCashCode(String subsetCashCode) {
			this.subsetCashCode = subsetCashCode;
		}
		public String getClientEntityType() {
			return clientEntityType;
		}
		public void setClientEntityType(String clientEntityType) {
			this.clientEntityType = clientEntityType;
		}
		public String getTpaFirmId() {
			return tpaFirmId;
		}
		public void setTpaFirmId(String tpaFirmId) {
			this.tpaFirmId = tpaFirmId;
		}
		@Override
		public String toString() {
			return "PlanInfo [ evId=" + evId + ", planName=" + planName + ", irsrlCode=" + irsrlCode
					+ ", provCompany=" + provCompany + ", prodId=" + prodId + ", statusCode=" + statusCode + ", dpDateTime="
					+ dpDateTime + ", rolloverInd=" + rolloverInd + ", gaId=" + gaId + ", clientName=" + clientName
					+ ", firstLineMailing=" + firstLineMailing + ", scndLineMailing=" + scndLineMailing + ", city=" + city
					+ ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
					+ ", internalComplianceInd=" + internalComplianceInd + ", planAnnivDate=" + planAnnivDate
					+ ", estNumberOfParticipants=" + estNumberOfParticipants + ", estPlanAssets=" + estPlanAssets
					+ ", estImplementationDate=" + estImplementationDate + ", subsetCashCode=" + subsetCashCode
					+ ", clientEntityType=" + clientEntityType + ", tpaFirmId=" + tpaFirmId + "]";
		}
	
}





<td>
                            <select
                                value={item.selectedPerson || `${item.firstName} ${item.lastName}`}
                                onChange={(event) => handlePersonChange(event, index)}
                                style={{ width: '180px' }}
                            >
                                <option value={`${item.firstName} ${item.lastName}`}>
                                    {item.firstName} {item.lastName}
                                </option>
                                {dataFromAPI.map((person, idx) => (
                                    <option key={idx} value={`${person.firstName} ${person.lastName}`}>
                                        {person.firstName} {person.lastName}
                                    </option>
                                ))}
                            </select>
                        </td>




<table>
            <thead>
                <tr className='head'>
                    <td style={{ width: '20%' }}>Person</td>
                    <td style={{ width: '60px' }}>Mail</td>
                    <td style={{ width: '60px' }}>Pre Note</td>
                    <td style={{ width: '140px' }}>Contact Type</td>
                    <td style={{ width: '160px' }}>Notes</td>
                </tr>
            </thead>
            <tbody>
                {dataFromAPI.map((item, index) => (
                    <tr key={index}>
                        <td>
                            <select
                                value={selectedPerson}
                                onChange={handlePersonChange}
                                style={{ width: '180px' }}
                            >
                                <option value="">Select Person</option>
                                {dataFromAPI.map((person, idx) => (
                                    <option key={idx} value={`${person.firstName} ${person.lastName}`}>
                                        {person.firstName} {person.lastName}
                                    </option>
                                ))}
                            </select>
                        </td>
                        <td>
                            <span className='pen-icon' onClick={openModel}><FaPen/></span>
                            <input type="checkbox" />
                        </td>
                        <td><input type="checkbox" /></td>
                        <td>
                            <select name="" id="" style={{ width: '180px' }}>
                                <option value="">option1</option>
                                <option value="">option2</option>
                                <option value="">option3</option>
                            </select>
                        </td>
                        <td><input type="text" /></td>
                    </tr>
                ))}
            </tbody>
        </table>


<table>
            <thead>
                <tr className='head'>
                    <td style={{ width: '20%' }}>Person</td>
                    <td style={{ width: '60px' }}>Mail</td>
                    <td style={{ width: '60px' }}>Pre Note</td>
                    <td style={{ width: '140px' }}>Contact Type</td>
                    <td style={{ width: '160px' }}>Notes</td>
                </tr>
            </thead>
            <tbody>
                {dataFromAPI.map((item, index) => (
                    <tr key={index}>
                        <td>{item.firstName} {item.lastName}</td>
                        <td>
                            <span className='pen-icon' onClick={openModel}><FaPen/></span>
                            <input type="checkbox" />
                        </td>
                        <td><input type="checkbox" /></td>
                        <td>
                            <select name="" id="" style={{ width: '180px' }}>
                                <option value="">option1</option>
                                <option value="">option2</option>
                                <option value="">option3</option>
                            </select>
                        </td>
                        <td><input type="text" /></td>
                    </tr>
                ))}
            </tbody>
        </table>


<table>
                <thead>
                    <tr className='head'>
                        <td style={{width:'20%'}}>Person</td>
                        <td style={{width:'60px'}}> Mail</td>
                        <td style={{width:'60px'}}>Pre Note</td>
                        <td style={{width:'140px'}}>Contact Type</td>
                        <td style={{width:'160px'}}> Notes</td>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            <select name="" id="" style={{width:'180px'}}>
                                <option value="">option1</option>
                                <option value="">option2</option>
                                <option value="">option3</option>
                            </select>
                        </td>
                        <td>
                            <span className='pen-icon' onClick={openModel}><FaPen/></span>
                            <input type="checkbox" />
                        </td>
                        <td><input type="checkbox" /></td>
                        <td>
                            <select name="" id="" style={{width:'180px'}}>
                                <option value="">option1</option>
                                <option value="">option2</option>
                                <option value="">option3</option>
                            </select>
                        </td>
                        <td><input type="text" /></td>
                        
                    </tr>



useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get("http://localhost:8082/id/" + props.currentplan);
                console.log(props.currentplan);
                console.log("response is", response.data); // Access response.data to print the response data
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, [props.currentplan])

useEffect(()=>{
        try {
            const response = axios.get("http://localhost:8082/id/"+props.currentplan);
            console.log(props.currentplan);
            console.log("response is"+response);
        } catch (error) {
            console.error('Error fetching data:', error);
        }
       
    },[])

package com.hrlc.compliance.entity;


import java.util.ArrayList;
import java.util.List;

import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.OneToOne;

@Entity
public class ContactInfo {
	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	private int contactInfoID;
	
	@ManyToOne
	@JoinColumn(name = "planId")
	private Plans plans;
	
 	
    public int getContactInfoID() {
		return contactInfoID;
	}

	public void setContactInfoID(int contactInfoID) {
		this.contactInfoID = contactInfoID;
	}

	public Plans getPlans() {
		return plans;
	}

	public void setPlans(Plans plans) {
		this.plans = plans;
	}

	private String contactId;
    private String firstName;
    private String lastName;
    private String jobTitle;
    private String companyName;
    private String firstLineMailing;
    private String secondLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String phoneNbr;
    private String faxNbr;
    private String emailAddress;
    
    @OneToMany(mappedBy = "contactInfo")
    private List<ContactRole> contactRoles = new ArrayList<>();
    
    
    public List<ContactRole> getContactRoles() {
		return contactRoles;
	}

	public void setContactRoles(List<ContactRole> contactRoles) {
		this.contactRoles = contactRoles;
	}

	public String getContactId() {
        return contactId;
    }

    public void setContactId(String contactId) {
        this.contactId = contactId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getFirstLineMailing() {
        return firstLineMailing;
    }

    public void setFirstLineMailing(String firstLineMailing) {
        this.firstLineMailing = firstLineMailing;
    }

    public String getSecondLineMailing() {
        return secondLineMailing;
    }

    public void setSecondLineMailing(String secondLineMailing) {
        this.secondLineMailing = secondLineMailing;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getStateCode() {
        return stateCode;
    }

    public void setStateCode(String stateCode) {
        this.stateCode = stateCode;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhoneNbr() {
        return phoneNbr;
    }

    public void setPhoneNbr(String phoneNbr) {
        this.phoneNbr = phoneNbr;
    }

    public String getFaxNbr() {
        return faxNbr;
    }

    public void setFaxNbr(String faxNbr) {
        this.faxNbr = faxNbr;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

//    public List<String> getContactRoles() {
//        return contactRoles;
//    }
//
//    public void setContactRoles(List<String> contactRoles) {
//        this.contactRoles = contactRoles;
//    }
}
----------------
package com.hrlc.compliance.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.OneToOne;

@Entity
public class Plans {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private int planId;
	private String plannumber;
	
	
	

	public int getPlanId() {
		return planId;
	}

	public void setPlanId(int planId) {
		this.planId = planId;
	}

	public String getPlanNumber() {
		return plannumber;
	}

	public void setPlanNumber(String planNumber) {
		this.plannumber = planNumber;
	}

	@Override
	public String toString() {
		return "Plans [planId=" + planId + ", planNumber=" + plannumber + "]";
	}

	
	
	

}
------------------
package com.hrlc.compliance.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;

public interface ContactInfoRepository extends JpaRepository<ContactInfo, String>{
//	@Query("select ci from ContactInfo ci WHERE CI.plans.planId=:id")
	List<ContactInfo> findByPlanId(int id);
	
}






org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'fileprocess': Unsatisfied dependency expressed through field 'yourService': Error creating bean with name 'xmlService': Unsatisfied dependency expressed through field 'contactInfoRepo': Error creating bean with name 'contactInfoRepository' defined in com.hrlc.compliance.repository.ContactInfoRepository defined in @EnableJpaRepositories declared on JpaRepositoriesRegistrar.EnableJpaRepositoriesConfiguration: Could not create query for public abstract java.util.List com.hrlc.compliance.repository.ContactInfoRepository.findByPlanId(int); Reason: Validation failed for query for method public abstract java.util.List com.hrlc.compliance.repository.ContactInfoRepository.findByPlanId(int)

public class ContactInfo {
	@Id
 	@GeneratedValue(strategy = GenerationType.IDENTITY)
 	private int contactInfoID;
	
	@ManyToOne
	@JoinColumn(name = "plan_id")
	private Plans plans;


package com.hrlc.compliance.service;
import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.ContactRole;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.Plans;
//import com.hrlc.compliance.entity.Plans;
import com.hrlc.compliance.entity.UserInfo;

import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.ContactRoleRepo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.PlanRepo;
import com.hrlc.compliance.repository.UserInfoRepository;


@Service
public class xmlService {
	@Autowired
	private UserInfoRepository userInfoRepo;
	
	@Autowired
	private	PlanInfoRepository planInfoRepo;
	
	@Autowired
	private ContactInfoRepository contactInfoRepo;
	@Autowired
	private ContactRoleRepo contactRoleRepo;
	
	@Autowired
	private PlanRepo planRepo;
	
	String imp = null;
	
	public List<PlanInfo> getPlanInfo()
	{
		return planInfoRepo.findAll();
	}
	
	public List<ContactInfo> getContactInfo()
	{
		return contactInfoRepo.findAll();
	}
	public List<UserInfo> getUserInfo()
	{
		return userInfoRepo.findAll();
	}
	public ResponseEntity<String> processXmlData(String xmlData) {
		try {
	        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
	        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

	        NodeList parentNodes = document.getElementsByTagName("*"); // Get all parent nodes

	        for (int i = 0; i < parentNodes.getLength(); i++) {
	            Element parent = (Element) parentNodes.item(i);

	            switch (parent.getTagName()) {
	                case "user_info":
	                    saveUserInfo(parent);
	                    break;
	                case "plan_info":
	                    savePlanInfo(parent);
	                    break;
	                case "contact_info":
	                    saveContactInfo(parent);
	                    break;
	                
	            }
	        }

	        return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

	private void saveUserInfo(Element parent) {
	    UserInfo userInfo = new UserInfo();

	    userInfo.setLogonId(getElementValue(parent, "logon_id"));
	    userInfo.setLastName(getElementValue(parent, "last_name"));
	    userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
	    userInfo.setJobTitle(getElementValue(parent, "job_title"));
	    userInfo.setMiddleName(getElementValue(parent, "middle_name"));
	    userInfo.setAreaCode(getElementValue(parent, "area_code"));
	    userInfo.setFirstName(getElementValue(parent, "first_name"));
	    userInfo.setEmailAddress(getElementValue(parent, "email_address"));
	    userInfoRepo.save(userInfo);
	    
	}
	
	private void savePlanInfo(Element parent) {
		PlanInfo planInfo = new PlanInfo();
		Plans plans = new  Plans();
		String ga_id=getElementValue(parent, "ga_id");
		
			
				plans.setPlanNumber(ga_id);
				planRepo.save(plans);
		 imp=ga_id;
		

		//setting plan_info id
		Plans plan1 = planRepo.findByPlannumber(ga_id);
		System.out.println("planinfo"+plan1);
		planInfo.setPlans(plan1);
		planInfo.setEvId(getElementValue(parent,"ev_id"));
	 	planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfoRepo.save(planInfo);
	}

	private void saveContactInfo(Element parent)
	{
		 ContactInfo contactInfo = new ContactInfo();
		 
		//setting plan_info id
		Plans plan1 = planRepo.findByPlannumber(imp);
		System.out.println("contact in "+plan1+"and imp is "+imp);
			contactInfo.setPlans(plan1);
         contactInfo.setContactId(getElementValue(parent, "contact_id"));
         contactInfo.setFirstName(getElementValue(parent, "first_name"));
         contactInfo.setLastName(getElementValue(parent, "last_name"));
         contactInfo.setJobTitle(getElementValue(parent, "job_title"));
         contactInfo.setCompanyName(getElementValue(parent, "company_name"));
         contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
         contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
         contactInfo.setCity(getElementValue(parent, "city"));
         contactInfo.setStateCode(getElementValue(parent, "state_code"));
         contactInfo.setZipCode(getElementValue(parent, "zip_code"));
         contactInfo.setCountry(getElementValue(parent, "country"));
         contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
         contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
         contactInfo.setEmailAddress(getElementValue(parent, "email_address"));

//          Assuming contact_roles is a list of strings
//         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
//         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
//             contactInfo.getContactRoles().add(contactRoleNodes.item(i).getTextContent());
//         }

         contactInfoRepo.save(contactInfo);
         
         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
             Element contactRoleElement = (Element) contactRoleNodes.item(i);
             String role = contactRoleElement.getTextContent();
             
             // Create a new ContactRole entity
             ContactRole contactRole = new ContactRole();
             contactRole.setRole(role);
             contactRole.setContactInfo(contactInfo); // Set the ContactInfo
//             System.out.println("dub");
             // Save the ContactRole
             contactRoleRepo.save(contactRole);
         }
	}

	private String getElementValue(Element parseElement, String childTagName) {
	    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
	    if (childNodes.getLength() > 0) {
	        return childNodes.item(0).getTextContent();
	    }
	    return null;
	}
	
	public  PlanInfo findbygaid(String GaId){
		return planInfoRepo.findByGaId(GaId);
	}
	
	
}
	



--------------------------------



<div className="search">
                            <input className='search-btn' type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />
                            <select className='option' value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                                <option value="planId">SearchID</option>
                                <option value="planNumber">Search by Plan Number</option>
                            </select>
                        </div>

import React, { useState } from 'react';

function FileOpener() {
  const [fileContent, setFileContent] = useState("");

  const handleButtonClick = async () => {
    try {
      const response = await fetch('/path/to/your/file.txt'); // Replace with the actual path to your file
      if (!response.ok) {
        throw new Error('Failed to fetch file');
      }
      const content = await response.text();
      setFileContent(content);
    } catch (error) {
      console.error('Error fetching file:', error);
    }
  };

  return (
    <div>
      <button onClick={handleButtonClick}>Open File</button>
      <div>{fileContent}</div>
    </div>
  );
}

export default FileOpener;







import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './Home1.css';
import myimage from './logo-new.png';

const Home1 = () => {
    const [currentPlan, setCurrentPlan] = useState();
    const [currentPlanInfo, setCurrentPlanInfo] = useState();
    const [newPlan, setNewPlan] = useState();
    const [newPlanInfo, setNewPlanInfo] = useState();
    const [clickedPage, setClickedPage] = useState();
    const navigate = useNavigate();
    const [sortOrder, setSortOrder] = useState("desc");
    const [isTestVisible, setIsTestVisible] = useState(false);

    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId');
    const [filteredPlans, setFilteredPlans] = useState([]);
    const [isDataFetched, setIsDataFetched] = useState(false);
    const modalRef = useRef(null);

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        filterPlans(value, searchBy);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        filterPlans(searchQuery, value);
    };

    const filterPlans = (query, searchBy) => {
        if (!newPlan) return;
        
        const filtered = newPlan.filter(plan => {
            const searchValue = query.toLowerCase();
            if (searchBy === 'planId') {
                return plan.planId.toString().includes(searchValue);
            } else {
                return plan.planNumber.toLowerCase().includes(searchValue);
            }
        });
        setFilteredPlans(filtered);
    };

    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await axios.get("http://localhost:8082/getplans");
                setNewPlan(response.data);
                setIsDataFetched(true);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        };

        fetchData();
    }, []);

    useEffect(() => {
        if (isDataFetched) {
            filterPlans(searchQuery, searchBy);
        }
    }, [isDataFetched, searchQuery, searchBy]);

    const tohome = () => {
        console.log("going home");
        setClickedPage(null);
        navigate("/Home");
    };

    const toggleSortOrder = () => {
        setSortOrder(sortOrder === "asc" ? 'desc' : 'asc');
    };

    const handleSort = (property) => {
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        toggleSortOrder(); // Toggle sorting order after sorting
    };

    return (
        <div className='main'>
            <div className="navbar">
                <div className="logo">
                    <img src={myimage} alt="Empower" />
                    <h1>Compliance</h1>
                </div>
                <div className="right-btns">
                    <button className='btn01' onClick={tohome}>Home</button>
                    <button className='btn01' onClick={() => setClickedPage("planinfo")}>Plan Info</button>
                    <button className='btn01' onClick={() => setClickedPage("setup")}>SetUp</button>
                    <button className='btn01' onClick={() => setClickedPage("pye")}>PYE</button>
                    <button className='btn01' onClick={() => setClickedPage("eventlog")}>Event Log</button>
                    <button className='btn01'>Contacts</button>
                    <button className='btn01'>Amendments</button>
                    <button className='btn01'>Test</button>
                </div>
            </div>
            <div className="bottom">
                <div className="btm-left">
                    <div className="left-up">
                        <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />
                        {filteredPlans.length > 0 &&
                            <ul>
                                {filteredPlans.map(plan => (
                                    <li key={plan.planId}>
                                        Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                                    </li>
                                ))}
                            </ul>
                        }
                    </div>
                    <div className="left-down">
                        <button className='btn01' onClick={() => handleSort('planId')}>Sort by Plan ID </button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Sort by Plan Number </button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans By Client</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans In StartUp</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>BY Institution</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Contacts</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>By Analyst</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Termed Plans</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans w/o Primary Contacts</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Deleted Plans</button>
                        <button className='btn01' onClick={() => setClickedPage('search')}>Search</button>
                    </div>
                </div>
                <div className="btm-right">
                    {clickedPage === 'search' && <Searching plan={newPlan} />}
                    {clickedPage === "planinfo" && <Testing CurrentPLanInfo={currentPlanInfo} />}
                    {clickedPage === "setup" && <NewSetup />}
                    {clickedPage === "pye" && <PYE />}
                    {clickedPage === "eventlog" && <EventLog />}
                </div>
                {filteredPlans.length > 0 && (
                    <div className="modal" ref={modalRef}>
                        <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                            <option value="planId">Search by Plan ID</option>
                            <option value="planNumber">Search by Plan Number</option>
                        </select>
                        <ul>
                            {filteredPlans.map(plan => (
                                <li key={plan.planId}>
                                    Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                                </li>
                            ))}
                        </ul>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Home1;

--------------------
import React, { useEffect, useState  ,useRef} from 'react';
import myimage from'./logo-new.png';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Modal from 'react-modal';

import {  FaFolder } from "react-icons/fa";
import Testing from './Testing';
import SetUp from './SetUp';
import PYE from './PYE';
import EventLog from './EventLog';
import NewSetup from './NewSetup';
import Searching from './Searching';
import './Home1.css'
const Home1 = () => {
    const [currentPlan,setCurrentPlan]= useState();
    const [currentPlanInfo,setCurrentPlanInfo] = useState();
    const [newPlan,setNewPlan]=useState();
    const [newPlanInfo,setNewPlanInfo]=useState();
    const [clickedPage,setClickedPage]=useState();
    const navigate=useNavigate();
    const [sortOrder,setSortOrder]=useState("desc");
    const [isTestVisible,setIsTestVisible]= useState(false);

// ---searching---
// const [newPlan, setNewPlan] = useState(props.plan);

const [searchQuery, setSearchQuery] = useState('');
const [searchBy, setSearchBy] = useState('planId'); // Default search by plan ID
const [filteredPlans, setFilteredPlans] = useState(newPlan);
const modalRef = useRef(null);

const handleSearchChange = (e) => {
    const value = e.target.value;
    setSearchQuery(value);
    filterPlans(value, searchBy);
};

const handleSearchByChange = (value) => {
    setSearchBy(value);
    filterPlans(searchQuery, value);
};

const filterPlans = (query, searchBy) => {
    const filtered = newPlan.filter(plan => {
        const searchValue = query.toLowerCase();
        if (searchBy === 'planId') {
            return plan.planId.toString().includes(searchValue);
        } else {
            return plan.planNumber.toLowerCase().includes(searchValue);
        }
    });
    setFilteredPlans(filtered);
};

useEffect(() => {
    const handleClickOutside = (event) => {
        if (modalRef.current && !modalRef.current.contains(event.target)) {
            setSearchQuery('');
            setFilteredPlans(newPlan);
        }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
        document.removeEventListener('mousedown', handleClickOutside);
    };
}, [newPlan]);
    
  useEffect(()=>{
    
    async function getdata(){
    await axios.get("http://localhost:8082/getplans")
    .then(res=>{
        // console.log("plan is"+newPlan);
        setNewPlan(res.data)
       
        
        })
    .catch(err =>{console.log(err)
    })
    }
    getdata();
     console.log("plan is"+newPlan);
  async function getPlanInfodata(){
    await axios.get("http://localhost:8082/getPlanInfo")
    .then(res=>{
       
        setNewPlanInfo(res.data)
        })
    .catch(err =>{console.log(err)
    })
    }
    getPlanInfodata();
},[])
    const handleButtonClick= ()=>{
    setIsTestVisible(!isTestVisible);

    }
    function inputfield(obj){
        setCurrentPlan(obj);
        
        var output= newPlanInfo?.filter((plan)=>{
            
            return obj.planNumber===plan.gaId;
           
        })
        console.log("clicked plan is ",output[0]);
        setCurrentPlanInfo(output[0]);
        
    }
   
    
    const toggleSortOrder=()=>{
        setSortOrder(sortOrder==="asc"?'desc':'asc');
    }
    const handleSort=(property)=>{
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        toggleSortOrder(); // Toggle sorting order after sorting
    }
    function tohome()
    {
        console.log("going home");
        setClickedPage(null);
        navigate("/Home")
    }
  return (
    <div className='main'>
        <div className="navbar">
            <div className="logo">
                <img  src={myimage} alt="Empower"></img>
                <h1>Compliance</h1>
            </div>
            <div className="right-btns">
                <button className='btn01' onClick={tohome}>Home</button>
                    <button className='btn01' onClick={()=>setClickedPage("planinfo")}>Plan Info</button>
                    <button className='btn01' onClick={()=>setClickedPage("setup")}>SetUp</button>
                    <button className='btn01' onClick={()=>setClickedPage("pye")}>PYE</button>
                    <button className='btn01' onClick={()=>setClickedPage("eventlog")}>Event Log</button>
                    <button className='btn01'>Contacts</button>
                    <button className='btn01'>Amendments</button>
                    <button className='btn01'>Test</button>  
            </div>
        </div>
        <div className="bottom">
            <div className="btm-left">
                <div className="left-up">
                    <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />
                    {
                        // newPlan?.map((obj)=>(
                        //     <div className='side1style'>
                        //         <span style={{paddingRight:"10px"}}><FaFolder/></span><button style={{border:"none",background:"none"}} onClick={()=>inputfield(obj)} ><span> {obj.planId} {obj.planNumber}</span></button>
                        //     </div>
                        // ))
                        <ul>
                        {filteredPlans.map(plan => (
                            <li key={plan.planId}>
                                Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                            </li>
                        ))}
                    </ul>
                    }
                </div>
                {/* -----left down---- */}
                
                <div className="left-down">
                    
                    {/* Button to sort by planId */}
                    <button className='btn01'  onClick={() => handleSort('planId')}>Sort by Plan ID </button>
                    {/* Button to sort by planNumber */}
                    <button className='btn01'  onClick={() => handleSort('planNumber')}>Sort by Plan Number </button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>Plans By Client</button>
                    <button className='btn01' onClick={() => handleSort('planNumber') }>Plans In StartUp</button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>BY Institution</button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>Contacts</button>
                    <button className='btn01' onClick={() => handleSort('planNumber')}>By Analyst</button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>Termed Plans</button>
                    <button className='btn01' onClick={() => handleSort('planNumber') }>Plans w/o Primary Contacts</button>
                    <button className='btn01' onClick={() => handleSort('planNumber') }>Deleted Plans</button>
                    <button className='btn01' onClick={()=>{setClickedPage('search')}}>Search</button></div>
            </div>
            <div className="btm-right">
                
                    {/* {isTestVisible && <Searching plan={newPlan}/>} */}
                    {clickedPage==='search' &&<Searching plan={newPlan}/>}
                            {/* {true && <Searching/>} */}
                    {clickedPage==="planinfo" && <Testing CurrentPLanInfo={currentPlanInfo}/>} 
                    {clickedPage==="setup" && <NewSetup />}
                    {clickedPage==="pye" && <PYE/>}
                    {clickedPage==="eventlog" && <EventLog/>}
                    
            </div>
            {filteredPlans.length > 0 && (
                <div className="modal" ref={modalRef}>
                    <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                        <option value="planId">Search by Plan ID</option>
                        <option value="planNumber">Search by Plan Number</option>
                    </select>
                    <ul>
                        {filteredPlans.map(plan => (
                            <li key={plan.planId}>
                                Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    </div>
  )
}

export default Home1;






import './NewSetup.css'

function NewSetup(props){
    return(
        <div className="setup"> 
            
            <div className='subright'>
                    <input className='setupinput'/> Implement Mgr
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Transfer Asset Amt
                </div>
                
                <div className='subright'>
                    <input className='setupinput'/> Doc Type
                </div>

                <div className='subright'>
                    <input className='setupinput' type='checkbox'/> Internal Loan Admin
                </div>

                <div className='subright'>
                    <input className='setupinput' type='checkbox'/> Outside Funds
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Service Effective
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Expected First Payroll
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Implementation Type
                </div>

                <div className='subright'>
                    <input className='setupinput' type='checkbox'/> SDA
                </div>

                <div className='subright'>
                    <input  className='setupinput'type='checkbox'/> Modefied SPD
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Compliance Effective
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Deposite Amount
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Conversion Form
                </div>
                <div className='subright'>
                    <input  className='setupinput'type='checkbox'/> GWTC/EMJAY Trustee
                </div>
                <div className='subright'>
                    <input  className='setupinput'type='checkbox'/> Reliance Trust Company
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Plan Effecctive
                </div>

                <div className='subright'>
                    <input className='setupinput'/> # Companies (Merger)
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Employee  Count
                </div>

                <div className='subright'>
                    <div className='subbtn'>
                        <button className='planbtn'> Document Packer Email</button>
                        <button className='planbtn'> Move Electric Files To Imaging</button>
                        <button className='planbtn'> Move Docs To PSC</button>
                    </div>
                    

                </div>
                <div className='subright'>
                    <div className='subbtn'>
                            <button className='planbtn'> Generic  E-Mail</button>
                            <button className='planbtn'> Termination CheckList</button>
                        </div>
                </div>
                <div className='subright'>
                    <div className='subbtn'>
                            <button className='planbtn'> America Funds Forms </button>    
                    </div>
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Installition Note (Double Click to Zoom)
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Edited By
                </div>
                <div className='subright'>
                    <input className='setupinput'/> On
                </div>
                <div className='subright'>
                    <button className='planbtn'>Submit</button>
                </div>
        </div>
    )
}
export default NewSetup;
---------------------------import React, { useState } from 'react';

const Searching = ({ plan, onSearch }) => {
    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId'); // Default search by plan ID

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        onSearch(value, searchBy); // Call the onSearch function passed from the parent component
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        onSearch(searchQuery, value); // Call the onSearch function passed from the parent component
    };

    return (
        <div>
            <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />

            {/* Dropdown to select search by criteria */}
            <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                <option value="planId">Search by Plan ID</option>
                <option value="planNumber">Search by Plan Number</option>
            </select>
            
            {/* Display the filtered plans */}
            <ul>
                {plan.map(plan => (
                    <li key={plan.planId}>
                        Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default Searching;






import React, { useState, useEffect } from 'react';
import myimage from './logo-new.png';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Modal from 'react-modal';
import { FaFolder } from "react-icons/fa";
import Searching from './Searching'; // Importing the Searching component
import './Home1.css';

const Home1 = () => {
    const [currentPlan, setCurrentPlan] = useState();
    const [currentPlanInfo, setCurrentPlanInfo] = useState();
    const [newPlan, setNewPlan] = useState();
    const [newPlanInfo, setNewPlanInfo] = useState();
    const [clickedPage, setClickedPage] = useState();
    const navigate = useNavigate();
    const [sortOrder, setSortOrder] = useState("desc");
    const [isSearchingVisible, setIsSearchingVisible] = useState(false);

    useEffect(() => {
        async function getData() {
            await axios.get("http://localhost:8082/getplans")
                .then(res => {
                    setNewPlan(res.data);
                })
                .catch(err => {
                    console.log(err);
                });
        }
        getData();

        async function getPlanInfoData() {
            await axios.get("http://localhost:8082/getPlanInfo")
                .then(res => {
                    setNewPlanInfo(res.data);
                })
                .catch(err => {
                    console.log(err);
                });
        }
        getPlanInfoData();
    }, []);

    const handleButtonClick = () => {
        setIsSearchingVisible(!isSearchingVisible);
    }

    function inputfield(obj) {
        setCurrentPlan(obj);
        var output = newPlanInfo?.filter((plan) => {
            return obj.planNumber === plan.gaId;
        });
        setCurrentPlanInfo(output[0]);
    }

    const toggleSortOrder = () => {
        setSortOrder(sortOrder === "asc" ? 'desc' : 'asc');
    }

    const handleSort = (property) => {
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        toggleSortOrder();
    }

    function toHome() {
        setClickedPage(null);
        navigate("/Home");
    }

    return (
        <div className='main'>
            <div className="navbar">
                <div className="logo">
                    <img src={myimage} alt="Empower" />
                    <h1>Compliance</h1>
                </div>
                <div className="right-btns">
                    <button className='btn01' onClick={toHome}>Home</button>
                    <button className='btn01' onClick={() => setClickedPage("planinfo")}>Plan Info</button>
                    <button className='btn01' onClick={() => setClickedPage("setup")}>SetUp</button>
                    <button className='btn01' onClick={() => setClickedPage("pye")}>PYE</button>
                    <button className='btn01' onClick={() => setClickedPage("eventlog")}>Event Log</button>
                    <button className='btn01'>Contacts</button>
                    <button className='btn01'>Amendments</button>
                    <button className='btn01'>Search</button>
                </div>
            </div>
            <div className="bottom">
                <div className="btm-left">
                    <div className="left-up">
                        <input type="text" placeholder="Search..." />
                        {newPlan?.map((obj) => (
                            <div className='side1style'>
                                <FaFolder />
                                <button style={{ border: "none", background: "none" }} onClick={() => inputfield(obj)}>
                                    <span> {obj.planId} {obj.planNumber}</span>
                                </button>
                            </div>
                        ))}
                    </div>
                    <div className="left-down">
                        <button className='btn01' onClick={() => handleSort('planId')}>Sort by Plan ID</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Sort by Plan Number</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans By Client</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans In StartUp</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>BY Institution</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Contacts</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>By Analyst</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Termed Plans</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Plans w/o Primary Contacts</button>
                        <button className='btn01' onClick={() => handleSort('planNumber')}>Deleted Plans</button>
                        <button className='btn01' onClick={handleButtonClick}>Search {isSearchingVisible ? 'Visible' : 'Hidden'}</button>
                    </div>
                </div>
                <div className="btm-right">
                    {isSearchingVisible && <Searching plan={newPlan} />}
                    {clickedPage === "planinfo" && <div>Plan Info Component</div>}
                </div>
            </div>
        </div>
    )
}

export default Home1;



-------------

import React, { useState, useRef, useEffect } from 'react';
import './Searching.css'
const Searching = (props) => {
    const [newPlan, setNewPlan] = useState(props.plan);

    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId'); // Default search by plan ID
    const [filteredPlans, setFilteredPlans] = useState(newPlan);
    const modalRef = useRef(null);

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        filterPlans(value, searchBy);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        filterPlans(searchQuery, value);
    };

    const filterPlans = (query, searchBy) => {
        const filtered = newPlan.filter(plan => {
            const searchValue = query.toLowerCase();
            if (searchBy === 'planId') {
                return plan.planId.toString().includes(searchValue);
            } else {
                return plan.planNumber.toLowerCase().includes(searchValue);
            }
        });
        setFilteredPlans(filtered);
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                setSearchQuery('');
                setFilteredPlans(newPlan);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [newPlan]);
console.log("searchinf plans is "+props.plan)
    return (
        
        <div className='search'>
            <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />

            {/* Modal */}
            {filteredPlans.length > 0 && (
                <div className="modal" ref={modalRef}>
                    <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                        <option value="planId">Search by Plan ID</option>
                        <option value="planNumber">Search by Plan Number</option>
                    </select>
                    <ul>
                        {filteredPlans.map(plan => (
                            <li key={plan.planId}>
                                Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

export default Searching;
---------home.jsx----
import React, { useEffect, useState } from 'react';
import myimage from'./logo-new.png';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Modal from 'react-modal';

import {  FaFolder } from "react-icons/fa";
import Testing from './Testing';
import SetUp from './SetUp';
import PYE from './PYE';
import EventLog from './EventLog';
import NewSetup from './NewSetup';
import Searching from './Searching';
import './Home1.css'
const Home1 = () => {
    const [currentPlan,setCurrentPlan]= useState();
    const [currentPlanInfo,setCurrentPlanInfo] = useState();
    const [newPlan,setNewPlan]=useState();
    const [newPlanInfo,setNewPlanInfo]=useState();
    const [clickedPage,setClickedPage]=useState();
    const navigate=useNavigate();
    const [sortOrder,setSortOrder]=useState("desc");
    const [isTestVisible,setIsTestVisible]= useState(false);
    
  useEffect(()=>{
    
    async function getdata(){
    await axios.get("http://localhost:8082/getplans")
    .then(res=>{
        // console.log("plan is"+newPlan);
        setNewPlan(res.data)
       
        
        })
    .catch(err =>{console.log(err)
    })
    }
    getdata();
     console.log("plan is"+newPlan);
  async function getPlanInfodata(){
    await axios.get("http://localhost:8082/getPlanInfo")
    .then(res=>{
       
        setNewPlanInfo(res.data)
        })
    .catch(err =>{console.log(err)
    })
    }
    getPlanInfodata();
},[])
    const handleButtonClick= ()=>{
    setIsTestVisible(!isTestVisible);

    }
    function inputfield(obj){
        setCurrentPlan(obj);
        
        var output= newPlanInfo?.filter((plan)=>{
            
            return obj.planNumber===plan.gaId;
           
        })
        console.log("clicked plan is ",output[0]);
        setCurrentPlanInfo(output[0]);
        
    }
   
    
    const toggleSortOrder=()=>{
        setSortOrder(sortOrder==="asc"?'desc':'asc');
    }
    const handleSort=(property)=>{
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        toggleSortOrder(); // Toggle sorting order after sorting
    }
    function tohome()
    {
        console.log("going home");
        setClickedPage(null);
        navigate("/Home")
    }
  return (
    <div className='main'>
        <div className="navbar">
            <div className="logo">
                <img  src={myimage} alt="Empower"></img>
                <h1>Compliance</h1>
            </div>
            <div className="right-btns">
                <button className='btn01' onClick={tohome}>Home</button>
                    <button className='btn01' onClick={()=>setClickedPage("planinfo")}>Plan Info</button>
                    <button className='btn01' onClick={()=>setClickedPage("setup")}>SetUp</button>
                    <button className='btn01' onClick={()=>setClickedPage("pye")}>PYE</button>
                    <button className='btn01' onClick={()=>setClickedPage("eventlog")}>Event Log</button>
                    <button className='btn01'>Contacts</button>
                    <button className='btn01'>Amendments</button>
                    <button className='btn01'>Test</button>  
            </div>
        </div>
        <div className="bottom">
            <div className="btm-left">
                <div className="left-up">
                    <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />
                    {
                        newPlan?.map((obj)=>(
                            <div className='side1style'>
                                <span style={{paddingRight:"10px"}}><FaFolder/></span><button style={{border:"none",background:"none"}} onClick={()=>inputfield(obj)} ><span> {obj.planId} {obj.planNumber}</span></button>
                            </div>
                        ))
                    }
                </div>
                {/* -----left down---- */}
                
                <div className="left-down">
                    
                    {/* Button to sort by planId */}
                    <button className='btn01'  onClick={() => handleSort('planId')}>Sort by Plan ID </button>
                    {/* Button to sort by planNumber */}
                    <button className='btn01'  onClick={() => handleSort('planNumber')}>Sort by Plan Number </button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>Plans By Client</button>
                    <button className='btn01' onClick={() => handleSort('planNumber') }>Plans In StartUp</button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>BY Institution</button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>Contacts</button>
                    <button className='btn01' onClick={() => handleSort('planNumber')}>By Analyst</button>
                    <button className='btn01'  onClick={() => handleSort('planNumber') }>Termed Plans</button>
                    <button className='btn01' onClick={() => handleSort('planNumber') }>Plans w/o Primary Contacts</button>
                    <button className='btn01' onClick={() => handleSort('planNumber') }>Deleted Plans</button>
                    <button className='btn01' onClick={handleButtonClick}>Search{isTestVisible?true:false}</button></div>
            </div>
            <div className="btm-right">
                
                    {isTestVisible && <Searching plan={newPlan}/>}
                            {/* {true && <Searching/>} */}
                    {clickedPage==="planinfo" && <Testing CurrentPLanInfo={currentPlanInfo}/>} 
                    {clickedPage==="setup" && <NewSetup />}
                    {clickedPage==="pye" && <PYE/>}
                    {clickedPage==="eventlog" && <EventLog/>}

            </div>
        </div>
    </div>
  )
}

export default Home1;
-----css--
*{
    margin: 0;
    padding: 0;
    font-size: 2.5vmin;
}
/* main container */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center; 
    width: 100%;
    margin: auto;
    height: 10vh;
    border-bottom: 1px solid;
    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.5);
    background-color: white;
    color: black;
    position: fixed;
    top: 0;
    z-index: 1000; /* Ensure the navbar appears above other content */
}
/* left container */
.logo{ 
    /* border: 1px solid; */
    width:25% ;
    align-items: center;
    margin-left: 3%;
    font-size: 2.5vmin;
}
.logo img{
    width: 30%;
    /* height: auto;  */
}
/* right container */
.right-btns{
    /* border: 1px solid; */
    display: flex;
    width:50%;
    margin-left: 30px;
    margin-right: 30px;
}
.btn01{
    padding: 5px 10px;
    background: none;
    border: none;
    cursor: pointer;
}
.btn01:hover{
    text-decoration: underline;
}
@media screen and (max-width: 1165px) {
    .right-btns{
        gap: 1px;
    }
    
}
/* ---------------------bottom------------------ */

.bottom {
    display: flex;
    width: 95%;
    height: 88.5%; /* Adjust as needed */
    margin: auto;
    /* border: 1px solid; */
    position: absolute;
    top: 11%; /* Adjust as needed */
    left: 2.5%; /* Adjust as needed */
    overflow: hidden; /* Hide content that overflows the bottom div */
}

.btm-left{
    width: 25%;
    border: 1px solid;
    display: flex;
    flex-direction: column;
    /* height: 89.5vh; */

}
.left-up{
    width: auto;
    border-bottom: 1px solid;
    height: 50%;
    padding: 10px;
}
.left-down{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
}
.btm-right{
    position: relative;
    border: 1px solid red;
}


--------------*{
    margin: 0;
    padding: 0;
}
/* main container */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center; 
    width: 100%;
    margin: auto;
    height: 10vh;
    border-bottom: 1px solid;
    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.5);
    background-color: white;
    color: black;
    position: fixed;
    top: 0;
    z-index: 1000; /* Ensure the navbar appears above other content */
}
/* left container */
.logo{ 
    width:25% ;
    align-items: center;
    margin-left: 3%;
    font-size: 2.5vmin;
}
.logo img{
    width: 100%;
    height: auto; 
}
/* right container */
.right-btns{
    /* border: 1px solid;
    width: 900px; */
    display: flex;
    gap: 6px;
    margin-left: 35%;
    margin-right: 160px;
    /* flex-wrap: wrap; */

}
.btn01{
    padding: 5px 15px;
    background: none;
    border: none;
    cursor: pointer;
}
.btn01:hover{
    text-decoration: underline;
}
@media screen and (max-width: 1165px) {
    .right-btns{
        margin-left: 27%;
        gap: 1px;
    }
    
}
/* ---------------------bottom------------------ */

.bottom {
    display: flex;
    width: 95%;
    height: 88.5%; /* Adjust as needed */
    margin: auto;
    border: 1px solid;
    position: absolute;
    top: 11%; /* Adjust as needed */
    left: 2.5%; /* Adjust as needed */
    overflow: hidden; /* Hide content that overflows the bottom div */
}

.btm-left{
    width: 25%;
    border: 1px solid;
    display: flex;
    flex-direction: column;
    /* height: 89.5vh; */

}
.left-up{
    width: 100%;
    border: 1px solid;
    height: 50%;
}



import React from 'react'
import './NewHome.css'
const NewHome = () => {
  return (
    <div className='main'>
        <div className="navbar">
            <div className="logo">
                <img src="https://www.empower.com/themes/custom/wealth_management_v2/images/branding/logo-new-alt.svg" alt="Empower" />
                <h1>Compliance</h1>
            </div>
            <div className="right-btns">
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
                <button className="btn01">Home</button>
            </div>
        </div>
        <div className="bottom">
            <div className="btm-left">
                <div className="left-up">left up content</div>
                <div className="left-down">left down content</div>
            </div>
            <div className="btm-right">
                right content
            </div>
        </div>
    </div>
  )
}

export default NewHome
-------------------------------
*{
    margin: 0;
    padding: 0;
}
/* main container */
.navbar {
    display: flex;
    justify-content: space-between;
    align-items: center; 
    width: 100%;
    margin: auto;
    height: 10vh;
    border-bottom: 1px solid;
    box-shadow: 0 0 5px 2px rgba(0, 0, 0, 0.5);
    background-color: white;
    color: black;
    position: fixed;
    top: 0;
    z-index: 1000; /* Ensure the navbar appears above other content */
}
/* left container */
.logo{ 
    width:25% ;
    align-items: center;
    margin-left: 20px;
}
.logo img{
    width: 130px;
}
/* right container */
.right-btns{
    /* border: 1px solid; */
    display: flex;
    gap: 6px;
    margin-right: 160px;

}
.btn01{
    padding: 5px 15px;
    background: none;
    border: none;
    cursor: pointer;
}
.btn01:hover{
    text-decoration: underline;
}
/* ---------------------bottom------------------ */

.bottom {
    display: flex;
    width: 95%;
    height: 88.5%; /* Adjust as needed */
    margin: auto;
    border: 1px solid;
    position: absolute;
    top: 11%; /* Adjust as needed */
    left: 2.5%; /* Adjust as needed */
    overflow: hidden; /* Hide content that overflows the bottom div */
}

.btm-left{
    width: 25%;
    border: 1px solid;
    display: flex;
    flex-direction: column;
    /* height: 89.5vh; */

}
.left-up{
    width: 100%;
    border: 1px solid;
    height: 50%;
}




.setup{
    border: 1px solid;
    display: flex;
    flex-direction: column;
    margin-top: 12px;
    position: relative;
    left: 20%;
    width: 100%;
    padding: 10px;
    gap: 2px;
   
}



import React, { useState, useRef, useEffect } from 'react';

const Test = () => {
    const [newPlan, setNewPlan] = useState([
        { planId: 1, planNumber: 'P001' },
        { planId: 2, planNumber: 'P002' },
        { planId: 3, planNumber: 'P003' },
        // Add more objects as needed
    ]);

    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId'); // Default search by plan ID
    const [filteredPlans, setFilteredPlans] = useState(newPlan);
    const modalRef = useRef(null);

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        filterPlans(value, searchBy);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        filterPlans(searchQuery, value);
    };

    const filterPlans = (query, searchBy) => {
        const filtered = newPlan.filter(plan => {
            const searchValue = query.toLowerCase();
            if (searchBy === 'planId') {
                return plan.planId.toString().includes(searchValue);
            } else {
                return plan.planNumber.toLowerCase().includes(searchValue);
            }
        });
        setFilteredPlans(filtered);
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                setSearchQuery('');
                setFilteredPlans(newPlan);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [newPlan]);

    return (
        <div>
            <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />

            {/* Modal */}
            {filteredPlans.length > 0 && (
                <div className="modal" ref={modalRef}>
                    <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                        <option value="planId">Search by Plan ID</option>
                        <option value="planNumber">Search by Plan Number</option>
                    </select>
                    <ul>
                        {filteredPlans.map(plan => (
                            <li key={plan.planId}>
                                Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

export default Test;


import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { FaFolder } from "react-icons/fa";

const NewHome = () => {
    const [newPlan, setNewPlan] = useState([
        { planId: 1, planNumber: 'Plan 1' },
        { planId: 2, planNumber: 'Plan 2' },
        { planId: 3, planNumber: 'Plan 3' },
    ]);
    const [currentPlan, setCurrentPlan] = useState(null);
    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId'); // Default search by plan ID
    const navigate = useNavigate();

    const handleSearchChange = (e) => {
        setSearchQuery(e.target.value);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
    };

    const filterPlans = () => {
        return newPlan.filter(plan => {
            const searchValue = searchQuery.toLowerCase();
            return plan[searchBy].toString().toLowerCase().includes(searchValue);
        });
    };

    const handlePlanClick = (plan) => {
        setCurrentPlan(plan);
        // Implement logic to fetch plan info based on plan
    };

    const navigateToPage = (page) => {
        // Implement navigation logic
    };

    return (
        <div className='he'>
            {/* Your Navigation Component */}
            <div className="nav">
                {/* Your navigation elements */}
            </div>

            <div className="left">
                <div className="leftup">
                    <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />
                    <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                        <option value="planId">Search by Plan ID</option>
                        <option value="planNumber">Search by Plan Number</option>
                    </select>
                    {filterPlans().map((plan) => (
                        <div key={plan.planId} className='side1style'>
                            <FaFolder />
                            <button style={{ border: "none", background: "none" }} onClick={() => handlePlanClick(plan)}>
                                {plan.planId} {plan.planNumber}
                            </button>
                        </div>
                    ))}
                </div>

                <div className="leftdown">
                    <button onClick={() => console.log('Sort clicked')}>Sort</button>
                </div>
            </div>

            {/* Render plan info here */}
        </div>
    );
};

export default NewHome;


-----------
import React, { useEffect, useState } from 'react';
import myimage from'./logo-new.png';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Modal from 'react-modal';

import {  FaFolder } from "react-icons/fa";
import Testing from './Testing';
import SetUp from './SetUp';
import PYE from './PYE';
import EventLog from './EventLog';
import './NewHome.css'
import NewSetup from './NewSetup';
const NewHome = () => {
    const [currentPlan,setCurrentPlan]= useState();
    const [currentPlanInfo,setCurrentPlanInfo] = useState();
    const [newPlan,setNewPlan]=useState();
    const [newPlanInfo,setNewPlanInfo]=useState();
    const [clickedPage,setClickedPage]=useState();
    const navigate=useNavigate();
    const [sortOrder,setSortOrder]=useState("asc");
    
  useEffect(()=>{
    
    async function getdata(){
    await axios.get("http://localhost:8082/getplans")
    .then(res=>{
        // console.log("plan is"+newPlan);
        setNewPlan(res.data)
       
        
        })
    .catch(err =>{console.log(err)
    })
    }
    getdata();
     console.log("plan is"+newPlan);
  async function getPlanInfodata(){
    await axios.get("http://localhost:8082/getPlanInfo")
    .then(res=>{
       
        setNewPlanInfo(res.data)
        })
    .catch(err =>{console.log(err)
    })
    }
    getPlanInfodata();
},[])

    function inputfield(obj){
        setCurrentPlan(obj);
        
        var output= newPlanInfo?.filter((plan)=>{
            
            return obj.planNumber===plan.gaId;
           
        })
        console.log("clicked plan is ",output[0]);
        setCurrentPlanInfo(output[0]);
        
    }
    console.log("plans is "+newPlan);
    console.log("total plans info  ",newPlanInfo);
    function planInfo()
    {
        navigate('/planInfo')
    }
    function setUp()
    {
        navigate("/SetUp")
    }
    // const sorting1=(col)=>
    // {
    //     const sorted=[...newPlan].sort((a,b)=>
    //     a[col]>b[col]?1 :-1);
    //     setNewPlan(sorted)
    // }
    const sorting=(col)=>
    {
            const sorted=[...newPlan].sort((a,b)=>
            a[col]>b[col] ?1 :-1);
            setNewPlan(sorted)
    }
    const toggleSortOrder=()=>{
        setSortOrder(sortOrder==="asc"?'desc':'asc');
    }
    const handleSort=(property)=>{
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        toggleSortOrder(); // Toggle sorting order after sorting
    }
    function tohome()
    {
        console.log("going home");
        setClickedPage(null);
        navigate("/Home")
    }
    
  return (
    <div className='he'> 
        <div className="nav">
            <div className="logo">
            
                <img className="image" src={myimage} alt="not found"></img>
                <h3 className='testing'>Compliance</h3>
            </div>

            <div className="buttons">
                <button className='btn1' onClick={tohome}>Home</button>
                    <button className='btn1' onClick={()=>setClickedPage("planinfo")}>Plan Info</button>
                    <button className='btn1' onClick={()=>setClickedPage("setup")}>SetUp</button>
                    <button className='btn1' onClick={()=>setClickedPage("pye")}>PYE</button>
                    <button className='btn1' onClick={()=>setClickedPage("eventlog")}>Event Log</button>
                    <button className='btn1'>Contacts</button>
                    <button className='btn1'>Amendments</button>
                    <button className='btn1'>Test</button>  
            </div>
        </div>

        <div className="left">
            <div className="leftup">
            {/* <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." /> */}
                {
                    newPlan?.map((obj)=>(
                        <div className='side1style'>
                            <span style={{paddingRight:"10px"}}><FaFolder/></span><button style={{border:"none",background:"none"}} onClick={()=>inputfield(obj)} ><span> {obj.planId} {obj.planNumber}</span></button>
                        </div>
                    ))
                }
            </div>

            <div className="leftdown">
            <div>
                    <i class="jstree-icon jstree-ocl" role="presentation"></i>
                    {/* Button to sort by planId */}
            <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={() => handleSort('planId')}>
                Sort by Plan ID 
            </button>

            {/* Button to sort by planNumber */}
            <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={() => handleSort('planNumber')}>
                Sort by Plan Number 
            </button>
                    {/* <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planId")}}>Plans by Number</button><br/>
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>Plans By Name</button><br/> */}
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>Plans By Client</button><br/>
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>Plans In StartUp</button><br/>
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>BY Institution</button><br/>
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>Contacts</button><br/>
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>By Analyst</button><br/>
                    <button style={{background:"none",border:"none",cursor:"pointer"}} onClick={()=>{sorting("planName")} }>Termed Plans</button><br/>
                    <button onClick={()=>{sorting("planName")} }>Plans w/o Primary Contacts</button><br/>
                    <button onClick={()=>{sorting("planName")} }>Deleted Plans</button><br/>
                
                </div>
            </div>
        </div>

         {clickedPage==="planinfo" && <Testing CurrentPLanInfo={currentPlanInfo}/>} 
        {/* <Testing CurrentPLanInfo={currentPlanInfo}/> */}
    {/* {console.log("test1 "+currentPlanInfo?.evId) */}
        {clickedPage==="setup" && <NewSetup />}
       {clickedPage==="pye" && <PYE/>}
        {clickedPage==="eventlog" && <EventLog/>}
    </div>
  )
}

export default NewHome;

--------css
.he{
    margin: 0px;
}
.nav{
    border: 1px solid;
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin:-8px;
}
.image{
    height: 20px;
    padding-left: 20px;
}
.logo{
    display: flex;
    align-items: center;
    width: 30%;
    max-height: 50px;
    /* border: 1px solid red; */
}

.logo img{
    margin-right: 10px;
}

.buttons{
    display: flex;
    justify-content: space-evenly;
    width: 70%;
    margin-right: 30px;
    /* border: 1px solid green; */
}

.btn1{
    cursor: pointer;
    border: none;
    background-color: rgb(240, 183, 110);
    color: white;
    padding:6px ;
    width: 90px;
}

.left {
   
    min-width: 15;
    border: 1px solid;
    display: flex;
    flex-direction: column;
    width: 20%;
    height: 100%; /* Make the left div occupy full height of its container */
    position: absolute; /* Fixed positioning to ensure full height */
    top: 56px; /* Position it at the top of the viewport */
    left: 0; /* Position it at the left of the viewport */
}

.leftup {
    border: 1px solid red;
    margin: 0px;
    width: 100%; /* Occupy full width of the .left container */
    height: 50%; /* Take 50% of the height of .left container */
    position: absolute;
    top: 0; /* Align at the top of .left container */
    left: 0;
    /* background-color: yellow; */
    overflow: auto;
    
}
.qq{
    margin: 0px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.leftdown {
    border: 1px solid rgb(27, 35, 10);
    width: 100%; /* Occupy full width of the .left container */
    height: 50%; /* Take 50% of the height of .left container */
    position: absolute;
    top: 50%; /* Align at the bottom half of .left container */
    left: 0;
}

@media(max-width:800px){
    .btn1{
        cursor: pointer;
    border: none;
    background-color: rgb(240, 183, 110);
    color: white;
    padding:2px ;
    width: 60px;
    }
}

@media(max-width:550px){
    .btn1{
        cursor: pointer;
    border: none;
    background-color: rgb(240, 183, 110);
    color: rgb(65, 58, 58);
    padding:1px ;
    width: 35px;
    font-size: 10px;
    
    }
}

---
import React, { useState, useRef, useEffect } from 'react';

const Test = () => {
    const [newPlan, setNewPlan] = useState([
        { planId: 1, planNumber: 'P001' },
        { planId: 2, planNumber: 'P002' },
        { planId: 3, planNumber: 'P003' },
        // Add more objects as needed
    ]);

    const [searchQuery, setSearchQuery] = useState('');
    const [searchBy, setSearchBy] = useState('planId'); // Default search by plan ID
    const [filteredPlans, setFilteredPlans] = useState(newPlan);
    const modalRef = useRef(null);

    const handleSearchChange = (e) => {
        const value = e.target.value;
        setSearchQuery(value);
        filterPlans(value, searchBy);
    };

    const handleSearchByChange = (value) => {
        setSearchBy(value);
        filterPlans(searchQuery, value);
    };

    const filterPlans = (query, searchBy) => {
        const filtered = newPlan.filter(plan => {
            const searchValue = query.toLowerCase();
            if (searchBy === 'planId') {
                return plan.planId.toString().includes(searchValue);
            } else {
                return plan.planNumber.toLowerCase().includes(searchValue);
            }
        });
        setFilteredPlans(filtered);
    };

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (modalRef.current && !modalRef.current.contains(event.target)) {
                setSearchQuery('');
                setFilteredPlans(newPlan);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [newPlan]);

    return (
        <div>
            <input type="text" value={searchQuery} onChange={handleSearchChange} placeholder="Search..." />

            {/* Modal */}
            {filteredPlans.length > 0 && (
                <div className="modal" ref={modalRef}>
                    <select value={searchBy} onChange={(e) => handleSearchByChange(e.target.value)}>
                        <option value="planId">Search by Plan ID</option>
                        <option value="planNumber">Search by Plan Number</option>
                    </select>
                    <ul>
                        {filteredPlans.map(plan => (
                            <li key={plan.planId}>
                                Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};

export default Test;



import React, { useState } from 'react';

const YourComponent = () => {
    // Sample initial state
    const [newPlan, setNewPlan] = useState([
        { planId: 1, planNumber: 'P001' },
        { planId: 2, planNumber: 'P002' },
        { planId: 3, planNumber: 'P003' },
        // Add more objects as needed
    ]);

    // State variable to track current sorting order
    const [sortOrder, setSortOrder] = useState('asc');

    // Function to toggle sorting order
    const toggleSortOrder = () => {
        setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    };

    // Function to handle sorting
    const handleSort = (property) => {
        const sortedPlan = [...newPlan].sort((a, b) => {
            if (sortOrder === 'asc') {
                return a[property] > b[property] ? 1 : -1;
            } else {
                return a[property] < b[property] ? 1 : -1;
            }
        });
        setNewPlan(sortedPlan);
        toggleSortOrder(); // Toggle sorting order after sorting
    };

    return (
        <div>
            {/* Button to sort by planId */}
            <button onClick={() => handleSort('planId')}>
                Sort by Plan ID ({sortOrder === 'asc' ? 'Asc' : 'Desc'})
            </button>

            {/* Button to sort by planNumber */}
            <button onClick={() => handleSort('planNumber')}>
                Sort by Plan Number ({sortOrder === 'asc' ? 'Asc' : 'Desc'})
            </button>

            {/* Display sorted data */}
            <ul>
                {newPlan.map(plan => (
                    <li key={plan.planId}>
                        Plan ID: {plan.planId}, Plan Number: {plan.planNumber}
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default YourComponent;


.setup{
    border: 1px solid;
    display: flex;
    flex-direction: column;
    margin-top: 12px;
    position: relative;
    left: 20%;
    width: 100%;
    padding: 10px;
    gap: 2px;
}

import React, { useState } from 'react';
import './AddPlan.css';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Modal from 'react-modal';
import './SetUp.css';

function SetUp(props)
{
    const navigate=useNavigate()
    function Home1()
    {
        return navigate("/Home")
    }
    return (
    <div className='body'>
        
        <div className='rightmenuSU'>
            
                <div className='subright'>
                    <input className='setupinput'/> Implement Mgr
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Transfer Asset Amt
                </div>
                
                <div className='subright'>
                    <input className='setupinput'/> Doc Type
                </div>

                <div className='subright'>
                    <input className='setupinput' type='checkbox'/> Internal Loan Admin
                </div>

                <div className='subright'>
                    <input className='setupinput' type='checkbox'/> Outside Funds
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Service Effective
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Expected First Payroll
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Implementation Type
                </div>

                <div className='subright'>
                    <input className='setupinput' type='checkbox'/> SDA
                </div>

                <div className='subright'>
                    <input  className='setupinput'type='checkbox'/> Modefied SPD
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Compliance Effective
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Deposite Amount
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Conversion Form
                </div>
                <div className='subright'>
                    <input  className='setupinput'type='checkbox'/> GWTC/EMJAY Trustee
                </div>
                <div className='subright'>
                    <input  className='setupinput'type='checkbox'/> Reliance Trust Company
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Plan Effecctive
                </div>

                <div className='subright'>
                    <input className='setupinput'/> # Companies (Merger)
                </div>

                <div className='subright'>
                    <input className='setupinput'/> Employee  Count
                </div>

                <div className='subright'>
                    <div className='subbtn'>
                        <button className='planbtn'> Document Packer Email</button>
                        <button className='planbtn'> Move Electric Files To Imaging</button>
                        <button className='planbtn'> Move Docs To PSC</button>
                    </div>
                    

                </div>
                <div className='subright'>
                    <div className='subbtn'>
                            <button className='planbtn'> Generic  E-Mail</button>
                            <button className='planbtn'> Termination CheckList</button>
                        </div>
                </div>
                <div className='subright'>
                    <div className='subbtn'>
                            <button className='planbtn'> America Funds Forms </button>    
                    </div>
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Installition Note (Double Click to Zoom)
                </div>
                <div className='subright'>
                    <input className='setupinput'/> Edited By
                </div>
                <div className='subright'>
                    <input className='setupinput'/> On
                </div>
                <div className='subright'>
                    <button className='planbtn'>Submit</button>
                </div>
        </div>
    </div>
    )
}
export default SetUp
--------
.rightmenuSU{
    border: 1px solid;
    /* border-top: none; */
    display: flex;
    flex-direction: column;
    margin-top: 12px;
    position: relative;
    left: 20%;
    /* height: 100vh; */
    padding: 10px;
    gap: 2px;
    
}
.subright{
    display: flex;
    justify-content: left;

}
.setupinput{
    margin-right: 5px;
}
.subbtn{
    display: flex;
    justify-content: space-around;
    width: 600px;
    padding: 5px 5px;
    
}


------


<div className='rightmenu'>
            
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.CurrentPLanInfo?.clientName}/>
                        <br/>Client Name
                    </div>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.estNumberOfParticipants}/>
                        <br/>Propective Plan Number
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.estPlanAssets}/>
                        <br/>EIN #
                    </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.CurrentPLanInfo?.provCompany}/>
                        <br/>Institution
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.groupOffice}/>
                        <br/>Group Office
                    </div>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.irsrlCode}/><br/>
                        Plan Type 
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.trustEin}/><br/>
                        Trust Ein
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.subInstitution}/>
                        <br/>Sub Institution
                    </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.complianceAnalyst}/>
                        <br/>Compliance Analyst
                    </div>
                    <div className='row11'><button onClick={activatePlanDocument} className='planbtn'>Plan Document</button></div> 
                     <div className='row11'><button className='planbtn'>Plan Folder</button></div>
                    <div className='row11'><button className='planbtn'>Scan Sheets</button></div>
                    <div className='row11'><button className='planbtn'>Update FTW</button></div> 
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.secondaryCaseload} type='checkbox'/>Secondary Caseload
                    </div>   
                </div> 

                 <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.gwg} type='checkbox'/>GWG
                    </div> 
                    <div className='row11' style={{marginLeft:"120px"}}>
                        <input value={props.currentPlanInfo?.gwgServices}/>
                        <br/>GWG Services
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.gwgWorkTracking}/>
                        <br/>GWG Work Tracking
                    </div> 
                    <div className='row11'><button className='planbtn'>GWG Follow Up</button> </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.planYearEnd} type='date'/>
                        <br/>Plan Year End
                    </div>
                    <div className='row11' style={{marginLeft:"63px"}}>
                        <input value={props.currentPlanInfo?.planTier}/>
                        <br/>Plan Teir
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.irsPlanType}/><br/>
                        IRS Plan Type
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.marketSegment}/><br/>
                        Market Segment
                    </div>
                </div> 
                
                 <div className='row1'>
                    <div className='row11' style={{marginRight:"21px"}}>
                        <input value={props.currentPlanInfo?.institution}/>
                        <br/>Institution
                    </div> 
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.groupOffice}/>
                        <br/>Group Office
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.planType}/><br/>
                        Plan Type
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.trustEin}/><br/>
                        Trust Ein
                    </div> 
                </div> 
                <div className='row1'>
                    <div className='row11'>
                        Plan Characteristics
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.jumbo401k} type='checkbox'/>Jumbo 401(k)
                    </div>
                </div> 

                <div className='row1'>
                    <div className='row11' style={{marginRight:"55px"}}>
                    <input checked={props.currentPlanInfo?.ppsExternal} type='checkbox'/>PPSExternal 
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>PEAK Pilot Plan
                    </div>
                </div> 
                <Modal
                    isOpen={!!planDocumentBtn}
                    onRequestClose={closePlanDocument}
                    contentLabel="modal"
                    className={"modal1"}>
                    {
                        planDocumentBtn &&(<>
                        <div>
                            <h2>File List:</h2>
      
                            <ul>
                                {fileList?.map((file, index) => (
                                <li key={index} onClick={() => openFile(file)}>
                                    {file}
                                </li>
                                ))}
                            </ul>
                            <button className='modalbtn' onClick={closePlanDocument}>close </button> 
                        </div>
                        </>)
                    }
                </Modal> 
                <button className='planbtn'>Submit</button>


----

.nav{
    border: 1px solid;
    display: flex;
    align-items: center;
    justify-content: space-between;
}
.logo{
    display: flex;
    align-items: center;
    width: 30%;
    /* border: 1px solid red; */
}

.logo img{
    margin-right: 10px;
}

.buttons{
    display: flex;
    justify-content: space-evenly;
    width: 50%;
    margin-right: 30px;
    /* border: 1px solid green; */
}

.btn1{
    cursor: pointer;
    border: none;
    background-color: rgb(240, 183, 110);
    color: white;
    padding:6px ;
    width: 90px;
}

.left {
   
    min-width: 15;
    border: 1px solid;
    display: flex;
    flex-direction: column;
    width: 20%;
    height: 100%; /* Make the left div occupy full height of its container */
    position: fixed; /* Fixed positioning to ensure full height */
    top: 60px; /* Position it at the top of the viewport */
    left: 0; /* Position it at the left of the viewport */
}

.leftup {
    border: 1px solid red;
    margin: 0px;
    width: 100%; /* Occupy full width of the .left container */
    height: 50%; /* Take 50% of the height of .left container */
    position: absolute;
    top: 0; /* Align at the top of .left container */
    left: 0;
    background-color: yellow;
    overflow: auto;
    
}
.qq{
    margin: 0px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.leftdown {
    border: 1px solid rgb(27, 35, 10);
    width: 100%; /* Occupy full width of the .left container */
    height: 50%; /* Take 50% of the height of .left container */
    position: absolute;
    top: 50%; /* Align at the bottom half of .left container */
    left: 0;
}

@media(max-width:800px){
    .btn1{
        cursor: pointer;
    border: none;
    background-color: rgb(240, 183, 110);
    color: white;
    padding:2px ;
    width: 60px;
    }
}

@media(max-width:550px){
    .btn1{
        cursor: pointer;
    border: none;
    background-color: rgb(240, 183, 110);
    color: rgb(65, 58, 58);
    padding:1px ;
    width: 35px;
    font-size: 10px;
    
    }
}
=-----------------------------
import React from 'react'
import img from '../assets/react.svg'
import './Home.css'
const Home = () => {
  return (
    <div>
        <div className="nav">
            <div className="logo">
            <img src={img} alt="" />  
            <p>empower</p>
            </div>

            <div className="buttons">
                <button className='btn1' >Home</button>
                <button className='btn1'>About</button>
                <button className='btn1'> Service</button>
                <button className='btn1'>Logout</button>
            </div>
        </div>

        <div className="left">
            <div className="leftup">
               <ul className='qq'>
                <li>name</li>
                <li>age</li>
                </ul> 
            </div>

            <div className="leftdown">
            hello
            </div>
        </div>
    </div>
  )
}

export default Home




import React, { useEffect, useState } from 'react';
import './AddPlan.css';
import myimage from'./logo-new.png';
import { useNavigate } from 'react-router-dom';
import './Testing.css';
import  Plans from './Plans.json'
import PlanInfo from './PlanInfo.json'
import xml from './test_xml.xml'
import {  FaFolder } from "react-icons/fa";
import axios from 'axios';
import Modal from 'react-modal';
import {parseString} from 'xml2js';
function Testing(props)
{
    console.log(" plan info value is "+props.CurrentPLanInfo?.evId);
    const [plans,setPlans]=useState(Plans);
    
    const [newPlan,setNewPlan]=useState();
    const [newPlanInfo,setNewPlanInfo]=useState();
    const [currentPlan,setCurrentPlan]=useState();
    const [planInfo,setPLanInfo] = useState(PlanInfo);
    // const [currentPLanInfo,setCurrentPlanInfo]=useState();
    const [readxml,setReadxml]=useState(null);
    const [loading, setLoading] = useState(true); // Added loading state
    const [planDocumentBtn,setPLanDocumentBtn]=useState();
    const [fileList,setFileList] = useState();

    // console.log("xml is "+readxml);
    const navigate=useNavigate()
    
    function activatePlanDocument()
    {
        setPLanDocumentBtn("activate");
    }
    function closePlanDocument()
    {
        setPLanDocumentBtn(null);
    }
    const openFile = (fileName) => {
        // Download the selected file from the backend
        console.log("lolo boss");
        window.open(`http://localhost:8081/${fileName}`,'_blank');
      };
      async function fetchXml(){
        const response = await fetch(xml);
        const xmldata = await response.text()
        console.log("xml is ",xmldata)
        return xmldata;
    }
    useEffect(()=>{
            async function getdata(){
            await axios.get("http://localhost:8081/getplans")
            .then(res=>{
                console.log("plan is"+newPlan);
                setNewPlan(res.data)
                setLoading(false)
                
                })
            .catch(err =>{console.log(err)
            setLoading(false)})
            }
            getdata();

          async function filedata(){
            await axios.get('http://localhost:8081/list')
            .then(response => setFileList(response.data))
            .catch(error => console.error('Error fetching file list:', error));
            }
            filedata();
          async function getPlanInfodata(){
            await axios.get("http://localhost:8081/getplaninfo")
            .then(res=>{
                console.log("planinfo is"+newPlanInfo);
                setNewPlanInfo(res.data)
                })
            .catch(err =>{console.log(err)
            setLoading(false)})
            }
            getPlanInfodata();

            async function fetchdata()
            {
            const xmldata=await fetchXml();
            parseString(xmldata,(err,result)=>{
                if(!err)
                {
                    setReadxml(result)
                    console.log("result is "+result);
                    console.log(readxml);
                }else{
                    console.error('error parsing ',err);
                }
            })
        }
        
    fetchdata();
    },[])
    
    
    return (
    <div className='body'>
       
           
        <div className='rightmenu'>
            
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.CurrentPLanInfo?.clientName}/>
                        <br/>Client Name
                    </div>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.estNumberOfParticipants}/>
                        <br/>Propective Plan Number
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.estPlanAssets}/>
                        <br/>EIN #
                    </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.CurrentPLanInfo?.provCompany}/>
                        <br/>Institution
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.groupOffice}/>
                        <br/>Group Office
                    </div>
                    <div className='row11'>
                    <input value={props.CurrentPLanInfo?.irsrlCode}/><br/>
                        Plan Type 
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.trustEin}/><br/>
                        Trust Ein
                    </div>
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.subInstitution}/>
                        <br/>Sub Institution
                    </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.complianceAnalyst}/>
                        <br/>Compliance Analyst
                    </div>
                    <div className='row11'><button onClick={activatePlanDocument} className='planbtn'>Plan Document</button></div> 
                     <div className='row11'><button className='planbtn'>Plan Folder</button></div>
                    <div className='row11'><button className='planbtn'>Scan Sheets</button></div>
                    <div className='row11'><button className='planbtn'>Update FTW</button></div> 
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.secondaryCaseload} type='checkbox'/>Secondary Caseload
                    </div>   
                </div> 

                 <div className='row1'>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.gwg} type='checkbox'/>GWG
                    </div> 
                    <div className='row11' style={{marginLeft:"120px"}}>
                        <input value={props.currentPlanInfo?.gwgServices}/>
                        <br/>GWG Services
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.gwgWorkTracking}/>
                        <br/>GWG Work Tracking
                    </div> 
                    <div className='row11'><button className='planbtn'>GWG Follow Up</button> </div>
                    
                </div>
                <div className='row1'>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.planYearEnd} type='date'/>
                        <br/>Plan Year End
                    </div>
                    <div className='row11' style={{marginLeft:"63px"}}>
                        <input value={props.currentPlanInfo?.planTier}/>
                        <br/>Plan Teir
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.irsPlanType}/><br/>
                        IRS Plan Type
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.marketSegment}/><br/>
                        Market Segment
                    </div>
                </div> 
                
                 <div className='row1'>
                    <div className='row11' style={{marginRight:"21px"}}>
                        <input value={props.currentPlanInfo?.institution}/>
                        <br/>Institution
                    </div> 
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.groupOffice}/>
                        <br/>Group Office
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.planType}/><br/>
                        Plan Type
                    </div>
                    <div className='row11'>
                        <input value={props.currentPlanInfo?.trustEin}/><br/>
                        Trust Ein
                    </div> 
                </div> 
                <div className='row1'>
                    <div className='row11'>
                        Plan Characteristics
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.jumbo401k} type='checkbox'/>Jumbo 401(k)
                    </div>
                </div> 

                <div className='row1'>
                    <div className='row11' style={{marginRight:"55px"}}>
                    <input checked={props.currentPlanInfo?.ppsExternal} type='checkbox'/>PPSExternal 
                    </div>
                    <div className='row11'>
                        <input checked={props.currentPlanInfo?.peakPilotPlan} type='checkbox'/>PEAK Pilot Plan
                    </div>
                </div> 
                <Modal
                    isOpen={!!planDocumentBtn}
                    onRequestClose={closePlanDocument}
                    contentLabel="modal"
                    className={"modal1"}>
                    {
                        planDocumentBtn &&(<>
                        <div>
                            <h2>File List:</h2>
      
                            <ul>
                                {fileList?.map((file, index) => (
                                <li key={index} onClick={() => openFile(file)}>
                                    {file}
                                </li>
                                ))}
                            </ul>
                            <button className='modalbtn' onClick={closePlanDocument}>close </button> 
                        </div>
                        </>)
                    }
                </Modal> 
                <button className='planbtn'>Submit</button>



                {/* <br/>
                 <div className='dummyxml'>
                    
                    {console.log("read xml is ",readxml)}
                    {/* {readxml?(<HI language='xml' style={solarizedLight}>{readxml}</HI>):(<p>loading..</p>)}  */}
                     {/* {readxml &&(<pre>{JSON.stringify(readxml,null,2)}</pre>)} */}
                {/* </div> * */} 
            </div>
        </div>
    
    )
}
export default Testing;

------
import React, { useEffect, useState } from 'react';
import myimage from'./logo-new.png';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import Modal from 'react-modal';
import './Testing.css';
import {  FaFolder } from "react-icons/fa";
import Testing from './Testing';
import SetUp from './SetUp';
import PYE from './PYE';
import EventLog from './EventLog';
function Home()
{
    const [currentPlan,setCurrentPlan]= useState();
    const [currentPlanInfo,setCurrentPlanInfo] = useState();
    const [newPlan,setNewPlan]=useState();
    const [newPlanInfo,setNewPlanInfo]=useState();
    const [clickedPage,setClickedPage]=useState();
    const navigate=useNavigate();
    const d="hello boss";
  useEffect(()=>{
    
    async function getdata(){
    await axios.get("http://localhost:8082/getplans")
    .then(res=>{
        // console.log("plan is"+newPlan);
        setNewPlan(res.data)
       
        
        })
    .catch(err =>{console.log(err)
    })
    }
    getdata();
  async function getPlanInfodata(){
    await axios.get("http://localhost:8082/getPlanInfo")
    .then(res=>{
       
        setNewPlanInfo(res.data)
        })
    .catch(err =>{console.log(err)
    })
    }
    getPlanInfodata();
},[])

    function inputfield(obj){
        setCurrentPlan(obj);
        
        var output= newPlanInfo?.filter((plan)=>{
            
            return obj.planNumber===plan.gaId;
           
        })
        console.log("clicked plan is ",output[0]);
        setCurrentPlanInfo(output[0]);
        
    }
    console.log("total plans info  ",newPlanInfo);
    function planInfo()
    {
        navigate('/planInfo')
    }
    function setUp()
    {
        navigate("/SetUp")
    }
    const sorting1=(col)=>
    {
        const sorted=[...newPlan].sort((a,b)=>
        a[col]>b[col]?1 :-1);
        setNewPlan(sorted)
    }
    const sorting=(col)=>
    {
            const sorted=[...newPlan].sort((a,b)=>
            a[col].toLowerCase()>b[col].toLowerCase( ) ?1 :-1);
            setNewPlan(sorted)
    }
    function tohome()
    {
        console.log("going home");
        setClickedPage(null);
        navigate("/Home")
    }
    return (
    <div className='body'>
        <header className="header1">
            <div className='head1'>
                
                <div className='sub0'>
                    <img className="image1" src={myimage} alt="not found"></img>
                    <h3 className='testingP'>Compliance</h3>
                </div>
                <div className='sub01'>
                    <button className='btn1' onClick={tohome}>Home</button>
                    <button className='btn1' onClick={()=>setClickedPage("planinfo")}>Plan Info</button>
                    <button className='btn1' onClick={()=>setClickedPage("setup")}>SetUp</button>
                    <button className='btn1' onClick={()=>setClickedPage("pye")}>PYE</button>
                    <button className='btn1' onClick={()=>setClickedPage("eventlog")}>Event Log</button>
                    <button className='btn1'>Contacts</button>
                    <button className='btn1'>Amendments</button>
                    <button className='btn1'>Test</button>    
                </div>    
            </div>
        </header>
        <div className='planname'>
            planNumber:<input  style={{marginRight:"20px"}} value={currentPlan?.planNumber}/> 
            planId:<input value={currentPlan?.planId}/>   
        </div>
        <div className='leftmenu'>
            <div className='side1'>
                {
                    newPlan?.map((obj)=>(
                        <div className='side1style'>
                            <span style={{paddingRight:"10px"}}><FaFolder/></span><button style={{border:"none",background:"none"}} onClick={()=>inputfield(obj)} ><span> {obj.planId} {obj.planNumber}</span></button>
                        </div>
                    ))
                }
            </div>
            <div className='side2'>
                <div>
                    <i class="jstree-icon jstree-ocl" role="presentation"></i>
                    <button style={{background:"none",border:"none"}}  onClick={()=>{sorting1("planNumber")}}>Plans by Number</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>Plans By Name</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>Plans By Client</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>Plans In StartUp</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>BY Institution</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>Contacts</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>By Analyst</button><br/>
                    <button style={{background:"none",border:"none"}} onClick={()=>{sorting("planName")} }>Termed Plans</button><br/>
                    <button onClick={()=>{sorting("planName")} }>Plans w/o Primary Contacts</button><br/>
                    <button onClick={()=>{sorting("planName")} }>Deleted Plans</button><br/>
                
                </div>
            </div>
        </div>

        {clickedPage==="planinfo" && <Testing CurrentPLanInfo={currentPlanInfo}/>} 
        {/* <Testing CurrentPLanInfo={currentPlanInfo}/> */}
    {/* {console.log("test1 "+currentPlanInfo?.evId)} */}
        {clickedPage==="setup" && <SetUp data ={d}/>}
        {clickedPage==="pye" && <PYE/>}
        {clickedPage==="eventlog" && <EventLog/>}
        </div>
        
    )
}
export default Home;





Error executing DDL "create table test1 (id integer not null, age integer not null, primary key (id)) engine=InnoDB" via JDBC [Incorrect syntax near 'engine'.]

<dependency>
    <groupId>com.microsoft.sqlserver</groupId>
    <artifactId>mssql-jdbc</artifactId>
    <version>your_driver_version</version>
</dependency>
# application.properties

# Database connection properties for SQL Server with Windows Authentication
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=test_db;SelectMethod=cursor;integratedSecurity=true;encrypt=true;trustServerCertificate=true
spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver


spring.datasource.url="jdbc:sqlserver://localhost:1433;" +
						"databaseName=test_db;" +
						"SelectMethod=cursor;" +
						"integratedSecurity=true;" +
						"encrypt=true;trustServerCertificate=true";

// taking files from folder and process it (storing data in tables) and moving processed to done foler
import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;



@RestController
@RequestMapping("/file")
public class ss {

    private static final String SOURCE_FOLDER = "D:\\Fille Processor\\files";
    private static final String DESTINATION_FOLDER = "D:\\Fille Processor\\done";

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Autowired
    private  DataStoringXml yourService; // Replace YourService with your actual service class

    @PostMapping("/start")
    public ResponseEntity<String> startFileProcessing() {
        // Schedule a task to process files every minute
        scheduler.scheduleAtFixedRate(this::processFiles, 0, 20, TimeUnit.SECONDS);
        return ResponseEntity.ok("File processing started.");
    }

    private void processFiles() {
        try {
            Path sourceFolder = Paths.get(SOURCE_FOLDER);
            Path destinationFolder = Paths.get(DESTINATION_FOLDER);

            Files.walkFileTree(sourceFolder, new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    // Process each file
                    System.out.println("Processing file: " + file.getFileName());

                    // Read file content as a string
                    String fileContent = new String(Files.readAllBytes(file));

                    // Call the method with file content as string parameter
                    yourService.processXmlData(fileContent);

                    // Move the file to the destination folder
                    Path destinationFile = destinationFolder.resolve(file.getFileName());
                    Files.move(file, destinationFile, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("File processed and moved: " + file.getFileName());

                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



package com.fileprocessor.entites;


// replacing tags with acutal data and generatinf seperate file for each row
import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fileprocessor.repo.PlanInfoRepo;
import com.fileprocessor.repo.UserInfoRepo;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
@CrossOrigin("*")
public class DotFileController {

    @Autowired
    private PlanInfoRepo planInfoRepo;

    @Autowired
    private UserInfoRepo userInfoRepo;

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch data from the database
            List<PlanInfo> planInfoList = planInfoRepo.findAll();
            List<UserInfo> userInfoList = userInfoRepo.findAll();

            // Generate DOCX files
            List<String> filePaths = generateDocxFiles(planInfoList, userInfoList);

            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<PlanInfo> planInfoList, List<UserInfo> userInfoList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();
        
        int minLength = Math.min(planInfoList.size(), userInfoList.size());

        // Iterate over the data fetched from the database
        for (int i = 0; i <minLength; i++) {
            PlanInfo planInfo = planInfoList.get(i);
            UserInfo userInfo = userInfoList.get(i);

            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\Users\\chenn\\OneDrive\\Desktop\\Skjlind.dot"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, planInfo, userInfo);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, planInfo.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, PlanInfo planInfo, UserInfo userInfo) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            // Replace tags for PlanInfo
            replaceTags(document, planInfo);

            // Replace tags for UserInfo
            replaceTags(document, userInfo);

            document.write(outputStream);
            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, PlanInfo planInfo) {
        Range range = document.getRange();

        // Define your tag replacements for PlanInfo
        Map<String, String> tagReplacements = Map.of(
                "Name", planInfo.getPlanName(),
                "{{status_code}}", planInfo.getStatusCode()
                // Add more tag replacements as needed
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }

    private void replaceTags(HWPFDocument document, UserInfo userInfo) {
        Range range = document.getRange();

        // Define your tag replacements for UserInfo
        Map<String, String> tagReplacements = Map.of(
                "age", userInfo.getLogonId(),
                "{{last_name}}", userInfo.getLastName()
                // Add more tag replacements as needed
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}


<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>5.1.0</version>
</dependency>

    <dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-ooxml</artifactId>
    <version>5.1.0</version>
</dependency>


    <dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi-scratchpad</artifactId>
    <version>5.1.0</version>
</dependency>


package com.example.plan.xmlEntityControlller;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class DocxReplaceController {

    @Autowired
    private xmlRepo xmlEntityRepository; // Replace xmlEntityRepository with your actual repository

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<xmlEntity> allxmlEntity = xmlEntityRepository.findAll();
            System.out.println(allxmlEntity);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allxmlEntity);
            

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<xmlEntity> xmlEntityList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the data fetched from the database
        for (xmlEntity xmlEntity : xmlEntityList) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, xmlEntity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, xmlEntity.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, xmlEntity xmlEntity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, xmlEntity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, xmlEntity planInfo) {
        Range range = document.getRange();

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "<ssmPlanNumber>", planInfo.getEvId(),
                "<ssmPlanName>", planInfo.getPlanName()
                // Add more tag replacements as needed
                
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }
 
//        document.getParagraphs().forEach(paragraph -> {
//            // Iterate through all runs in the paragraph
//            for (XWPFRun run : paragraph.getRuns()) {
//                // Get the text content of the run
//                String text = run.getText(0);
//
//                // Debugging: Print the text and replacement value
//                System.out.println("Original Text: " + text);
//                System.out.println("Replacement Value: " + xmlEntity.getEvId());
//
//                // Replace the <ev_id></ev_id> tag with the actual evId from xmlEntity
//                if (text != null && text.contains("<plan_name></plan_name>")) {
//                    run.setText(text.replace("<plan_name></plan_name>", xmlEntity.getPlanName()), 0);
//                }
//                else if (text.contains("<ev_id></ev_id>")) {
//                    // Replace {planName} with the actual planName from xmlEntity
//                    run.setText(text.replace("<ev_id></ev_id>", xmlEntity.getEvId()), 0);
//                }
//
//                // Debugging: Print the modified text after replacement
//                System.out.println("Modified Text: " + run.getText(0));
//            }
//        });
//    }
    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
    }


package com.hrlc.compliance.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.MalformedInputException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@RestController
public class ReplaceDocxTags {

    private final PlanInfoRepository planInfoRepository;
    private final UserInfoRepository userInfoRepository;
    private final ContactInfoRepository contactInfoRepository;

    public ReplaceDocxTags(PlanInfoRepository planInfoRepository, UserInfoRepository userInfoRepository, ContactInfoRepository contactInfoRepository) {
        this.planInfoRepository = planInfoRepository;
        this.userInfoRepository = userInfoRepository;
        this.contactInfoRepository = contactInfoRepository;
    }

    @PostMapping("/generate-dot-files")
    public ResponseEntity<List<String>> generateDotFiles() {
        try {
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();
            List<String> filePaths = generateDotFiles(allPlanInfos, allUserInfos, allContactInfos);
            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDotFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        List<String> filePaths = new ArrayList<>();
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);
            String originalDotFilePath = "C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot";
            String copiedDotFilePath = copyDotFile(originalDotFilePath, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());
            replaceTagsInDot(copiedDotFilePath, planInfo, userInfo, contactInfo);
            filePaths.add(copiedDotFilePath);
        }
        return filePaths;
    }

    private String copyDotFile(String originalDotFilePath, String fileName) throws IOException {
        String copiedDotFilePath = "C:\\dummy xml\\" + fileName + "_modified.dot";
        Files.copy(Paths.get(originalDotFilePath), Paths.get(copiedDotFilePath), StandardCopyOption.REPLACE_EXISTING);
        return copiedDotFilePath;
    }

    private void replaceTagsInDot(String dotFilePath, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        String content = Files.readString(Paths.get(dotFilePath), StandardCharsets.UTF_8);
        content = content.replace("${EV_ID}", planInfo.getEvId())
                         .replace("${PLAN_NAME}", planInfo.getPlanName())
                         .replace("${LOGON_ID}", userInfo.getLogonId())
                         .replace("${CONTACT_ID}", contactInfo.getContactId());

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(dotFilePath))) {
            writer.write(content);
        }
    }
}






package com.hrlc.compliance.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.MalformedInputException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

@RestController
public class ReplaceDocxTags {

    private final PlanInfoRepository planInfoRepository;
    private final UserInfoRepository userInfoRepository;
    private final ContactInfoRepository contactInfoRepository;

    public ReplaceDocxTags(PlanInfoRepository planInfoRepository, UserInfoRepository userInfoRepository, ContactInfoRepository contactInfoRepository) {
        this.planInfoRepository = planInfoRepository;
        this.userInfoRepository = userInfoRepository;
        this.contactInfoRepository = contactInfoRepository;
    }

    @PostMapping("/generate-dot-files")
    public ResponseEntity<List<String>> generateDotFiles() {
        try {
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();
            List<String> filePaths = generateDotFiles(allPlanInfos, allUserInfos, allContactInfos);
            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDotFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        List<String> filePaths = new ArrayList<>();
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);
            String originalDotFilePath = "C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot";
            String copiedDotFilePath = copyDotFile(originalDotFilePath, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());
            replaceTagsInDot(copiedDotFilePath, planInfo, userInfo, contactInfo);
            filePaths.add(copiedDotFilePath);
        }
        return filePaths;
    }

    private String copyDotFile(String originalDotFilePath, String fileName) throws IOException {
        String copiedDotFilePath = "C:\\dummy xml\\" + fileName + "_modified.dot";
        Files.copy(Paths.get(originalDotFilePath), Paths.get(copiedDotFilePath), StandardCopyOption.REPLACE_EXISTING);
        return copiedDotFilePath;
    }

    private void replaceTagsInDot(String dotFilePath, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        String content = Files.readString(Paths.get(dotFilePath), StandardCharsets.UTF_8);
        content = content.replace("${EV_ID}", planInfo.getEvId())
                         .replace("${PLAN_NAME}", planInfo.getPlanName())
                         .replace("${LOGON_ID}", userInfo.getLogonId())
                         .replace("${CONTACT_ID}", contactInfo.getContactId());

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(dotFilePath))) {
            writer.write(content);
        }
    }
}




package com.hrlc.compliance.controller;

import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.service.xmlService;

@RestController
@RequestMapping("/file-processor")
public class Fileprocess {

    private static final String SOURCE_FOLDER = "C:\\file processor\\new files";
    private static final String DESTINATION_FOLDER = "C:\\file processor\\done";

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Autowired
    private xmlService yourService; // Replace YourService with your actual service class

    @PostMapping("/start")
    public ResponseEntity<String> startFileProcessing() {
        // Schedule a task to process files every minute
        scheduler.scheduleAtFixedRate(this::processFiles, 0, 20, TimeUnit.SECONDS);
        return ResponseEntity.ok("File processing started.");
    }

    private void processFiles() {
        try {
            Path sourceFolder = Paths.get(SOURCE_FOLDER);
            Path destinationFolder = Paths.get(DESTINATION_FOLDER);

            Files.walkFileTree(sourceFolder, new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    // Process each file
                    System.out.println("Processing file: " + file.getFileName());

                    // Read file content as a string
                    String fileContent = new String(Files.readAllBytes(file));

                    // Call the method with file content as string parameter
                    yourService.processXmlData(fileContent);

                    // Move the file to the destination folder
                    Path destinationFile = destinationFolder.resolve(file.getFileName());
                    Files.move(file, destinationFile, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("File processed and moved: " + file.getFileName());

                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}



package com.hrlc.compliance.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class UserInfo {
	@Id
	private String logonId;
    private String lastName;
    private String phoneNbr;
    private String jobTitle;
    private String middleName;
    private String areaCode;
    private String firstName;
    private String emailAddress;
	
	public String getLogonId() {
		return logonId;
	}
	public void setLogonId(String logonId) {
		this.logonId = logonId;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getPhoneNbr() {
		return phoneNbr;
	}
	public void setPhoneNbr(String string) {
		this.phoneNbr = string;
	}
	public String getJobTitle() {
		return jobTitle;
	}
	public void setJobTitle(String jobTitle) {
		this.jobTitle = jobTitle;
	}
	public String getMiddleName() {
		return middleName;
	}
	public void setMiddleName(String middleName) {
		this.middleName = middleName;
	}
	public String getAreaCode() {
		return areaCode;
	}
	public void setAreaCode(String string) {
		this.areaCode = string;
	}
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getEmailAddress() {
		return emailAddress;
	}
	public void setEmailAddress(String emailAddress) {
		this.emailAddress = emailAddress;
	}
	@Override
	public String toString() {
		return "UserInfoEntity [logonId=" + logonId + ", lastName=" + lastName + ", phoneNbr=" + phoneNbr
				+ ", jobTitle=" + jobTitle + ", middleName=" + middleName + ", areaCode=" + areaCode + ", firstName="
				+ firstName + ", emailAddress=" + emailAddress + "]";
	}
    
    

}






package com.hrlc.compliance.entity;



import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class PlanInfo {
	 	@Id
	    private String evId;
	    private String planName;
	    private String irsrlCode;
	    private String provCompany;
	    private String prodId;
	    private String statusCode;
	    private String dpDateTime;
	    private String rolloverInd;
	    private String gaId;
	    private String clientName;
	    private String firstLineMailing;
	    private String scndLineMailing;
	    private String city;
	    private String stateCode;
	    private String zipCode;
	    private String country;
	    private String internalComplianceInd;
	    private String planAnnivDate;
	    private String estNumberOfParticipants;
	    private String estPlanAssets;
	    private LocalDate estImplementationDate;
	    private String subsetCashCode;
	    private String clientEntityType;
	    private String tpaFirmId;
		
	    
	    
	    public String getEvId() {
	        return evId;
	    }

	    public void setEvId(String evId) {
	        this.evId = evId;
	    }
		public String getPlanName() {
			return planName;
		}
		public void setPlanName(String planName) {
			this.planName = planName;
		}
		public String getIrsrlCode() {
			return irsrlCode;
		}
		public void setIrsrlCode(String irsrlCode) {
			this.irsrlCode = irsrlCode;
		}
		public String getProvCompany() {
			return provCompany;
		}
		public void setProvCompany(String provCompany) {
			this.provCompany = provCompany;
		}
		public String getProdId() {
			return prodId;
		}
		public void setProdId(String prodId) {
			this.prodId = prodId;
		}
		public String getStatusCode() {
			return statusCode;
		}
		public void setStatusCode(String statusCode) {
			this.statusCode = statusCode;
		}
		public String getDpDateTime() {
			return dpDateTime;
		}
		public void setDpDateTime(String dpDateTime) {
			this.dpDateTime = dpDateTime;
		}
		public String getRolloverInd() {
			return rolloverInd;
		}
		public void setRolloverInd(String rolloverInd) {
			this.rolloverInd = rolloverInd;
		}
		public String getGaId() {
			return gaId;
		}
		public void setGaId(String gaId) {
			this.gaId = gaId;
		}
		public String getClientName() {
			return clientName;
		}
		public void setClientName(String clientName) {
			this.clientName = clientName;
		}
		public String getFirstLineMailing() {
			return firstLineMailing;
		}
		public void setFirstLineMailing(String firstLineMailing) {
			this.firstLineMailing = firstLineMailing;
		}
		public String getScndLineMailing() {
			return scndLineMailing;
		}
		public void setScndLineMailing(String scndLineMailing) {
			this.scndLineMailing = scndLineMailing;
		}
		public String getCity() {
			return city;
		}
		public void setCity(String city) {
			this.city = city;
		}
		public String getStateCode() {
			return stateCode;
		}
		public void setStateCode(String stateCode) {
			this.stateCode = stateCode;
		}
		public String getZipCode() {
			return zipCode;
		}
		public void setZipCode(String zipCode) {
			this.zipCode = zipCode;
		}
		public String getCountry() {
			return country;
		}
		public void setCountry(String country) {
			this.country = country;
		}
		public String getInternalComplianceInd() {
			return internalComplianceInd;
		}
		public void setInternalComplianceInd(String internalComplianceInd) {
			this.internalComplianceInd = internalComplianceInd;
		}
		public String getPlanAnnivDate() {
			return planAnnivDate;
		}
		public void setPlanAnnivDate(String planAnnivDate) {
			this.planAnnivDate = planAnnivDate;
		}
		public String getEstNumberOfParticipants() {
			return estNumberOfParticipants;
		}
		public void setEstNumberOfParticipants(String estNumberOfParticipants) {
			this.estNumberOfParticipants = estNumberOfParticipants;
		}
		public String getEstPlanAssets() {
			return estPlanAssets;
		}
		public void setEstPlanAssets(String estPlanAssets) {
			this.estPlanAssets = estPlanAssets;
		}
		public LocalDate getEstImplementationDate() {
			return estImplementationDate;
		}
		public void setEstImplementationDate(LocalDate estImplementationDate) {
			this.estImplementationDate = estImplementationDate;
		}
		public String getSubsetCashCode() {
			return subsetCashCode;
		}
		public void setSubsetCashCode(String subsetCashCode) {
			this.subsetCashCode = subsetCashCode;
		}
		public String getClientEntityType() {
			return clientEntityType;
		}
		public void setClientEntityType(String clientEntityType) {
			this.clientEntityType = clientEntityType;
		}
		public String getTpaFirmId() {
			return tpaFirmId;
		}
		public void setTpaFirmId(String tpaFirmId) {
			this.tpaFirmId = tpaFirmId;
		}
		@Override
		public String toString() {
			return "PlanInfo [ evId=" + evId + ", planName=" + planName + ", irsrlCode=" + irsrlCode
					+ ", provCompany=" + provCompany + ", prodId=" + prodId + ", statusCode=" + statusCode + ", dpDateTime="
					+ dpDateTime + ", rolloverInd=" + rolloverInd + ", gaId=" + gaId + ", clientName=" + clientName
					+ ", firstLineMailing=" + firstLineMailing + ", scndLineMailing=" + scndLineMailing + ", city=" + city
					+ ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
					+ ", internalComplianceInd=" + internalComplianceInd + ", planAnnivDate=" + planAnnivDate
					+ ", estNumberOfParticipants=" + estNumberOfParticipants + ", estPlanAssets=" + estPlanAssets
					+ ", estImplementationDate=" + estImplementationDate + ", subsetCashCode=" + subsetCashCode
					+ ", clientEntityType=" + clientEntityType + ", tpaFirmId=" + tpaFirmId + "]";
		}
	
}



package com.hrlc.compliance.service;
import java.io.StringReader;
import java.time.LocalDate;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;

import com.hrlc.compliance.repository.ContactInfoRepository;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;





@Service
public class xmlService {
	@Autowired
	private UserInfoRepository userInfoRepo;
	
	@Autowired
	private	PlanInfoRepository planInfoRepo;
	
	@Autowired
	private ContactInfoRepository contactInfoRepo;
	
	public List<PlanInfo> getPlanInfo()
	{
		return planInfoRepo.findAll();
	}
	
	public List<ContactInfo> getContactInfo()
	{
		return contactInfoRepo.findAll();
	}
	public List<UserInfo> getUserInfo()
	{
		return userInfoRepo.findAll();
	}
	public ResponseEntity<String> processXmlData(String xmlData) {
		try {
	        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
	        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
	        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

	        NodeList parentNodes = document.getElementsByTagName("*"); // Get all parent nodes

	        for (int i = 0; i < parentNodes.getLength(); i++) {
	            Element parent = (Element) parentNodes.item(i);

	            switch (parent.getTagName()) {
	                case "user_info":
	                    saveUserInfo(parent);
	                    break;
	                case "plan_info":
	                    savePlanInfo(parent);
	                    break;
	                case "contact_info":
	                    saveContactInfo(parent);
	                    break;
	                
	            }
	        }

	        return new ResponseEntity<>("Data saved successfully ", HttpStatus.OK);
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

	private void saveUserInfo(Element parent) {
	    UserInfo userInfo = new UserInfo();

	    userInfo.setLogonId(getElementValue(parent, "logon_id"));
	    userInfo.setLastName(getElementValue(parent, "last_name"));
	    userInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
	    userInfo.setJobTitle(getElementValue(parent, "job_title"));
	    userInfo.setMiddleName(getElementValue(parent, "middle_name"));
	    userInfo.setAreaCode(getElementValue(parent, "area_code"));
	    userInfo.setFirstName(getElementValue(parent, "first_name"));
	    userInfo.setEmailAddress(getElementValue(parent, "email_address"));
	    userInfoRepo.save(userInfo);
	    
	}
	
	private void savePlanInfo(Element parent) {
		PlanInfo planInfo = new PlanInfo();
		
		planInfo.setEvId(getElementValue(parent,"ev_id"));
	 	planInfo.setPlanName(getElementValue(parent, "plan_name"));
        planInfo.setIrsrlCode(getElementValue(parent, "irsrl_code"));
        planInfo.setProvCompany(getElementValue(parent, "prov_company"));
        planInfo.setProdId(getElementValue(parent, "prod_id"));
        planInfo.setStatusCode(getElementValue(parent, "status_code"));
        planInfo.setDpDateTime(getElementValue(parent, "dpdate_time"));
        planInfo.setRolloverInd(getElementValue(parent, "rollover_ind"));
        planInfo.setGaId(getElementValue(parent, "ga_id"));
        planInfo.setClientName(getElementValue(parent, "client_name"));
        planInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
        planInfo.setScndLineMailing(getElementValue(parent, "scnd_line_mailing"));
        planInfo.setCity(getElementValue(parent, "city"));
        planInfo.setStateCode(getElementValue(parent, "state_code"));
        planInfo.setZipCode(getElementValue(parent, "zip_code"));
        planInfo.setCountry(getElementValue(parent, "country"));
        planInfo.setInternalComplianceInd(getElementValue(parent, "internal_compliance_ind"));
        planInfo.setPlanAnnivDate(getElementValue(parent, "plan_anniv_date"));
        planInfo.setEstNumberOfParticipants(getElementValue(parent, "est_number_of_participants"));
        planInfo.setEstPlanAssets(getElementValue(parent, "est_plan_assets"));
        planInfo.setEstImplementationDate(LocalDate.parse(getElementValue(parent, "est_implementation_date")));
        planInfo.setSubsetCashCode(getElementValue(parent, "subset_cash_code"));
        planInfo.setClientEntityType(getElementValue(parent, "client_entity_type"));
        planInfo.setTpaFirmId(getElementValue(parent, "tpa_firm_id"));
        planInfoRepo.save(planInfo);
	}

	private void saveContactInfo(Element parent)
	{
		 ContactInfo contactInfo = new ContactInfo();

         contactInfo.setContactId(getElementValue(parent, "contact_id"));
         contactInfo.setFirstName(getElementValue(parent, "first_name"));
         contactInfo.setLastName(getElementValue(parent, "last_name"));
         contactInfo.setJobTitle(getElementValue(parent, "job_title"));
         contactInfo.setCompanyName(getElementValue(parent, "company_name"));
         contactInfo.setFirstLineMailing(getElementValue(parent, "first_line_mailing"));
         contactInfo.setSecondLineMailing(getElementValue(parent, "scnd_line_mailing"));
         contactInfo.setCity(getElementValue(parent, "city"));
         contactInfo.setStateCode(getElementValue(parent, "state_code"));
         contactInfo.setZipCode(getElementValue(parent, "zip_code"));
         contactInfo.setCountry(getElementValue(parent, "country"));
         contactInfo.setPhoneNbr(getElementValue(parent, "phone_nbr"));
         contactInfo.setFaxNbr(getElementValue(parent, "fax_nbr"));
         contactInfo.setEmailAddress(getElementValue(parent, "email_address"));

//          Assuming contact_roles is a list of strings
         NodeList contactRoleNodes = parent.getElementsByTagName("contact_role");
//         for (int i = 0; i < contactRoleNodes.getLength(); i++) {
//             contactInfo.getContactRoles().add(contactRoleNodes.item(i).getTextContent());
//         }

         contactInfoRepo.save(contactInfo);
	}

	private String getElementValue(Element parseElement, String childTagName) {
	    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
	    if (childNodes.getLength() > 0) {
	        return childNodes.item(0).getTextContent();
	    }
	    return null;
	}
	
	
}
	







import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;
import com.hrlc.compliance.repository.ContactInfoRepository;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@RestController
public class ReplaceDotTags {

    private final PlanInfoRepository planInfoRepository;
    private final UserInfoRepository userInfoRepository;
    private final ContactInfoRepository contactInfoRepository;

    public ReplaceDotTags(PlanInfoRepository planInfoRepository, UserInfoRepository userInfoRepository, ContactInfoRepository contactInfoRepository) {
        this.planInfoRepository = planInfoRepository;
        this.userInfoRepository = userInfoRepository;
        this.contactInfoRepository = contactInfoRepository;
    }

    @PostMapping("/generate-dot-files")
    public ResponseEntity<List<String>> generateDotFiles() {
        try {
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();
            List<String> filePaths = generateDotFiles(allPlanInfos, allUserInfos, allContactInfos);
            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDotFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        List<String> filePaths = new ArrayList<>();
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);
            String originalDotFilePath = "C:\\TestXML\\Plan Express Specifications2.dot";
            String copiedDotFilePath = copyDotFile(originalDotFilePath, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());
            replaceTagsInDot(copiedDotFilePath, planInfo, userInfo, contactInfo);
            filePaths.add(copiedDotFilePath);
        }
        return filePaths;
    }

    private String copyDotFile(String originalDotFilePath, String fileName) throws IOException {
        String copiedDotFilePath = "C:\\dummy xml\\" + fileName + "_modified.dot";
        Files.copy(Paths.get(originalDotFilePath), Paths.get(copiedDotFilePath), StandardCopyOption.REPLACE_EXISTING);
        return copiedDotFilePath;
    }

    private void replaceTagsInDot(String dotFilePath, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        String content = Files.readString(Paths.get(dotFilePath), StandardCharsets.UTF_8);
        content = content.replace("${EV_ID}", planInfo.getEvId())
                         .replace("${PLAN_NAME}", planInfo.getPlanName())
                         .replace("${LOGON_ID}", userInfo.getLogonId())
                         .replace("${CONTACT_ID}", contactInfo.getContactId());

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(dotFilePath))) {
            writer.write(content);
        }
    }
}





package com.example.plan.xmlEntityControlller;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class DocxReplaceController {

    @Autowired
    private xmlRepo xmlEntityRepository; // Replace xmlEntityRepository with your actual repository

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<xmlEntity> allxmlEntity = xmlEntityRepository.findAll();
            System.out.println(allxmlEntity);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allxmlEntity);
            

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<xmlEntity> xmlEntityList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the data fetched from the database
        for (xmlEntity xmlEntity : xmlEntityList) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, xmlEntity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, xmlEntity.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, xmlEntity xmlEntity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, xmlEntity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, xmlEntity planInfo) {
        Range range = document.getRange();

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "<ssmPlanNumber>", planInfo.getEvId(),
                "<ssmPlanName>", planInfo.getPlanName()
                // Add more tag replacements as needed
                
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }
 
//        document.getParagraphs().forEach(paragraph -> {
//            // Iterate through all runs in the paragraph
//            for (XWPFRun run : paragraph.getRuns()) {
//                // Get the text content of the run
//                String text = run.getText(0);
//
//                // Debugging: Print the text and replacement value
//                System.out.println("Original Text: " + text);
//                System.out.println("Replacement Value: " + xmlEntity.getEvId());
//
//                // Replace the <ev_id></ev_id> tag with the actual evId from xmlEntity
//                if (text != null && text.contains("<plan_name></plan_name>")) {
//                    run.setText(text.replace("<plan_name></plan_name>", xmlEntity.getPlanName()), 0);
//                }
//                else if (text.contains("<ev_id></ev_id>")) {
//                    // Replace {planName} with the actual planName from xmlEntity
//                    run.setText(text.replace("<ev_id></ev_id>", xmlEntity.getEvId()), 0);
//                }
//
//                // Debugging: Print the modified text after replacement
//                System.out.println("Modified Text: " + run.getText(0));
//            }
//        });
//    }
    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
    }


private void replaceTagsInDot(String dotFilePath, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
    try {
        // Read the .dot file content using ISO-8859-1 encoding
        List<String> lines = Files.readAllLines(Paths.get(dotFilePath), StandardCharsets.ISO_8859_1);

        // Replace placeholders in each line
        for (int i = 0; i < lines.size(); i++) {
            String line = lines.get(i);
            line = line.replace("${EV_ID}", planInfo.getEvId())
                       .replace("${PLAN_NAME}", planInfo.getPlanName())
                       .replace("${LOGON_ID}", userInfo.getLogonId())
                       .replace("${CONTACT_ID}", contactInfo.getContactId());
            lines.set(i, line);
        }

        // Write the modified content back to the .dot file
        Files.write(Paths.get(dotFilePath), lines, StandardCharsets.ISO_8859_1);
    } catch (MalformedInputException e) {
        // Handle encoding errors gracefully (e.g., skip problematic characters)
        System.err.println("Encoding error occurred: " + e.getMessage());
    } catch (IOException e) {
        // Handle other I/O errors
        e.printStackTrace();
    }
}




import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;
import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.entity.UserInfo;
import com.hrlc.compliance.entity.ContactInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;
import com.hrlc.compliance.repository.UserInfoRepository;
import com.hrlc.compliance.repository.ContactInfoRepository;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
public class ReplaceDotTags {

    private final PlanInfoRepository planInfoRepository;
    private final UserInfoRepository userInfoRepository;
    private final ContactInfoRepository contactInfoRepository;

    public ReplaceDotTags(PlanInfoRepository planInfoRepository, UserInfoRepository userInfoRepository, ContactInfoRepository contactInfoRepository) {
        this.planInfoRepository = planInfoRepository;
        this.userInfoRepository = userInfoRepository;
        this.contactInfoRepository = contactInfoRepository;
    }

    @PostMapping("/generate-dot-files")
    public ResponseEntity<List<String>> generateDotFiles() {
        try {
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();
            List<String> filePaths = generateDotFiles(allPlanInfos, allUserInfos, allContactInfos);
            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDotFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        List<String> filePaths = new ArrayList<>();
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);
            String originalDotFilePath = "C:\\TestXML\\Plan Express Specifications2.dot";
            String copiedDotFilePath = copyDotFile(originalDotFilePath, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());
            replaceTagsInDot(copiedDotFilePath, planInfo, userInfo, contactInfo);
            filePaths.add(copiedDotFilePath);
        }
        return filePaths;
    }

    private String copyDotFile(String originalDotFilePath, String fileName) throws IOException {
        String copiedDotFilePath = "C:\\dummy xml\\" + fileName + "_modified.dot";
        Files.copy(Paths.get(originalDotFilePath), Paths.get(copiedDotFilePath), StandardCopyOption.REPLACE_EXISTING);
        return copiedDotFilePath;
    }

    private void replaceTagsInDot(String dotFilePath, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        List<String> lines = Files.readAllLines(Paths.get(dotFilePath), StandardCharsets.UTF_8);
        List<String> modifiedLines = lines.stream()
                .map(line -> line.replace("${EV_ID}", planInfo.getEvId())
                                 .replace("${PLAN_NAME}", planInfo.getPlanName())
                                 .replace("${LOGON_ID}", userInfo.getLogonId())
                                 .replace("${CONTACT_ID}", contactInfo.getContactId()))
                .collect(Collectors.toList());
        Files.write(Paths.get(dotFilePath), modifiedLines, StandardCharsets.UTF_8);
    }
}



// Import statements and annotations

@RestController
public class ReplaceDotTags {

    @Autowired
    private PlanInfoRepository planInfoRepository;

    @Autowired
    private UserInfoRepository userInfoRepository;

    @Autowired
    private ContactInfoRepository contactInfoRepository;

    @PostMapping("/generate-dot-files")
    public ResponseEntity<List<String>> generateDotFiles() {
        try {
            // Fetch all data from the database
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();

            // Create a list to store the file paths of the generated DOT files
            List<String> filePaths = generateDotFiles(allPlanInfos, allUserInfos, allContactInfos);

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDotFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        // Create a list to store the file paths of the generated DOT files
        List<String> filePaths = new ArrayList<>();

        // Iterate over each row of data from the tables simultaneously
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);

            try {
                // Copy the original .dot template file
                String originalDotFilePath = "C:\\TestXML\\Plan Express Specifications2.dot";
                String copiedDotFilePath = copyDotFile(originalDotFilePath, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());

                // Replace placeholders in the copied .dot file
                replaceTagsInDot(copiedDotFilePath, planInfo, userInfo, contactInfo);

                // Add the file path to the list
                filePaths.add(copiedDotFilePath);
            } catch (IOException e) {
                // Handle exceptions for the current entities if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private void replaceTagsInDot(String dotFilePath, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        // Replace placeholders in the .dot file with data from PlanInfo, UserInfo, and ContactInfo entities
        String templateText = Files.readString(Paths.get(dotFilePath), StandardCharsets.UTF_8);
        templateText = templateText.replace("${EV_ID}", planInfo.getEvId())
                                   .replace("${PLAN_NAME}", planInfo.getPlanName())
                                   .replace("${LOGON_ID}", userInfo.getLogonId())
                                   .replace("${CONTACT_ID}", contactInfo.getContactId());

        // Write the modified text back to the .dot file
        Files.write(Paths.get(dotFilePath), templateText.getBytes(StandardCharsets.UTF_8));
    }

    private String copyDotFile(String originalDotFilePath, String fileName) throws IOException {
        String copiedDotFilePath = "C:\\dummy xml\\" + fileName + "_modified.dot";
        Files.copy(Paths.get(originalDotFilePath), Paths.get(copiedDotFilePath), StandardCopyOption.REPLACE_EXISTING);
        return copiedDotFilePath;
    }
}




// Import statements and annotations

@RestController
public class ReplaceDotTags {

    @Autowired
    private PlanInfoRepository planInfoRepository;

    @Autowired
    private UserInfoRepository userInfoRepository;

    @Autowired
    private ContactInfoRepository contactInfoRepository;

    @PostMapping("/generate-doc-files")
    public ResponseEntity<List<String>> generateDocFiles() {
        try {
            // Fetch all data from the database
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();

            // Create a list to store the file paths of the generated DOC files
            List<String> filePaths = generateDocFiles(allPlanInfos, allUserInfos, allContactInfos);

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        // Create a list to store the file paths of the generated DOC files
        List<String> filePaths = new ArrayList<>();

        // Read the .dot template file content
        byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\Plan Express Specifications2.dot"));

        // Iterate over each row of data from the tables simultaneously
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);

            try {
                // Replace placeholders in the .dot template and create a new .docx file
                byte[] modifiedDocument = replaceTagsInDot(dotTemplateContent, planInfo, userInfo, contactInfo);

                // Save the modified DOCX file
                String filePath = saveModifiedDocFile(modifiedDocument, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current entities if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceTagsInDot(byte[] dotTemplateContent, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        // Replace placeholders in the .dot template with data from PlanInfo, UserInfo, and ContactInfo entities
        String templateText = new String(dotTemplateContent, StandardCharsets.UTF_8);
        templateText = templateText.replace("${EV_ID}", planInfo.getEvId())
                                   .replace("${PLAN_NAME}", planInfo.getPlanName())
                                   .replace("${LOGON_ID}", userInfo.getLogonId())
                                   .replace("${CONTACT_ID}", contactInfo.getContactId());

        // Convert the modified text back to byte array
        return templateText.getBytes(StandardCharsets.UTF_8);
    }

    private String saveModifiedDocFile(byte[] modifiedDocContent, String fileName) throws IOException {
        String filePath = "C:\\dummy xml\\" + fileName + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocContent);
        }
        return filePath;
    }
}





// Import statements and annotations

@RestController
public class ReplaceDocxTags {

    @Autowired
    private PlanInfoRepository planInfoRepository;

    @Autowired
    private UserInfoRepository userInfoRepository;

    @Autowired
    private ContactInfoRepository contactInfoRepository;

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<PlanInfo> allPlanInfos = planInfoRepository.findAll();
            List<UserInfo> allUserInfos = userInfoRepository.findAll();
            List<ContactInfo> allContactInfos = contactInfoRepository.findAll();

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allPlanInfos, allUserInfos, allContactInfos);

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<PlanInfo> planInfos, List<UserInfo> userInfos, List<ContactInfo> contactInfos) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over each row of data from the tables simultaneously
        for (int i = 0; i < Math.min(planInfos.size(), Math.min(userInfos.size(), contactInfos.size())); i++) {
            PlanInfo planInfo = planInfos.get(i);
            UserInfo userInfo = userInfos.get(i);
            ContactInfo contactInfo = contactInfos.get(i);

            try {
                // Read the DOCX template file content
                byte[] templateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\Plan Express Specifications2.docx"));

                // Replace placeholders in the DOCX file
                byte[] modifiedDocument = replaceTagsInDocx(templateContent, planInfo, userInfo, contactInfo);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, planInfo.getEvId() + "_" + userInfo.getLogonId() + "_" + contactInfo.getContactId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current entities if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceTagsInDocx(byte[] templateContent, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(templateContent);
             XWPFDocument document = new XWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {

            // Replace placeholders in the document with data from PlanInfo, UserInfo, and ContactInfo entities
            replaceTags(document, planInfo, userInfo, contactInfo);

            // Write the modified content to the output stream
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(XWPFDocument document, PlanInfo planInfo, UserInfo userInfo, ContactInfo contactInfo) {
        // Iterate over paragraphs, runs, tables, etc., and replace placeholders accordingly with data from all entities
        for (XWPFParagraph paragraph : document.getParagraphs()) {
            for (XWPFRun run : paragraph.getRuns()) {
                String text = run.getText(0);
                if (text != null) {
                    text = text.replace("${EV_ID}", planInfo.getEvId())
                               .replace("${PLAN_NAME}", planInfo.getPlanName())
                               .replace("${LOGON_ID}", userInfo.getLogonId())
                               .replace("${CONTACT_ID}", contactInfo.getContactId());
                    run.setText(text, 0);
                }
            }
        }
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String fileName) throws IOException {
        String filePath = "C:\\dummy xml\\" + fileName + "_modified.docx";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}



package com.hrlc.compliance.controller;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class ReplaceDocxTags {

    @Autowired
    private PlanInfoRepository xmlEntityRepository; // Replace xmlEntityRepository with your actual repository

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<PlanInfo> allxmlEntity = xmlEntityRepository.findAll();
            System.out.println(allxmlEntity);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allxmlEntity);
            

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<PlanInfo> xmlEntityList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the data fetched from the database
        for (PlanInfo xmlEntity : xmlEntityList) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\Plan Express Specifications2.doc"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, xmlEntity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, xmlEntity.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, PlanInfo xmlEntity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, xmlEntity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, PlanInfo planInfo) {
        Range range = document.getRange();

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "<ssmPlanNumber>", planInfo.getEvId(),
                "<ssmPlanName>", planInfo.getPlanName()
                // Add more tag replacements as needed
                
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }
 
//        document.getParagraphs().forEach(paragraph -> {
//            // Iterate through all runs in the paragraph
//            for (XWPFRun run : paragraph.getRuns()) {
//                // Get the text content of the run
//                String text = run.getText(0);
//
//                // Debugging: Print the text and replacement value
//                System.out.println("Original Text: " + text);
//                System.out.println("Replacement Value: " + xmlEntity.getEvId());
//
//                // Replace the <ev_id></ev_id> tag with the actual evId from xmlEntity
//                if (text != null && text.contains("<plan_name></plan_name>")) {
//                    run.setText(text.replace("<plan_name></plan_name>", xmlEntity.getPlanName()), 0);
//                }
//                else if (text.contains("<ev_id></ev_id>")) {
//                    // Replace {planName} with the actual planName from xmlEntity
//                    run.setText(text.replace("<ev_id></ev_id>", xmlEntity.getEvId()), 0);
//                }
//
//                // Debugging: Print the modified text after replacement
//                System.out.println("Modified Text: " + run.getText(0));
//            }
//        });
//    }
    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
    }


import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.transaction.Transactional;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.List;

@Service
@Transactional
public class DocumentProcessorService {

    @Autowired
    private PlanInfoRepository planInfoRepository;

    @Autowired
    private UserInfoRepository userInfoRepository;

    @Autowired
    private ContactInfoRepository contactInfoRepository;

    public void processDocument(String sourceFilePath, String destinationFolder) {
        try (FileInputStream fis = new FileInputStream(sourceFilePath);
             XWPFDocument document = new XWPFDocument(fis)) {

            // Fetch data from PlanInfo table
            List<PlanInfo> planInfos = planInfoRepository.findAll();
            // Iterate over each PlanInfo entity
            for (PlanInfo planInfo : planInfos) {
                // Iterate over paragraphs in the document
                for (XWPFParagraph paragraph : document.getParagraphs()) {
                    // Replace placeholders with data
                    replacePlaceholder(paragraph, "EV_ID", planInfo.getEvId());
                    replacePlaceholder(paragraph, "CITY", planInfo.getCity());
                    replacePlaceholder(paragraph, "CLIENT_ENTITY_TYPE", planInfo.getClientEntityType());
                    // You can add more placeholders and replace them with data from PlanInfo entity
                }
            }

            // Fetch data from UserInfo table
            List<UserInfo> userInfos = userInfoRepository.findAll();
            // Iterate over each UserInfo entity
            for (UserInfo userInfo : userInfos) {
                // Iterate over paragraphs in the document
                for (XWPFParagraph paragraph : document.getParagraphs()) {
                    // Replace placeholders with data
                    replacePlaceholder(paragraph, "LOGON_ID", userInfo.getLogonId());
                    replacePlaceholder(paragraph, "EMAIL_ADDRESS", userInfo.getEmailAddress());
                    // You can add more placeholders and replace them with data from UserInfo entity
                }
            }

            // Fetch data from ContactInfo table
            List<ContactInfo> contactInfos = contactInfoRepository.findAll();
            // Iterate over each ContactInfo entity
            for (ContactInfo contactInfo : contactInfos) {
                // Iterate over paragraphs in the document
                for (XWPFParagraph paragraph : document.getParagraphs()) {
                    // Replace placeholders with data
                    replacePlaceholder(paragraph, "CONTACT_ID", contactInfo.getContactId());
                    replacePlaceholder(paragraph, "COMPANY_NAME", contactInfo.getCompanyName());
                    // You can add more placeholders and replace them with data from ContactInfo entity
                }
            }

            // Write modified content back to a temporary file
            Path tempFilePath = Files.createTempFile("temp", ".docx");
            try (FileOutputStream fos = new FileOutputStream(tempFilePath.toFile())) {
                document.write(fos);
            }

            // Move the temporary file to the destination folder
            Path destinationPath = Paths.get(destinationFolder);
            Files.move(tempFilePath, destinationPath.resolve(tempFilePath.getFileName()), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void replacePlaceholder(XWPFParagraph paragraph, String placeholder, String replacement) {
        String text = paragraph.getText();
        if (text.contains(placeholder)) {
            text = text.replace(placeholder, replacement);
            paragraph.setText(text);
        }
    }
}





CREATE TABLE Plans(
	planID int IDENTITY(1,1) NOT NULL,
	planNumber varchar(50) NOT NULL,
	planName varchar(255) NOT NULL,
    PRIMARY KEY (planID)
);

CREATE TABLE PlanInfo(
	planInfoID int IDENTITY(1,1) NOT NULL,
	planID int NOT NULL,
	ev_id varchar(255) NOT NULL,
	city varchar(255) DEFAULT NULL,
	client_entity_type varchar(255) DEFAULT NULL,
	client_name varchar(255) DEFAULT NULL,
	country varchar(255) DEFAULT NULL,
	dp_date_time varchar(255) DEFAULT NULL,
	est_implementation_date date DEFAULT NULL,
	est_number_of_participants varchar(255) DEFAULT NULL,
	est_plan_assets varchar(255) DEFAULT NULL,
	first_line_mailing varchar(255) DEFAULT NULL,
	ga_id varchar(255) DEFAULT NULL,
	internal_compliance_ind varchar(255) DEFAULT NULL,
	irsrl_code varchar(255) DEFAULT NULL,
	plan_anniv_date varchar(255) DEFAULT NULL,
	plan_name varchar(255) DEFAULT NULL,
	prod_id varchar(255) DEFAULT NULL,
	prov_company varchar(255) DEFAULT NULL,
	rollover_ind varchar(255) DEFAULT NULL,
	scnd_line_mailing varchar(255) DEFAULT NULL,
	state_code varchar(255) DEFAULT NULL,
	status_code varchar(255) DEFAULT NULL,
	subset_cash_code varchar(255) DEFAULT NULL,
	tpa_firm_id varchar(255) DEFAULT NULL,
	zip_code varchar(255) DEFAULT NULL,
    PRIMARY KEY (planInfoID),
	FOREIGN KEY (planID) REFERENCES Plans(planID) 
);

CREATE TABLE UserInfo(
	userInfoID int IDENTITY(1,1) NOT NULL,
	planID int NOT NULL,
	logon_id varchar(255) NOT NULL,
	area_code varchar(255) DEFAULT NULL,
	email_address varchar(255) DEFAULT NULL,
	first_name varchar(255) DEFAULT NULL,
	job_title varchar(255) DEFAULT NULL,
	last_name varchar(255) DEFAULT NULL,
	middle_name varchar(255) DEFAULT NULL,
	phone_nbr varchar(255) DEFAULT NULL,
    PRIMARY KEY (userInfoID),
	FOREIGN KEY (planID) REFERENCES Plans(planID) 
);

CREATE TABLE ContactInfo(
	contactInfoID int IDENTITY(1,1) NOT NULL,
	planID int NOT NULL,
	contact_id varchar(255) NOT NULL,
	city varchar(255) DEFAULT NULL,
	company_name varchar(255) DEFAULT NULL,
	country varchar(255) DEFAULT NULL,
	email_address varchar(255) DEFAULT NULL,
	fax_nbr varchar(255) DEFAULT NULL,
	first_line_mailing varchar(255) DEFAULT NULL,
	first_name varchar(255) DEFAULT NULL,
	job_title varchar(255) DEFAULT NULL,
	last_name varchar(255) DEFAULT NULL,
	phone_nbr varchar(255) DEFAULT NULL,
	second_line_mailing varchar(255) DEFAULT NULL,
	state_code varchar(255) DEFAULT NULL,
	zip_code varchar(255) DEFAULT NULL,
    PRIMARY KEY (contactInfoID),
	FOREIGN KEY (planID) REFERENCES Plans(planID) 
);


import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@RestController
@RequestMapping("/file-processor")
public class FileProcessorController {

    private static final String SOURCE_FOLDER = "D:\\Fille Processor\\files";
    private static final String DESTINATION_FOLDER = "D:\\Fille Processor\\done";

    private final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Autowired
    private YourService yourService; // Replace YourService with your actual service class

    @PostMapping("/start")
    public ResponseEntity<String> startFileProcessing() {
        // Schedule a task to process files every minute
        scheduler.scheduleAtFixedRate(this::processFiles, 0, 1, TimeUnit.MINUTES);
        return ResponseEntity.ok("File processing started.");
    }

    private void processFiles() {
        try {
            Path sourceFolder = Paths.get(SOURCE_FOLDER);
            Path destinationFolder = Paths.get(DESTINATION_FOLDER);

            Files.walkFileTree(sourceFolder, new SimpleFileVisitor<Path>() {
                @Override
                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                    // Process each file
                    System.out.println("Processing file: " + file.getFileName());

                    // Read file content as a string
                    String fileContent = new String(Files.readAllBytes(file));

                    // Call the method with file content as string parameter
                    yourService.processFile(fileContent);

                    // Move the file to the destination folder
                    Path destinationFile = destinationFolder.resolve(file.getFileName());
                    Files.move(file, destinationFile, StandardCopyOption.REPLACE_EXISTING);
                    System.out.println("File processed and moved: " + file.getFileName());

                    return FileVisitResult.CONTINUE;
                }
            });
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}


import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.poi.xwml.usermodel.*;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class DotFileProcessor {

    public static void main(String[] args) {
        // Replace these with your actual file paths
        String folderPath = "/path/to/xml/folder";
        String docFilePath = "/path/to/your/doc/file.doc";
        String outputFolder = "/path/to/output/folder";

        // Process each XML file in the folder
        File folder = new File(folderPath);
        for (File xmlFile : folder.listFiles()) {
            if (xmlFile.getName().endsWith(".xml")) {
                processFile(xmlFile, docFilePath, outputFolder);
            }
        }
    }

    private static void processFile(File xmlFile, String docFilePath, String outputFolder) {
        List<Map<String, String>> dataList = parseXml(xmlFile);

        for (int i = 0; i < dataList.size(); i++) {
            Map<String, String> dataMap = dataList.get(i);
            String outputFileName = xmlFile.getName() + "_row_" + (i + 1) + ".doc";
            String outputFilePath = new File(outputFolder, outputFileName).getPath();
            replaceTagsInDocFile(docFilePath, dataMap, outputFilePath);
        }
    }

    private static List<Map<String, String>> parseXml(File xmlFile) {
        List<Map<String, String>> dataList = new ArrayList<>();

        try {
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xmlFile);

            doc.getDocumentElement().normalize();

            // Extract data from relevant tags in each entity
            for (String entityType : new String[]{"plan_info", "user_info", "contact_info"}) {
                NodeList nodes = doc.getElementsByTagName(entityType);
                for (int i = 0; i < nodes.getLength(); i++) {
                    Node node = nodes.item(i);
                    if (node.getNodeType() == Node.ELEMENT_NODE) {
                        Element element = (Element) node;
                        Map<String, String> dataMap = new HashMap<>();
                        for (Element childElement : getChildren(element)) {
                            dataMap.put(entityType + "_" + childElement.getNodeName(), childElement.getTextContent());
                        }
                        dataList.add(dataMap);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return dataList;
    }

    private static List<Element> getChildren(Element element) {
        List<Element> children = new ArrayList<>();
        NodeList childNodes = element.getChildNodes();
        for (int i = 0; i < childNodes.getLength(); i++) {
            Node childNode = childNodes.item(i);
            if (childNode.getNodeType() == Node.ELEMENT_NODE) {
                children.add((Element) childNode);
            }
        }
        return children;
    }

    private static void replaceTagsInDocFile(String docFilePath, Map<String, String> dataMap, String outputFilePath) {
        try {
            XWPFDocument doc = new XWPFDocument(new FileInputStream(docFilePath));
            for (XWPFParagraph paragraph : doc.



// Import statements...

@RestController
public class ReplaceDocxTags {

    @Autowired
    private PlanInfoRepository planInfoRepository; // Inject PlanInfo repository
    @Autowired
    private ContactInfoRepository contactInfoRepository; // Inject ContactInfo repository
    @Autowired
    private UserInfoRepository userInfoRepository; // Inject UserInfo repository

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Create a list of entity repositories you want to process
            List<JpaRepository<?, ?>> entityRepositories = Arrays.asList(planInfoRepository, contactInfoRepository, userInfoRepository);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(entityRepositories);

            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<JpaRepository<?, ?>> entityRepositories) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the specified entity repositories
        for (JpaRepository<?, ?> entityRepository : entityRepositories) {
            // Fetch all data from the database for the current entity repository
            List<?> allEntities = entityRepository.findAll();

            // Create a list to store the file paths for the current entity repository
            List<String> entityFilePaths = generateDocxFiles(allEntities);

            // Add the file paths to the main list
            filePaths.addAll(entityFilePaths);
        }

        return filePaths;
    }

    private List<String> generateDocxFiles(List<?> entities) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the entities
        for (Object entity : entities) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\Plan Express Specifications2.doc"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, entity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, entity.getClass().getSimpleName());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current entity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, Object entity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, entity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, Object entity) {
        Range range = document.getRange();

        // Define your tag replacements based on the entity class
        if (entity instanceof PlanInfo) {
            PlanInfo planInfo = (PlanInfo) entity;
            Map<String, String> tagReplacements = Map.of(
                    "<planInfoTag>", planInfo.getPlanInfoValue(),
                    // Add more tag replacements as needed
            );

            // Iterate through the tag replacements
            for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
                String tag = entry.getKey();
                String replacement = entry.getValue();

                // Debugging: Print the tag and replacement value
                System.out.println("Replacing tag: " + tag);
                System.out.println("With value: " + replacement);

                // Replace the tag in the document
                range.replaceText(tag, replacement);
            }
        } else if (entity instanceof ContactInfo) {
            ContactInfo contactInfo = (ContactInfo) entity;
            // Define tag replacements for ContactInfo entity
            // ...
        } else if (entity instanceof UserInfo) {
            UserInfo userInfo = (UserInfo) entity;
            // Define tag replacements for UserInfo entity
            // ...
        }

        // Add more conditions for other entity classes as needed
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String className) throws IOException {
        String filePath = "C:\\dummy xml\\" + className + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}





// Import statements...

@RestController
public class ReplaceDocxTags {

    @Autowired
    private Map<String, JpaRepository<?, String>> entityRepositories; // Autowire repositories for multiple entities

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // List of entity classes you want to process
            List<Class<?>> entityClasses = Arrays.asList(UserInfo.class, ContactInfo.class);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(entityClasses);

            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<Class<?>> entityClasses) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the specified entity classes
        for (Class<?> entityClass : entityClasses) {
            // Fetch all data from the database for the current entity class
            JpaRepository<?, String> entityRepository = entityRepositories.get(entityClass.getSimpleName());
            List<?> allEntities = entityRepository.findAll();

            // Create a list to store the file paths for the current entity class
            List<String> entityFilePaths = generateDocxFiles(allEntities);

            // Add the file paths to the main list
            filePaths.addAll(entityFilePaths);
        }

        return filePaths;
    }

    private List<String> generateDocxFiles(List<?> entities) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the entities
        for (Object entity : entities) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\Plan Express Specifications2.doc"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, entity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, entity.getClass().getSimpleName());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current entity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, Object entity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, entity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, Object entity) {
        Range range = document.getRange();

        // Define your tag replacements based on the entity class
        if (entity instanceof UserInfo) {
            UserInfo userInfo = (UserInfo) entity;
            Map<String, String> tagReplacements = Map.of(
                    "<userName>", userInfo.getUserName(),
                    "<userEmail>", userInfo.getUserEmail()
                    // Add more tag replacements as needed
            );

            // Iterate through the tag replacements
            for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
                String tag = entry.getKey();
                String replacement = entry.getValue();

                // Debugging: Print the tag and replacement value
                System.out.println("Replacing tag: " + tag);
                System.out.println("With value: " + replacement);

                // Replace the tag in the document
                range.replaceText(tag, replacement);
            }
        } else if (entity instanceof ContactInfo) {
            ContactInfo contactInfo = (ContactInfo) entity;
            // Define tag replacements for ContactInfo entity
            // ...
        }

        // Add more conditions for other entity classes as needed
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String className) throws IOException {
        String filePath = "C:\\dummy xml\\" + className + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}




package com.hrlc.compliance.controller;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hrlc.compliance.entity.PlanInfo;
import com.hrlc.compliance.repository.PlanInfoRepository;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class ReplaceDocxTags {

    @Autowired
    private PlanInfoRepository xmlEntityRepository; // Replace xmlEntityRepository with your actual repository

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<PlanInfo> allxmlEntity = xmlEntityRepository.findAll();
            System.out.println(allxmlEntity);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allxmlEntity);
            

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<PlanInfo> xmlEntityList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the data fetched from the database
        for (PlanInfo xmlEntity : xmlEntityList) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\Plan Express Specifications2.doc"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, xmlEntity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, xmlEntity.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, PlanInfo xmlEntity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, xmlEntity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, PlanInfo planInfo) {
        Range range = document.getRange();

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "<ssmPlanNumber>", planInfo.getEvId(),
                "<ssmPlanName>", planInfo.getPlanName()
                // Add more tag replacements as needed
                
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }
 
//        document.getParagraphs().forEach(paragraph -> {
//            // Iterate through all runs in the paragraph
//            for (XWPFRun run : paragraph.getRuns()) {
//                // Get the text content of the run
//                String text = run.getText(0);
//
//                // Debugging: Print the text and replacement value
//                System.out.println("Original Text: " + text);
//                System.out.println("Replacement Value: " + xmlEntity.getEvId());
//
//                // Replace the <ev_id></ev_id> tag with the actual evId from xmlEntity
//                if (text != null && text.contains("<plan_name></plan_name>")) {
//                    run.setText(text.replace("<plan_name></plan_name>", xmlEntity.getPlanName()), 0);
//                }
//                else if (text.contains("<ev_id></ev_id>")) {
//                    // Replace {planName} with the actual planName from xmlEntity
//                    run.setText(text.replace("<ev_id></ev_id>", xmlEntity.getEvId()), 0);
//                }
//
//                // Debugging: Print the modified text after replacement
//                System.out.println("Modified Text: " + run.getText(0));
//            }
//        });
//    }
    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
    }




const onClickOkSConfirmModel= async (row:BatchSource)=>{
            setShowBATSConfirmModel(false);
            let response:any=null;
           
                response= removeBatchSource({id: row.id, bkaCode: row.bkaCode, bkaTypeCode: row.bkaTypeCode, db: selectedDb});
           
            if(response?.data===200){
                setShowBATSConfirmModelSuccess(true);
              }else if(response==null||response.error?.data?.error?.message===null){
                setShowBATSConfirmModel(false);
                setAPIErrorMessage("Unknown error occurred");
            }else if(response?.error?.status===500){
                setShowBATSConfirmModel(false);
                setAPIErrorMessage(response.error?.data?.error?.message);
            }
        }
 <InprogressComponent inProgress={isFetchin... by JS, Shravani
JS, Shravani
9:28 PM
 <InprogressComponent inProgress={isFetching}/>
 
        <ConfirmModal
                show={showBATSConfirmModel}
                onClickOk={onClickOkSConfirmModel}
                onClickClose={() => setShowBATSConfirmModel(false)}
                confirmModelBtnName={"ok"}
                cancelModelBtnName={"Cancel"}>
                <b>Are you sure to delete the Batch Source?</b>
            </ConfirmModal>
         
<td>                         <Button varian... by JS, Shravani
JS, Shravani
9:28 PM
<td>
                        <Button variant="secondary" size="sm"
                        onClick={() => setShowBATSConfirmModel(true)}
                        >Delete </Button>
                    </td>
const [errorMessage,setErrorMessage]=React.... by JS, Shravani
JS, Shravani
9:29 PM
const [errorMessage,setErrorMessage]=React.useState("");
 
    const [showBATSConfirmModel,setShowBATSConfirmModel]=React.useState(false);
 
    const [removeBatchSource]=useDeleteBatchSourceMutation();
   
    const [showBATSConfirmModelSuccess,setShowBATSConfirmModelSuccess]=React.useState<boolean>(false);
 
    const [apiErrorResMessage, setAPIErrorMessage] = React.useState("");
has context menu

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@RestController
public class XmlToDocxController {

    @Autowired
    private PlanInfoRepository planInfoRepository;

    @PostMapping("/generate-docx-file")
    public ResponseEntity<String> generateDocxFile() {
        try {
            Optional<PlanInfo> planInfoOptional = planInfoRepository.findById(1L);

            if (planInfoOptional.isPresent()) {
                PlanInfo planInfo = planInfoOptional.get();

                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\Template.docx"));

                // Replace tags in the DOCX file
                byte[] modifiedDocument = replaceTagsInDocx(dotTemplateContent, planInfo);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, planInfo.getEvId());

                return ResponseEntity.ok().body("Generated DOCX file at: " + filePath);
            } else {
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body("PlanInfo entity not found");
            }
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error generating DOCX file");
        }
    }

    private byte[] replaceTagsInDocx(byte[] docxContent, PlanInfo planInfo) throws IOException {
        String docxText = new String(docxContent, StandardCharsets.UTF_8);

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "<evId>", planInfo.getEvId(),
                "<planName>", planInfo.getPlanName()
                // Add more tag replacements as needed
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Replace the tag in the document
            docxText = docxText.replace(tag, replacement);
        }

        return docxText.getBytes(StandardCharsets.UTF_8);
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.docx";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}


The method generateDocxFiles(List<T>, String) in the type ReplaceDocxTags is not applicable for the arguments (List<ContactInfo>, String)
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class DocxReplaceController {

    @Autowired
    private PlanInfoRepository planInfoRepository;
    @Autowired
    private UserInfoRepository userInfoRepository;
    @Autowired
    private ContactInfoRepository contactInfoRepository;

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            List<String> filePaths = new ArrayList<>();

            List<PlanInfo> planInfos = planInfoRepository.findAll();
            List<UserInfo> userInfos = userInfoRepository.findAll();
            List<ContactInfo> contactInfos = contactInfoRepository.findAll();

            filePaths.addAll(generateDocxFiles(planInfos, "C:\\SingleTemplate.dot"));
            filePaths.addAll(generateDocxFiles(userInfos, "C:\\SingleTemplate.dot"));
            filePaths.addAll(generateDocxFiles(contactInfos, "C:\\SingleTemplate.dot"));

            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private <T extends BaseEntity> List<String> generateDocxFiles(List<T> entities, String templatePath) throws IOException {
        List<String> filePaths = new ArrayList<>();

        byte[] templateContent = Files.readAllBytes(Paths.get(templatePath));

        for (T entity : entities) {
            try {
                byte[] modifiedDocument = replaceTagsInDocx(templateContent, entity);

                String filePath = saveModifiedDocxFile(modifiedDocument, entity.getEvId());

                filePaths.add(filePath);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private <T extends BaseEntity> byte[] replaceTagsInDocx(byte[] docxContent, T entity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(docxContent);
             XWPFDocument document = new XWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, entity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private <T extends BaseEntity> void replaceTags(XWPFDocument document, T entity) {
        for (XWPFParagraph paragraph : document.getParagraphs()) {
            for (XWPFRun run : paragraph.getRuns()) {
                String text = run.getText(0);
                if (text != null) {
                    for (Map.Entry<String, String> entry : entity.getAttributes().entrySet()) {
                        text = text.replace(entry.getKey(), entry.getValue());
                    }
                    run.setText(text, 0);
                }
            }
        }
    }

    private <T extends BaseEntity> String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.docx";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}


import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;

@RestController
public class DocxReplaceController {

    @Autowired
    private XmlEntityRepository xmlEntityRepository;

    @Autowired
    private PlanInfoService planInfoService;

    @Autowired
    private UserInfoService userInfoService;

    @Autowired
    private ContactInfoService contactInfoService;

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<XmlEntity> allXmlEntities = xmlEntityRepository.findAll();

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allXmlEntities);

            return ResponseEntity.ok().body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<XmlEntity> xmlEntityList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the data fetched from the database
        for (XmlEntity xmlEntity : xmlEntityList) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot"));

                // Replace XML tags in the DOCX file for PlanInfo, UserInfo, and ContactInfo
                byte[] modifiedDocument = replacePlanInfoTagsInDocx(dotTemplateContent, xmlEntity.getPlanInfo());
                modifiedDocument = replaceUserInfoTagsInDocx(modifiedDocument, xmlEntity.getUserInfo());
                modifiedDocument = replaceContactInfoTagsInDocx(modifiedDocument, xmlEntity.getContactInfo());

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, xmlEntity.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replacePlanInfoTagsInDocx(byte[] docContent, PlanInfo planInfo) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(docContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, planInfo);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private byte[] replaceUserInfoTagsInDocx(byte[] docContent, UserInfo userInfo) throws IOException {
        // Implement this method similar to replacePlanInfoTagsInDocx
    }

    private byte[] replaceContactInfoTagsInDocx(byte[] docContent, ContactInfo contactInfo) throws IOException {
        // Implement this method similar to replacePlanInfoTagsInDocx
    }

    private void replaceTags(HWPFDocument document, PlanInfo planInfo) {
        // Implement this method to replace tags in the document for PlanInfo
    }

    private String saveModifiedDocxFile(byte[] modifiedDocxContent, Long evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
}









package com.example.plan.xmlEntityControlller;

import org.apache.poi.hwpf.HWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.hwpf.usermodel.Range;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RestController;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@RestController
public class DocxReplaceController {

    @Autowired
    private xmlRepo xmlEntityRepository; // Replace xmlEntityRepository with your actual repository

    @PostMapping("/generate-docx-files")
    public ResponseEntity<List<String>> generateDocxFiles() {
        try {
            // Fetch all data from the database
            List<xmlEntity> allxmlEntity = xmlEntityRepository.findAll();
            System.out.println(allxmlEntity);

            // Create a list to store the file paths of the generated DOCX files
            List<String> filePaths = generateDocxFiles(allxmlEntity);
            

            return ResponseEntity
                    .ok()
                    .body(filePaths);
        } catch (IOException e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(null);
        }
    }

    private List<String> generateDocxFiles(List<xmlEntity> xmlEntityList) throws IOException {
        // Create a list to store the file paths of the generated DOCX files
        List<String> filePaths = new ArrayList<>();

        // Iterate over the data fetched from the database
        for (xmlEntity xmlEntity : xmlEntityList) {
            try {
                // Read the DOCX template file content
                byte[] dotTemplateContent = Files.readAllBytes(Paths.get("C:\\TestXML\\af_plan_provision_summary_document_section_1_09.2020.dot"));

                // Replace XML tags in the DOCX file
                byte[] modifiedDocument = replaceXmlTagsInDocx(dotTemplateContent, xmlEntity);

                // Save the modified DOCX file
                String filePath = saveModifiedDocxFile(modifiedDocument, xmlEntity.getEvId());

                // Add the file path to the list
                filePaths.add(filePath);
            } catch (IOException e) {
                // Handle exceptions for the current xmlEntity if needed
                e.printStackTrace();
            }
        }

        return filePaths;
    }

    private byte[] replaceXmlTagsInDocx(byte[] dotContent, xmlEntity xmlEntity) throws IOException {
        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(dotContent);
             HWPFDocument document = new HWPFDocument(inputStream);
             ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {
            replaceTags(document, xmlEntity);
            document.write(outputStream);

            return outputStream.toByteArray();
        }
    }

    private void replaceTags(HWPFDocument document, xmlEntity planInfo) {
        Range range = document.getRange();

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "<ssmPlanNumber>", planInfo.getEvId(),
                "<ssmPlanName>", planInfo.getPlanName()
                // Add more tag replacements as needed
                
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }
 
//        document.getParagraphs().forEach(paragraph -> {
//            // Iterate through all runs in the paragraph
//            for (XWPFRun run : paragraph.getRuns()) {
//                // Get the text content of the run
//                String text = run.getText(0);
//
//                // Debugging: Print the text and replacement value
//                System.out.println("Original Text: " + text);
//                System.out.println("Replacement Value: " + xmlEntity.getEvId());
//
//                // Replace the <ev_id></ev_id> tag with the actual evId from xmlEntity
//                if (text != null && text.contains("<plan_name></plan_name>")) {
//                    run.setText(text.replace("<plan_name></plan_name>", xmlEntity.getPlanName()), 0);
//                }
//                else if (text.contains("<ev_id></ev_id>")) {
//                    // Replace {planName} with the actual planName from xmlEntity
//                    run.setText(text.replace("<ev_id></ev_id>", xmlEntity.getEvId()), 0);
//                }
//
//                // Debugging: Print the modified text after replacement
//                System.out.println("Modified Text: " + run.getText(0));
//            }
//        });
//    }
    private String saveModifiedDocxFile(byte[] modifiedDocxContent, String evId) throws IOException {
        String filePath = "C:\\dummy xml\\" + evId + "_modified.doc";
        try (FileOutputStream fileOutputStream = new FileOutputStream(filePath)) {
            fileOutputStream.write(modifiedDocxContent);
        }
        return filePath;
    }
    }
ContactInfoEntity contactInfoEntity = new ContactInfoEntity();

            contactInfoEntity.setContactId(Long.parseLong(getElementValue(root, "contact_id")));
            contactInfoEntity.setFirstName(getElementValue(root, "first_name"));
            contactInfoEntity.setLastName(getElementValue(root, "last_name"));
            contactInfoEntity.setJobTitle(getElementValue(root, "job_title"));
            contactInfoEntity.setCompanyName(getElementValue(root, "company_name"));
            contactInfoEntity.setFirstLineMailing(getElementValue(root, "first_line_mailing"));
            contactInfoEntity.setSecondLineMailing(getElementValue(root, "scnd_line_mailing"));
            contactInfoEntity.setCity(getElementValue(root, "city"));
            contactInfoEntity.setStateCode(getElementValue(root, "state_code"));
            contactInfoEntity.setZipCode(getElementValue(root, "zip_code"));
            contactInfoEntity.setCountry(getElementValue(root, "country"));
            contactInfoEntity.setPhoneNbr(getElementValue(root, "phone_nbr"));
            contactInfoEntity.setFaxNbr(getElementValue(root, "fax_nbr"));
            contactInfoEntity.setEmailAddress(getElementValue(root, "email_address"));

            // Assuming contact_roles is a list of strings
            NodeList contactRoleNodes = root.getElementsByTagName("contact_role");
            for (int i = 0; i < contactRoleNodes.getLength(); i++) {
                contactInfoEntity.getContactRoles().add(contactRoleNodes.item(i).getTextContent());
            }

            contactInfoRepository.save(contactInfoEntity);

import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import java.util.List;

@Entity
public class ContactInfoEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long contactId;
    private String firstName;
    private String lastName;
    private String jobTitle;
    private String companyName;
    private String firstLineMailing;
    private String secondLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String phoneNbr;
    private String faxNbr;
    private String emailAddress;

    @ElementCollection
    private List<String> contactRoles;

    // Getters and setters

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getContactId() {
        return contactId;
    }

    public void setContactId(Long contactId) {
        this.contactId = contactId;
    }

    public String getFirstName() {
        return firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public String getJobTitle() {
        return jobTitle;
    }

    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    public String getCompanyName() {
        return companyName;
    }

    public void setCompanyName(String companyName) {
        this.companyName = companyName;
    }

    public String getFirstLineMailing() {
        return firstLineMailing;
    }

    public void setFirstLineMailing(String firstLineMailing) {
        this.firstLineMailing = firstLineMailing;
    }

    public String getSecondLineMailing() {
        return secondLineMailing;
    }

    public void setSecondLineMailing(String secondLineMailing) {
        this.secondLineMailing = secondLineMailing;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

    public String getStateCode() {
        return stateCode;
    }

    public void setStateCode(String stateCode) {
        this.stateCode = stateCode;
    }

    public String getZipCode() {
        return zipCode;
    }

    public void setZipCode(String zipCode) {
        this.zipCode = zipCode;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPhoneNbr() {
        return phoneNbr;
    }

    public void setPhoneNbr(String phoneNbr) {
        this.phoneNbr = phoneNbr;
    }

    public String getFaxNbr() {
        return faxNbr;
    }

    public void setFaxNbr(String faxNbr) {
        this.faxNbr = faxNbr;
    }

    public String getEmailAddress() {
        return emailAddress;
    }

    public void setEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    public List<String> getContactRoles() {
        return contactRoles;
    }

    public void setContactRoles(List<String> contactRoles) {
        this.contactRoles = contactRoles;
    }
}


@PostMapping("/process-xml")
public ResponseEntity<String> processXmlData(@RequestBody String xmlData) {
    try {
        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

        NodeList parentNodes = document.getElementsByTagName("*"); // Get all parent nodes

        for (int i = 0; i < parentNodes.getLength(); i++) {
            Element parent = (Element) parentNodes.item(i);

            switch (parent.getTagName()) {
                case "user_info":
                    saveUserInfo(parent);
                    break;
                // Add cases for other parent tags as needed
                // case "another_parent_tag":
                //     saveAnotherParentTagData(parent);
                //     break;
            }
        }

        return new ResponseEntity<>("Data saved successfully", HttpStatus.OK);
    } catch (Exception e) {
        e.printStackTrace();
        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

private void saveUserInfo(Element parent) {
    xmlEntity xmlEntity = new xmlEntity();

    xmlEntity.setLogonId(getElementValue(parent, "logon_id"));
    xmlEntity.setLastName(getElementValue(parent, "last_name"));
    xmlEntity.setPhoneNbr(getElementValue(parent, "phone_nbr"));
    xmlEntity.setJobTitle(getElementValue(parent, "job_title"));
    xmlEntity.setMiddleName(getElementValue(parent, "middle_name"));
    xmlEntity.setAreaCode(getElementValue(parent, "area_code"));
    xmlEntity.setFirstName(getElementValue(parent, "first_name"));
    xmlEntity.setEmailAddress(getElementValue(parent, "email_address"));

    repo.save(xmlEntity);
}

// Add similar methods for other parent tags as needed

private String getElementValue(Element parseElement, String childTagName) {
    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
    if (childNodes.getLength() > 0) {
        return childNodes.item(0).getTextContent();
    }
    return null;
}


private final xmlRepo repo;

@Autowired
public xmlController(xmlRepo repo) {
    this.repo = repo;
}

@GetMapping("/getxml")
public List<xmlEntity> getXmlData() {
    return repo.findAll();
}

@PostMapping("/process-xml")
public ResponseEntity<String> processXmlData(@RequestBody String xmlData) {

    try {
        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

        Element root = (Element) document.getElementsByTagName("user_info").item(0);
        xmlEntity xmlentity = new xmlEntity();

        xmlentity.setLogonId(getElementValue(root, "logon_id"));
        xmlentity.setLastName(getElementValue(root, "last_name"));
        xmlentity.setPhoneNbr(getElementValue(root, "phone_nbr"));
        xmlentity.setJobTitle(getElementValue(root, "job_title"));
        xmlentity.setMiddleName(getElementValue(root, "middle_name"));
        xmlentity.setAreaCode(getElementValue(root, "area_code"));
        xmlentity.setFirstName(getElementValue(root, "first_name"));
        xmlentity.setEmailAddress(getElementValue(root, "email_address"));

        repo.save(xmlentity);

        return new ResponseEntity<>("Data saved successfully", HttpStatus.OK);
    } catch (Exception e) {
        e.printStackTrace();
        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

private String getElementValue(Element parseElement, String childTagName) {
    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
    if (childNodes.getLength() > 0) {
        return childNodes.item(0).getTextContent();
    }
    return null;
}




private final xmlRepo repo;

@Autowired
public xmlController(xmlRepo repo) {
    this.repo = repo;
}

@GetMapping("/getxml")
public List<xmlEntity> getXmlData() {
    return repo.findAll();
}

@PostMapping("/process-xml")
public ResponseEntity<String> processXmlData(@RequestBody String xmlData) {

    try {
        DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
        Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));

        Element root = (Element) document.getElementsByTagName("user_info").item(0);
        xmlEntity xmlentity = new xmlEntity();

        xmlentity.setLogonId(getElementValue(root, "logon_id"));
        xmlentity.setLastName(getElementValue(root, "last_name"));
        xmlentity.setPhoneNbr(getElementValue(root, "phone_nbr"));
        xmlentity.setJobTitle(getElementValue(root, "job_title"));
        xmlentity.setMiddleName(getElementValue(root, "middle_name"));
        xmlentity.setAreaCode(getElementValue(root, "area_code"));
        xmlentity.setFirstName(getElementValue(root, "first_name"));
        xmlentity.setEmailAddress(getElementValue(root, "email_address"));

        repo.save(xmlentity);

        return new ResponseEntity<>("Data saved successfully", HttpStatus.OK);
    } catch (Exception e) {
        e.printStackTrace();
        return new ResponseEntity<>("Failed to process XML data", HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

private String getElementValue(Element parseElement, String childTagName) {
    NodeList childNodes = parseElement.getElementsByTagName(childTagName);
    if (childNodes.getLength() > 0) {
        return childNodes.item(0).getTextContent();
    }
    return null;
}


private final xmlRepo repo;
	@Autowired
	public xmlController(xmlRepo repo) {
		this.repo = repo;
	}
	@GetMapping("/getxml")
	public List<xmlEntity> getXmlData() {
		return repo.findAll();
	}
	@PostMapping("/process-xml")
	public ResponseEntity<String> processXmlData(@RequestBody String xmlData)
	{
		
		try {
			System.out.println("erro-1");
			DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
			Document document = dbuilder.parse(new InputSource(new StringReader(xmlData)));
			
			
		
			Element root=(Element) document.getElementsByTagName("plan_info").item(0);
//			NodeList personList= root.getElementsByTagName("person");
			xmlEntity xmlentity = new xmlEntity();
			
				xmlentity.setEvId(getElementValue(root,"ev_id"));
			 	xmlentity.setPlanName(getElementValue(root, "plan_name"));
	            xmlentity.setIrsrlCode(getElementValue(root, "irsrl_code"));
	            xmlentity.setProvCompany(getElementValue(root, "prov_company"));
	            xmlentity.setProdId(getElementValue(root, "prod_id"));
	            xmlentity.setStatusCode(getElementValue(root, "status_code"));
	            xmlentity.setDpDateTime(getElementValue(root, "dpdate_time"));
	            xmlentity.setRolloverInd(getElementValue(root, "rollover_ind"));
	            xmlentity.setGaId(getElementValue(root, "ga_id"));
	            xmlentity.setClientName(getElementValue(root, "client_name"));
	            xmlentity.setFirstLineMailing(getElementValue(root, "first_line_mailing"));
	            xmlentity.setScndLineMailing(getElementValue(root, "scnd_line_mailing"));
	            xmlentity.setCity(getElementValue(root, "city"));
	            xmlentity.setStateCode(getElementValue(root, "state_code"));
	            xmlentity.setZipCode(getElementValue(root, "zip_code"));
	            xmlentity.setCountry(getElementValue(root, "country"));
	            xmlentity.setInternalComplianceInd(getElementValue(root, "internal_compliance_ind"));
	            xmlentity.setPlanAnnivDate(getElementValue(root, "plan_anniv_date"));
	            xmlentity.setEstNumberOfParticipants(getElementValue(root, "est_number_of_participants"));
	            xmlentity.setEstPlanAssets(getElementValue(root, "est_plan_assets"));
	            xmlentity.setEstImplementationDate(LocalDate.parse(getElementValue(root, "est_implementation_date")));
	            xmlentity.setSubsetCashCode(getElementValue(root, "subset_cash_code"));
	            xmlentity.setClientEntityType(getElementValue(root, "client_entity_type"));
	            xmlentity.setTpaFirmId(getElementValue(root, "tpa_firm_id"));
	            System.out.println("erro2");
	            repo.save(xmlentity);

			return new ResponseEntity<String>("data success",HttpStatus.OK);
		}catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<String>("failed",HttpStatus.INTERNAL_SERVER_ERROR);
		}
			
		}
		private String getElementValue(Element parseElement,String childTagName) {
			NodeList childnodes = parseElement.getElementsByTagName(childTagName);
			if(childnodes.getLength()>0) {
				return childnodes.item(0).getTextContent();
			}
			return null;
		}


private String type;
    private String logonId;
    private String lastName;
    private String phoneNbr;
    private String jobTitle;
    private String middleName;
    private String areaCode;
    private String firstName;
    private String emailAddress;

private void replaceTags(HWPFDocument document, PlanInfo planInfo) {
        Range range = document.getRange();

        // Define your tag replacements
        Map<String, String> tagReplacements = Map.of(
                "{evId}", planInfo.getEvId(),
                "{planName}", planInfo.getPlanName(),
                // Add more tag replacements as needed
                "{anotherTag}", planInfo.getAnotherField()
        );

        // Iterate through the tag replacements
        for (Map.Entry<String, String> entry : tagReplacements.entrySet()) {
            String tag = entry.getKey();
            String replacement = entry.getValue();

            // Debugging: Print the tag and replacement value
            System.out.println("Replacing tag: " + tag);
            System.out.println("With value: " + replacement);

            // Replace the tag in the document
            range.replaceText(tag, replacement);
        }
    }
 

	



    PlanPremier®-TPA
Plan Provision Summary for:
<ssmPlanName> <ssmPlanNumber>

 


 	
Plan Provision Summary
<ssmPlanName>
<ssmPlanNumber>
		

The purpose of this Plan Provision Summary is to confirm existing plan specifications transferred 



	



TPA General Plan Information
	                                                                             
Is this an ERISA Plan?                                               
	<ssmblner~Y> Yes
<ssmblner~N> No  

Is this a Union plan? 	  <ssmblnUnionPlan> Yes
  <ssmblnUnionPlan> No
<ssmPlanName> Original Plan effective Date:                        
	<ssmOrigPlanEffDate>







¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬Rollovers
Indicate the rollover types allowed by the plan:    

Are 401 rollovers allowed by the plan?
	<ssmbln401Roll~Y> Yes	
<ssmbln401Roll~N> No  
Are IRA rollovers allowed by the plan?
 	<ssmblnIRARoll~Y> Yes	
<ssmblnIRARoll~N> No  
Are Roth rollovers allowed by the plan?
 	<ssmblnRothRoll~Y> Yes	
<ssmblnRothRoll~N> No  
Are 403b rollovers allowed by the plan?
 	<ssmbln403bRoll~Y> Yes	
<ssmbln403bRoll~N> No  
Are 457 rollovers allowed by the plan?
 	<ssmbln457Roll~Y> Yes	
<ssmbln457Roll~N> No  
Are after-tax rollovers allowed by the plan?
 	<ssmblnATKRoll~Y> Yes	
<ssmblnATKRoll~N> No 



¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬ 401(k) Contributions

 Employee elective deferrals allowed by the Plan?                                                       	<ssmblnBEF~Y> Yes	
<ssmblnBEF~N> No 	

Is the plan a Safe Harbor 401(k)?                                                                                            	<ssmblnSHPlan~Y> Yes	
<ssmblnSHPlan~N> No  	

Will American Funds be tracking deferrals?                                                                                       	  <ssmblnAFDefTrack> Yes
  <ssmblnAFDefTrack> No
How do you want the deferrals tracked?
 
Percentage                                                                                                                                                                          
 
Minimum deferral percentage
<ssmMinDefPerBTK> %
Maximum deferral percentage
<ssmMaxDefPerBTK>%
Dollars                                                                                                                                                                                 
 
Minimum annual deferral amount
$<ssmMinDefDolBTK>
Maximum annual deferral amount
<ssmMaxDefDolBTK>
Dollars and Percentage                                                                                                                                                               
Minimum annual deferral amount 
$<ssmMinDefDolBTK>	Minimum deferral percentage
<ssmMinDefPerBTK>%
Maximum annual deferral amount 
<ssmMaxDefDolBTK>	Maximum deferral percentage
<ssmMaxDefPerBTK> %




¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬ 401(k) Catch-up Contributions

Are Catch-up elections allowed?                                                                       	<ssmblnCatchUp~Y> Yes  	
<ssmblnCatchUp~N> No	

Does your payroll software require catch-ups to be tracked separately?                                                                                        	<ssmblnCatchUptrack~Y> Yes  	
<ssmblnCatchUptrack~N> No	

How should be tracked?
 	  <ssmCatchUpDefTrackMethod>




¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬Auto-Enrollment Feature

Does the Plan utilize an automatic enrollment feature?   	<ssmblnautoenroll~Y>  Yes	
<ssmblnautoenroll~N>  No  	

Will American Funds track automatic enrollment?   	<ssmblnAFautoenrolltrack~Y> Yes 	
<ssmblnAFautoenrolltrack~N> No
	

Is this an existing Automatic Enrollment feature?  	<ssmblnexistautoenroll~Y> Yes   	
<ssmblnexistautoenroll~N> No	

Do you want to have American Funds mail annual Automatic Enrollment notices to participants?	<ssmblnAFannNotification~Y> Yes   	
<ssmblnAFannNotification~N> No	

Type of Automatic Enrollment Arrangement used	<ssmblnQACAType~Y> QACA 
<ssmblnEACA~Y>  EACA
<ssmblnACA~Y> ACA



 




¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬QACA Provisions

What is the beginning default auto-enroll percentage (3% - 10%)	  <ssmQACAdefautoenrollPer> %   
Will the plan increase the default deferral percentage?
Note: Scheduled deferral increase are required if the beginning default auto enroll is less than 6%.	<ssmblnQACAdefinc~Y> Yes	
<ssmblnQACAdefinc~N> No	

What percentage will the automatic deferral increase annually?   
Note: Increases will be applied at the beginning of each plan year.  For the first increase, this will occur at the beginning of the plan year once the participant is at the initial default rate for a minimum of 12 months.	  <ssmQACAannualDefInc> %  
Maximum automatic deferral percentage:	  <ssmQACAmaxAutoDef>%  
Safe Harbor election method:   	  <ssmQACASHelection>
QACA Vesting schedule:	  <ssmQACAVestingSch>
Please describe your Vesting Schedule:	  <ssmQACAVestingSchDesc>
Can forfeitures be used to pay plan expenses?	<ssmblnQACAForfPayExp~Y> Yes    
<ssmblnQACAForfPayExp~N> No  

Can forfeitures be used to reallocate?	<ssmblnQACAForfRealloc~Y> Yes 
<ssmblnQACAForfRealloc~N> No  

Can forfeitures be used to reduce employer contributions?	<ssmblnQACARedERCont~Y> Yes    
<ssmblnQACARedERCont~N> No  

Can forfeitures be used for the same money type as the QACA or all employer monies?	  <ssmQACAForfRedMethod>  
Will the plan allow the permissible withdrawal election?  
Note: QDIA election applies to QACA if the 90 day permissible withdrawals is permitted.	<ssmblnPermWD~Y> Yes	
<ssmblnPermWD~N> No	

How will the QACA provision be applied? – Not applicable if Automatic Enrollment feature was previously existing
<ssmblnQACAapply~Option A>	Option A: applies to all participants regardless of any prior salary reduction agreement unless and until they make a contrary election after the Automatic Deferral Effective Date.
<ssmblnQACAapply~Option B>	Option B: only to participants whose current salary reduction agreement is less than the automatic deferral percentage. 
<ssmblnQACAapply~Option C>	Option C: applies only to participants who do not have an existing salary reduction agreement in effect.


  
¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬EACA Provisions

What is the beginning default auto-enroll percentage (3% - 10%)	  <ssmEACAdefautoenroll>%   
Will the plan increase the default deferral percentage?	<ssmblnEACAdefinc~Y> Yes	
<ssmblnEACAdefinc~N> No	

What percentage will the automatic deferral increase annually?   
Note: Increases will applied at the beginning of each plan year.	  <ssmEACAannualDefInc>%
Maximum automatic deferral percentage:	  <ssmEACAmaxAutoDef>%        
How will the EACA provision be applied? – Not applicable if Automatic Enrollment Feature was previously existing
Note: To take advantage of the 6 month extension for discrimination testing, the EACA provision must apply to all existing participants within the plan (defined as Covered Employees by the IRS).
<ssmblnEACAapply~Option A>	Option A: applies to all participants regardless of any prior salary reduction agreement unless and until they make a contrary election after the Automatic Deferral Effective Date.
<ssmblnEACAapply~Option B>	Option B - only to participants whose current salary reduction agreement is less than the automatic deferral percentage.     
<ssmblnEACAapply~Option C>	Option C - only to those participants who do not have an existing salary reduction agreement in effect     
<ssmblnEACAapply~Option D>	Option D: applies only to those employees who become eligible on or after the following date:  <ssmEACAapplydate> (Note: option D is only available if you have a record of all affirmative elections from all eligible employees prior to the automatic deferral effective date.  The 6 month extension for discrimination testing will not apply if this provision D is selected. 
 


¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬ACA Provisions

What is the beginning default auto-enroll percentage (1% - 10%)	  <ssmACAdefAutoEnroll>%   
Will the plan increase the default deferral percentage?	<ssmblnACAdefinc~Y> Yes	
<ssmblnACAdefinc~N> No  	

What percentage will the automatic deferral increase annually?   	  <ssmACAannualDefinc>%  
Maximum automatic deferral percentage:	  <ssmACAmaxAutoDefPer>%        
How will the ACA provision be applied? – Not applicable if the Automatic Enrollment feature was previously existing.
The Permissible withdrawal election is not allowed under ACA.
<ssmblnACAapply~Option A>	Option A: applies to all participants regardless of any prior salary reduction agreement unless and until they make a contrary election after the Automatic Deferral Effective Date.
<ssmblnACAapply~Option B>	Option B: only to participants whose current salary reduction agreement is less than the automatic deferral percentage.
<ssmblnACAapply~Option C>	Option C: applies only to participants who do not have an existing salary reduction agreement in effect.
<ssmblnACAapply~Option D>	Option D: apply only to those employees who become eligible on or after the following date:  <ssmACAapplydate>  (NoteL option D is only available if you have a record of all affirmative elections from all eligible employees prior to the automatic deferral effective date.

Please note:  Automatic Enrollment requires an initial notice be provided to participants prior to their participation in the plan.  American Funds can provide you with a sample notice that you can customize and provide to your participants. 





¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬Match Contributions

Will the plan make matching contributions?                                          	<ssmblnMatch~Y> Yes
<ssmblnMatch~N> No

Is the matching formula a fixed or discretionary contribution? 
 	  <ssmebmatchformula> 
Will the participants be restricted from directing how the match is invested?                                                                                                         	<ssmblnMatchERDirected~Y> Yes    
<ssmblnMatchERDirected~N> No  

Vesting Schedule?                                                                                      	<ssmMatchVestingSch>
Please describe your Vesting Schedule:                                               	<ssmMatchVestingSchDesc> 

Can forfeitures be used to pay Plan expenses?                         
 	<ssmblnMatchForfPayExp~Y> Yes    
<ssmblnMatchForfPayExp~N> No  

Can forfeitures be reallocated to participants in excess of existing Match contribution?                                                                               
 	<ssmblnMatchForfRealloc~Y> Yes 
<ssmblnMatchForfRealloc~N> No  

Can forfeiture money be used to reduce the employers contributions?                                                                                                   	<ssmblnMatchRedERCont~Y> Yes    
<ssmblnMatchRedERCont~N> No  

Can forfeitures be used for match only or all employer monies?                                                                                    	  <ssmMatchForfRedMethod>  
Allocation conditions of Employer Matching contributions?	  <ssmblnMatchAllocCond~Y> Yes
  <ssmblnMatchAllocCond~N> No 
Must be employed on the last day of the plan year OR have more than 500 hours of service for the plan year?	  <ssmblnMatchLDor500~Y> Yes
  <ssmblnMatchLDor500~N> No
Must be employed on the last day of the plan year?	  <ssmblnMatchLastDay~Y> Yes
  <ssmblnMatchLastDay~N> No
Must be credited with hours of service?	  <ssmblnMatchHourServ~Y> Yes
  <ssmblnMatchHourServ~N> No
What are the minimum credit hours of service?	  <ssmMatchMinServ>
The Match allocation conditions will not apply if the participant:	  <ssmMatchDeathExclude>
  <ssmMatchNRAExclude>
  <ssmMatchDisabledExclude>




¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬Profit Sharing Contributions

Does the Plan allow for profit sharing contributions?                  
 	<ssmblnPS~Y> Yes  	
<ssmblnPS~N> No	

Will the participants be restricted from directing how the profit sharing is invested?                                                                           
 	<ssmblnPSERDirected~Y> Yes  	
<ssmblnPSERDirected~N> No	

Vesting schedule?                                                                                	<ssmPSVestingSch>
Please describe your Vesting Schedule:                                          
 	<ssmPSVestingSchDesc> 
Can forfeitures be used to pay plan expenses?                                                   	<ssmblnPSForfPayExp~Y> Yes	
<ssmblnPSForfPayExp~N>No  	

Can forfeitures be used to reallocate?                                            
 	<ssmblnPSForfRealloc~Y> Yes 	
<ssmblnPSForfRealloc~N> No  	

Can forfeiture money be used to reduce the employers contributions?                                                                           
 	<ssmblnPSRedERCont~Y> Yes    	
<ssmblnPSRedERCont~N> No  	

Can forfeitures be used for profit sharing only or all employer monies?                                                                
 	  <ssmPSForfRedMethod>  

Allocation conditions of Profit Sharing contributions?	  <ssmblnPSAllocCond~Y> Yes
  <ssmblnPSAllocCond~N> No
Must be employed on the last day of the plan year OR have more than 500 hours of service for the plan year?	  <ssmblnPSAllocCondLD500~Y> Yes
  <ssmblnPSAllocCondLD500~N> No
Must be employed on the last day of the plan year?	  <ssmblnPSAllocCondLD~Y> Yes
  <ssmblnPSAllocCondLD~N> No
Must be credited with hours of service?	  <ssmblnPSAllocCondHrsServ~Y> Yes
  <ssmblnPSAllocCondHrsServ~N> No
What are the minimum credit hours of service?	  <ssmPSAllocCondMinHrsServ>
The Profit Sharing allocation conditions will not apply if the participant:	  <ssmPSDeathExclude>
  <ssmPSNRAExclude>
  <ssmPSDisabledExclude>




¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬Money Purchase Contributions

Does the Plan allow for money purchase contributions?          
 	<ssmblnMP~Y> Yes
<ssmblnMP~N> No  

What is the Money Purchase contribution formula that should be displayed in the enrollment guide? 
 	<ssmebmoneypurchase>
Will the participants be restricted from directing how the money purchase is invested:
 	<ssmblnMPERDirected~Y> Yes
<ssmblnMPERDirected~N> No

Vesting schedule?  
 	<ssmMPVestingSch>
Please describe your Vesting Schedule  
 	<ssmMPVestingSchDesc> 
Can forfeitures be used to pay plan expenses?    
 	<ssmblnMPForfPayExp~Y> Yes  
<ssmblnMPForfPayExp~N> No  

Can forfeitures be used to reallocate?    
 	<ssmblnMPForfRealloc~Y> Yes   
<ssmblnMPForfRealloc~N> No  

Can forfeiture money be used to reduce the employers contributions?    
 	<ssmblnMPRedERCont~Y> Yes  
<ssmblnMPRedERCont~N> No  

Allocation conditions of Money Purchase contributions?	  <ssmblnMPAllocCond~Y> Yes
  <ssmblnMPAllocCond~N> No 
Must be employed on the last day of the plan year OR have more than 500 hours of service for the plan year?	  <ssmblnMPAllocCondLD500~Y> Yes
  <ssmblnMPAllocCondLD500~N> No
Must be employed on the last day of the plan year?	  <ssmblnMPAllocCondLD~Y> Yes
  <ssmblnMPAllocCondLD~N> No
Must be credited with hours of service?	  <ssmblnMPAllocCondHrsServ~Y> Yes
  <ssmblnMPAllocCondHrsServ~N> No
What are the minimum credit hours of service?	  <ssmMPAllocCondMinHrsServ>
The Money Purchase allocation conditions will not apply if the participant:	  <ssmMPDeathExclude>
  <ssmMPNRAExclude>
  <ssmMPDisabledExclude>




After-Tax Contributions

Are after-tax contributions allowed by the Plan?                         
 	<ssmblnATK~Y> Yes
<ssmblnATK~N> No  

How do you want after-tax contributions tracked?                         
 	  <ssmAftTaxDef>
Is there a minimum after-tax percentage allowed by the Plan? 
 	  <ssmATKMinPer>%
Is there a maximum after-tax percentage allowed by the Plan? 
 	  <ssmATKMaxPer>%

Is there a minimum after-tax amount allowed by the Plan? 
Page 3	  $<ssmATKMinDol>
 
Is there a maximum after-tax amount allowed by the Plan? 
Page 3	  $<ssmATKMaxDol>





Roth Contributions

Are Roth contributions allowed by the plan?                      
 	<ssmblnRoth~Y> Yes
<ssmblnRoth~N> No  

Does the plan allow Roth Corrective distributions?       
 	<ssmblnRothCorrDist~Y> Yes
<ssmblnRothCorrDist~N> No   

Does the plan allow In Plan Roth Rollovers?                   
 	<ssmblnInPlanRothRollover~Y> Yes
<ssmblnInPlanRothRollover~N> No  

Does the plan allow In Plan Roth Transfers?                     
 	<ssmblnInPlanRothTransfer~Y> Yes
<ssmblnInPlanRothTransfer~N> No

Are there any other distributable events applicable to In Plan Roth Rollovers that are not otherwise allowable in-service distributions?                                                                  
 	<ssmblnInPlanRothOtherDist~Y> Yes
<ssmblnInPlanRothOtherDist~N> No

Please describe if you have any restrictions on In Plan Roth Rollovers/Transfers (e.g., 100% vesting requirements, money source limitations, etc.), or input "None" in following text box:
 	<ssmebInPlanRothRestDesc>
Confirm the money type order for corrective distributions: 
 	<ssmRothCorrDistWDOrder>




Additional Money Types


Does the plan allow for a non-QACA Safe Harbor Match?         
 	  <ssmblnNon_QACA_Safe_Harbor_Match~Y> Yes
  <ssmblnNon_QACA_Safe_Harbor_Match~N> No
Does the plan allow for a non-QACA Safe Harbor Profit Sharing?                                                                               	  <ssmblnNon_QACA_Safe_Harbor_Profit_Sharing~Y> Yes
  <ssmblnNon_QACA_Safe_Harbor_Profit_Sharing~N> No
Does the plan allow for a Qualified Matching Contribution (QMAC)? 
 	  <ssmblnQMAC~Y> Yes
  <ssmblnQMAC~N> No
Does the plan allow for a Qualified Non-Elective Contribution (QNEC)?                                                                                    	  <ssmblnQNEC~Y> Yes
  <ssmblnQNEC~N> No



Fatal Error] :3:1: Content is not allowed in prolog.
org.xml.sax.SAXParseException; lineNumber: 3; columnNumber: 1; Content is not allowed in prolog.
	at java.xml/com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:262)


planInfo.setEvId(getChildElementValue(planInfoElement, "ev_id"));
            planInfo.setPlanName(getChildElementValue(planInfoElement, "plan_name"));
            planInfo.setIrsrlCode(getChildElementValue(planInfoElement, "irsrl_code"));
            planInfo.setProvCompany(getChildElementValue(planInfoElement, "prov_company"));
            planInfo.setProdId(getChildElementValue(planInfoElement, "prod_id"));
            planInfo.setStatusCode(getChildElementValue(planInfoElement, "status_code"));
            planInfo.setDpDateTime(getChildElementValue(planInfoElement, "dpdate_time"));
            planInfo.setRolloverInd(getChildElementValue(planInfoElement, "rollover_ind"));
            planInfo.setGaId(getChildElementValue(planInfoElement, "ga_id"));
            planInfo.setClientName(getChildElementValue(planInfoElement, "client_name"));
            planInfo.setFirstLineMailing(getChildElementValue(planInfoElement, "first_line_mailing"));
            planInfo.setScndLineMailing(getChildElementValue(planInfoElement, "scnd_line_mailing"));
            planInfo.setCity(getChildElementValue(planInfoElement, "city"));
            planInfo.setStateCode(getChildElementValue(planInfoElement, "state_code"));
            planInfo.setZipCode(getChildElementValue(planInfoElement, "zip_code"));
            planInfo.setCountry(getChildElementValue(planInfoElement, "country"));
            planInfo.setInternalComplianceInd(getChildElementValue(planInfoElement, "internal_compliance_ind"));
            planInfo.setPlanAnnivDate(getChildElementValue(planInfoElement, "plan_anniv_date"));
            planInfo.setEstNumberOfParticipants(Integer.parseInt(getChildElementValue(planInfoElement, "est_number_of_participants")));
            planInfo.setEstPlanAssets(Long.parseLong(getChildElementValue(planInfoElement, "est_plan_assets")));
            planInfo.setEstImplementationDate(LocalDate.parse(getChildElementValue(planInfoElement, "est_implementation_date")));
            planInfo.setSubsetCashCode(getChildElementValue(planInfoElement, "subset_cash_code"));
            planInfo.setClientEntityType(getChildElementValue(planInfoElement, "client_entity_type"));
            planInfo.setTpaFirmId(getChildElementValue(planInfoElement, "tpa_firm_id"));

            planInfoRepository.save(planInfo)
;


024-02-11T23:17:36.301-07:00  INFO 9500 --- [nio-8081-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "db_key" (class newxml.PlanInfo), not marked as ignorable (24 known properties: "subsetCashCode", "estNumberOfParticipants", "dpDateTime", "clientEntityType", "city", "evId", "rolloverInd", "irsrlCode", "prodId", "planAnnivDate", "planName", "gaId", "clientName", "stateCode", "statusCode", "firstLineMailing", "zipCode", "scndLineMailing", "estPlanAssets", "provCompany", "country", "tpaFirmId", "internalComplianceInd", "estImplementationDate"])
 at [Source: (StringReader); line: 3, column: 93] (through reference chain: newxml.PlanInfo["db_key"])
	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:1138)
	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:2224)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1709)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1687)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:320)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:177)
	at com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(XmlDeserializationContext.java:91)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4825)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3772)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3740)
	at newxml.PlanInfoController.createPlanInfoFromXml(PlanInfoController.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.s


package newxml;

import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class PlanInfo {

    @Id
    private String evId;
    private String planName;
    private String irsrlCode;
    private String provCompany;
    private String prodId;
    private String statusCode;
    private String dpDateTime;
    private String rolloverInd;
    private String gaId;
    private String clientName;
    private String firstLineMailing;
    private String scndLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String internalComplianceInd;
    private String planAnnivDate;
    private int estNumberOfParticipants;
    private long estPlanAssets;
    private LocalDate estImplementationDate;
    private String subsetCashCode;
    private String clientEntityType;
    private String tpaFirmId;
	
    
    
    public String getEvId() {
        return evId;
    }

    public void setEvId(String evId) {
        this.evId = evId;
    }
	public String getPlanName() {
		return planName;
	}
	public void setPlanName(String planName) {
		this.planName = planName;
	}
	public String getIrsrlCode() {
		return irsrlCode;
	}
	public void setIrsrlCode(String irsrlCode) {
		this.irsrlCode = irsrlCode;
	}
	public String getProvCompany() {
		return provCompany;
	}
	public void setProvCompany(String provCompany) {
		this.provCompany = provCompany;
	}
	public String getProdId() {
		return prodId;
	}
	public void setProdId(String prodId) {
		this.prodId = prodId;
	}
	public String getStatusCode() {
		return statusCode;
	}
	public void setStatusCode(String statusCode) {
		this.statusCode = statusCode;
	}
	public String getDpDateTime() {
		return dpDateTime;
	}
	public void setDpDateTime(String dpDateTime) {
		this.dpDateTime = dpDateTime;
	}
	public String getRolloverInd() {
		return rolloverInd;
	}
	public void setRolloverInd(String rolloverInd) {
		this.rolloverInd = rolloverInd;
	}
	public String getGaId() {
		return gaId;
	}
	public void setGaId(String gaId) {
		this.gaId = gaId;
	}
	public String getClientName() {
		return clientName;
	}
	public void setClientName(String clientName) {
		this.clientName = clientName;
	}
	public String getFirstLineMailing() {
		return firstLineMailing;
	}
	public void setFirstLineMailing(String firstLineMailing) {
		this.firstLineMailing = firstLineMailing;
	}
	public String getScndLineMailing() {
		return scndLineMailing;
	}
	public void setScndLineMailing(String scndLineMailing) {
		this.scndLineMailing = scndLineMailing;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getStateCode() {
		return stateCode;
	}
	public void setStateCode(String stateCode) {
		this.stateCode = stateCode;
	}
	public String getZipCode() {
		return zipCode;
	}
	public void setZipCode(String zipCode) {
		this.zipCode = zipCode;
	}
	public String getCountry() {
		return country;
	}
	public void setCountry(String country) {
		this.country = country;
	}
	public String getInternalComplianceInd() {
		return internalComplianceInd;
	}
	public void setInternalComplianceInd(String internalComplianceInd) {
		this.internalComplianceInd = internalComplianceInd;
	}
	public String getPlanAnnivDate() {
		return planAnnivDate;
	}
	public void setPlanAnnivDate(String planAnnivDate) {
		this.planAnnivDate = planAnnivDate;
	}
	public int getEstNumberOfParticipants() {
		return estNumberOfParticipants;
	}
	public void setEstNumberOfParticipants(int estNumberOfParticipants) {
		this.estNumberOfParticipants = estNumberOfParticipants;
	}
	public long getEstPlanAssets() {
		return estPlanAssets;
	}
	public void setEstPlanAssets(long estPlanAssets) {
		this.estPlanAssets = estPlanAssets;
	}
	public LocalDate getEstImplementationDate() {
		return estImplementationDate;
	}
	public void setEstImplementationDate(LocalDate estImplementationDate) {
		this.estImplementationDate = estImplementationDate;
	}
	public String getSubsetCashCode() {
		return subsetCashCode;
	}
	public void setSubsetCashCode(String subsetCashCode) {
		this.subsetCashCode = subsetCashCode;
	}
	public String getClientEntityType() {
		return clientEntityType;
	}
	public void setClientEntityType(String clientEntityType) {
		this.clientEntityType = clientEntityType;
	}
	public String getTpaFirmId() {
		return tpaFirmId;
	}
	public void setTpaFirmId(String tpaFirmId) {
		this.tpaFirmId = tpaFirmId;
	}
	@Override
	public String toString() {
		return "PlanInfo [ evId=" + evId + ", planName=" + planName + ", irsrlCode=" + irsrlCode
				+ ", provCompany=" + provCompany + ", prodId=" + prodId + ", statusCode=" + statusCode + ", dpDateTime="
				+ dpDateTime + ", rolloverInd=" + rolloverInd + ", gaId=" + gaId + ", clientName=" + clientName
				+ ", firstLineMailing=" + firstLineMailing + ", scndLineMailing=" + scndLineMailing + ", city=" + city
				+ ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
				+ ", internalComplianceInd=" + internalComplianceInd + ", planAnnivDate=" + planAnnivDate
				+ ", estNumberOfParticipants=" + estNumberOfParticipants + ", estPlanAssets=" + estPlanAssets
				+ ", estImplementationDate=" + estImplementationDate + ", subsetCashCode=" + subsetCashCode
				+ ", clientEntityType=" + clientEntityType + ", tpaFirmId=" + tpaFirmId + "]";
	}

    // Constructors, getters, setters...
    
}
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.11.0</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
</build>
<dependencies>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.13.0</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>5.0.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.0.0</version>
    </dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	

// DataTable.js

import React, { useState, useEffect } from 'react';

const DataTable = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    // Fetch data from API when the component mounts
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      // Replace 'your-api-endpoint' with the actual API endpoint
      const response = await fetch('http://localhost:8085/');
      const result = await response.json();
      setData(result); // Set the fetched data to the state
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  return (
    <div>
      <h1>Data Table</h1>
      <table>
        <thead>
          <tr>
            {/* Map column headers based on the structure of your data */}
            {Object.keys(data[0] || {}).map((header, index) => (
              <th key={index}>{header}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {/* Map data rows */}
          {data.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {/* Map row values based on the structure of your data */}
              {Object.values(row).map((value, columnIndex) => (
                <td key={columnIndex}>{value}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DataTable;


import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class XmlDataParser {

    public static void main(String[] args) throws Exception {
        // Load XML file
        File xmlFile = new File("yourXMLfile.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document document = dBuilder.parse(xmlFile);
        document.getDocumentElement().normalize();

        // Map to store data
        Map<String, Map<String, String>> parentDataMap = new HashMap<>();

        // Get all parent elements
        NodeList parentElements = document.getElementsByTagName("parentElementName");

        for (int i = 0; i < parentElements.getLength(); i++) {
            Node parentElementNode = parentElements.item(i);

            if (parentElementNode.getNodeType() == Node.ELEMENT_NODE) {
                Element parentElement = (Element) parentElementNode;

                // Map to store child element data
                Map<String, String> childDataMap = new HashMap<>();

                // Get all child elements inside the parent element
                NodeList childElements = parentElement.getChildNodes();

                for (int j = 0; j < childElements.getLength(); j++) {
                    Node childNode = childElements.item(j);

                    if (childNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element childElement = (Element) childNode;
                        String elementName = childElement.getNodeName();
                        String elementValue = childElement.getTextContent();

                        // Store child element data in the inner map
                        childDataMap.put(elementName, elementValue);
                    }
                }

                // Store the inner map in the outer map with parent element name as the key
                parentDataMap.put(parentElement.getNodeName(), childDataMap);
            }
        }

        // Print or use the resulting data map as needed
        System.out.println(parentDataMap);
    }
}


import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class XmlDataToObject {

    public static void main(String[] args) {
        try {
            // Parse the XML file
            File xmlFile = new File("yourXMLfile.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document document = dBuilder.parse(xmlFile);
            document.getDocumentElement().normalize();

            // Create a Map to store element name and data
            Map<String, String> dataMap = new HashMap<>();

            // Specify the element name you want to retrieve
            String targetElement = "yourElement";

            // Get the NodeList of elements with the specified name
            NodeList nodeList = document.getElementsByTagName(targetElement);

            // Iterate through the NodeList and store data in the map
            for (int i = 0; i < nodeList.getLength(); i++) {
                Element element = (Element) nodeList.item(i);
                String elementName = element.getNodeName();
                String elementData = element.getTextContent();
                dataMap.put(elementName, elementData);
            }

            // Print or use the dataMap as needed
            System.out.println(dataMap);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version> <!-- Use the latest version available -->
</dependency>

import com.fasterxml.jackson.databind.ObjectMapper;

// Assuming your data is in a Map<String, String> called extractedData
ObjectMapper objectMapper = new ObjectMapper();
String jsonData = objectMapper.writeValueAsString(extractedData);


NodeList nodeList = document.getElementsByTagName("yourElement");
String data = nodeList.item(0).getTextContent();

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = factory.newDocumentBuilder();
Document document = builder.parse(new File("yourXMLfile.xml"));
  export const Foo = () => (
  <form>
    <div className="form-row">
      <div className="form-group col-md-4">
        <input type="text" className="form-control" id="planYearEnds" />
        <label htmlFor="planYearEnds">Plan Year Ends</label>
      </div>
      <div className="form-group col-md-4">
        <button
          type="button"
          className="btn btn-secondary"
          id="servicesAndBilling"
        >
          Services And Billing
        </button>
      </div>
      <div className="form-group col-md-4">
        <button type="button" className="btn btn-secondary" id="pyeTesting1">
          PYE Testing
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <label>YEAR END INFO</label>
      </div>
      <div className="form-group col-md-2">
        <label>COUNTS</label>
      </div>
      <div className="form-group col-md-8">
        <label>5500 INFO</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="yearEnd" />
        <label htmlFor="yearEnd">Year End</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="eligibleEmployees" />
        <label htmlFor="eligibleEmployees">Eligible Employees</label>
      </div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="xml5500">
          5500 XML
        </button>
        <button type="button" className="btn btn-primary" id="email5500">
          5500 Email
        </button>
      </div>
      <div className="form-group col-md-3">
        <input type="text" className="form-control" id="type5500" />
        <label htmlFor="type5500">5500 Type</label>
      </div>
      <div className="form-group col-md-3">
        <input type="text" className="form-control" id="filingStatus" />
        <label htmlFor="filingStatus">Filing Status</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="yearStart" />
        <label htmlFor="yearStart">Year Start</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="totalEmployees" />
        <label htmlFor="totalEmployees">Total Employees</label>
      </div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="yeq">
          YEQ
        </button>
        <button type="button" className="btn btn-primary" id="dfvcEmail">
          DFVC Email
        </button>
      </div>
      <div className="form-group col-md-3">
        <input type="text" className="form-control" id="signer5500" />
        <label htmlFor="signer5500">5500 Signer</label>
        <div className="form-check">
          <label className="form-check-label">
            <input
              className="form-check-input"
              id="partial5500"
              type="checkbox"
            />{" "}
            5500 Partial
          </label>
        </div>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="taxYear" />
        <label htmlFor="taxYear">Tax Year</label>
      </div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="resetPortalUser">
          Reset Portal User
        </button>
        <button type="button" className="btn btn-primary" id="addCompanyToFTW">
          Add Company to FTW
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="pointsValue" />
        <label htmlFor="pointsValue">Points Value</label>
      </div>
      <div className="form-group col-md-2">
        <button
          type="button"
          className="btn btn-primary"
          id="contributionSources"
        >
          Contribution Sources
        </button>
        <button type="button" className="btn btn-primary" id="moveItemsToPSC">
          Move Items To PSC
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <label>SERVICES</label>
      </div>
      <div className="form-group col-md-6">
        <label>FORFEITURE INFO</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="planDocument"
            />{" "}
            Plan Document
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="yearEndComplianceTesting"
            />{" "}
            Year End Compliance Testing
          </label>
        </div>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="matchForfType" />
        <label htmlFor="matchForfType">Match Forf Type</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="matchForfAmt" />
        <label htmlFor="matchForfAmt">Match Forf Amt</label>
      </div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="folder">
          Folder
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="midYrComplianceTesting"
            />{" "}
            Mid Yr Compliance Testing
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="preparation5500"
            />{" "}
            5500 Preparation
          </label>
        </div>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="psForfType" />
        <label htmlFor="psForfType">P/S Forf Type</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="psForfAmt" />
        <label htmlFor="psForfAmt">P/S Forf Amt</label>
      </div>
      <div className="form-group col-md-2"></div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="employerAllocations"
            />{" "}
            Employer Allocations
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="matchingAllocations"
            />{" "}
            Matching Allocations
          </label>
        </div>
      </div>
      <div className="form-group col-md-2">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="unusedForfeitures"
            />{" "}
            Unused Forfeitures
          </label>
        </div>
      </div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2"></div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="shMatchCalc"
            />{" "}
            SH Match - Calc
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="shNonElectiveCalc"
            />{" "}
            SH Non Elective - Calc
          </label>
        </div>
      </div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2"></div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <label>SCRIPTING</label>
      </div>
      <div className="form-group col-md-6">
        <label>PLAN FEATURES</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="mmlContribution"
            />{" "}
            MML Contribution
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="stopAutomation"
            />{" "}
            Stop Automation
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="easyEligibility"
            />{" "}
            EASY Eligibility
          </label>
        </div>
        <input type="text" className="form-control" id="ascNumber" />
        <label htmlFor="ascNumber">ASC Number</label>
      </div>
      <div className="form-group col-md-3">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="safeHarborPlan"
            />{" "}
            Safe Harbor Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="safeHarborAdpAcp"
            />{" "}
            Safe Harbor ADP/ACP
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="simplePlan"
            />{" "}
            Simple Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="newComp" />{" "}
            New Comp
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="ageWeighted"
            />{" "}
            Age Weighted
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="afterTax" />{" "}
            After Tax
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="nonErisaPlan"
            />{" "}
            Non Erisa Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="matchOnlyPlan"
            />{" "}
            Match Only Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="qaca" />{" "}
            QACA
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="eaca" />{" "}
            EACA (6 month correction)
          </label>
        </div>
      </div>
      <div className="form-group col-md-3">
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="svcMatch" />{" "}
            Svc Match
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="nav" /> NAV
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="pdiData" />{" "}
            PDI Data
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="lifeInsurance"
            />{" "}
            Life Insurance
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="churchCertiInsert"
            />{" "}
            Church Certi Insert
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="noCatchup"
            />{" "}
            No Catch-up
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="multipleEr"
            />{" "}
            Multiple ER
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="controlledGroup"
            />{" "}
            Controlled Group
          </label>
        </div>
        <button
          type="button"
          className="btn btn-primary"
          id="controlledGroupButton"
        >
          Controlled Group
        </button>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="testByLocation"
            />{" "}
            Test By Location
          </label>
        </div>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-12">
        <input type="text" className="form-control" id="installationNote" />
        <label htmlFor="installationNote">Comments</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="planSpecs">
          Plan Specs
        </button>
      </div>
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="pyeTesting2">
          PYE Testing
        </button>
      </div>
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="pyeQa">
          PYE QA
        </button>
      </div>
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="teamChecklist">
          Team Checklist
        </button>
      </div>
    </div>
    <button type="submit" className="btn btn-primary">
      Submit
    </button>
  </form>
)

package com.empower.email;

import java.io.IOException;
import java.io.InputStream;

//import java.net.http.HttpHeaders;
import org.springframework.http.HttpHeaders;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.http.MediaType;
import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;


@RestController
@CrossOrigin("*")
public class Emailcon {
	@Autowired
	private JavaMailSender mailsend;
	private static final String UPLOAD_DIR = "D:\\python presidency";
	
	@GetMapping("/files")
    public ResponseEntity<List<String>> getFiles() {
        try {
            // List all files in the directory
            List<String> files = Arrays.stream(Paths.get(UPLOAD_DIR).toFile().list())
                    .collect(Collectors.toList());
            return ResponseEntity.ok(files);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }
//	@GetMapping("/{filename}")
//	public static void openFile(@PathVariable String filePath) {
//        try {
//            // Convert the file path to a URI
//            URI uri = Paths.get(filePath).toUri();
//
//            // Open the file with the default system application
//            Desktop.getDesktop().browse(uri);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }

//	@GetMapping("/{filename}")
//	public ResponseEntity<UrlResource> downloadFile(@PathVariable String filename) {
//	    try {
//	        // Load file as UrlResource
//	        Path filePath = Paths.get(UPLOAD_DIR).resolve(filename).normalize();
//	        UrlResource urlResource = new UrlResource(filePath.toUri());
//
//	        // Check if the file exists
//	        if (urlResource.exists()) {
//	            return ResponseEntity.ok()
//	                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + urlResource.getFilename() + "\"")
//	                    .body(urlResource);
//	        } else {
//	            return ResponseEntity.status(404).body(null);
//	        }
//	    } catch (IOException e) {
//	        return ResponseEntity.status(500).body(null);
//	    }
//	}
	
	

	// ... (other imports)

	@GetMapping("/{filename}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable String filename) {
        try {
            // Load file content as bytes
            Path filePath = Paths.get(UPLOAD_DIR).resolve(filename).normalize();
            byte[] fileContent = Files.readAllBytes(filePath);

            // Determine the media type based on the file extension
            MediaType mediaType = determineMediaType(filename);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(mediaType);

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(fileContent);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    private MediaType determineMediaType(String filename) {
        String fileExtension = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();

        switch (fileExtension) {
        	case "xml":
        		return MediaType.APPLICATION_ATOM_XML;
        	case "json":
        		return MediaType.APPLICATION_JSON;
            case "pdf":
                return MediaType.APPLICATION_PDF;
            case "jpg":
            case "jpeg":
            case "png":
            case "gif":
                return MediaType.IMAGE_JPEG; // or MediaType.IMAGE_PNG for PNG files
            // Add more cases for other file types if needed
            default:
                return MediaType.APPLICATION_OCTET_STREAM;
        }
    }
    

	@PostMapping("/balu")
	public void adds()
	{
		System.out.println("hello adds");
	}
	@PostMapping("/gmail")
	public void fun1(@RequestBody Emailentity entity)
	{
		SimpleMailMessage message=new SimpleMailMessage();
		message.setTo(entity.getTo());
		message.setSubject(entity.getSubject());
		message.setText(entity.getBody());
		mailsend.send(message);
		System.out.println("message");
	}
}



import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.http.MediaType;
import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
@GetMapping("/files")
    public ResponseEntity<List<String>> getFiles() {
        try {
            // List all files in the directory
            List<String> files = Arrays.stream(Paths.get(UPLOAD_DIR).toFile().list())
                    .collect(Collectors.toList());
            return ResponseEntity.ok(files);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }


@GetMapping("/{filename}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable String filename) {
        try {
            // Load file content as bytes
            Path filePath = Paths.get(UPLOAD_DIR).resolve(filename).normalize();
            byte[] fileContent = Files.readAllBytes(filePath);

            // Determine the media type based on the file extension
            MediaType mediaType = determineMediaType(filename);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(mediaType);

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(fileContent);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    private MediaType determineMediaType(String filename) {
        String fileExtension = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();

        switch (fileExtension) {
        	case "xml":
        		return MediaType.APPLICATION_ATOM_XML;
        	case "json":
        		return MediaType.APPLICATION_JSON;
            case "pdf":
                return MediaType.APPLICATION_PDF;
            case "jpg":
            case "jpeg":
            case "png":
            case "gif":
                return MediaType.IMAGE_JPEG; // or MediaType.IMAGE_PNG for PNG files
            // Add more cases for other file types if needed
            default:
                return MediaType.APPLICATION_OCTET_STREAM;
        }
    }
ompx rsvq bfaw zdyv

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-mail</artifactId>
</dependency>

spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=your-email@example.com
spring.mail.password=your-email-password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EmailController {

    @Autowired
    private JavaMailSender emailSender;

    @PostMapping("/sendEmail")
    public void sendEmail(@RequestBody EmailRequest emailRequest) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(emailRequest.getTo());
        message.setSubject(emailRequest.getSubject());
        message.setText(emailRequest.getBody());

        emailSender.send(message);
    }
}





const [loading, setLoading] = useState(true); // Added loading state



@RestController
@RequestMapping("/api/files")
public class FileController {

    private static final String D_DRIVE_PATH = "D:/your/folder/path/";

    @GetMapping("/list")
    public ResponseEntity<List<String>> getFileList() {
        File folder = new File(D_DRIVE_PATH);
        String[] fileList = folder.list();
        return ResponseEntity.ok(Arrays.asList(fileList));
    }

    @GetMapping("/download")
    public ResponseEntity<Resource> downloadFile(@RequestParam String fileName) throws IOException {
        File file = new File(D_DRIVE_PATH + fileName);
        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);

        return ResponseEntity.ok()
                .headers(headers)
                .contentLength(file.length())
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(resource);
    }
}




react:


import React, { useState, useEffect } from 'react';
import axios from 'axios';

const FileList = () => {
  const [files, setFiles] = useState([]);

  useEffect(() => {
    // Fetch the list of files from the backend
    axios.get('http://your-backend-url/api/files/list')
      .then(response => setFiles(response.data))
      .catch(error => console.error('Error fetching file list:', error));
  }, []);

  const handleFileClick = (fileName) => {
    // Download the selected file from the backend
    window.open(`http://your-backend-url/api/files/download?fileName=${fileName}`);
  };

  return (
    <div>
      <h2>File List:</h2>
      <ul>
        {files.map((file, index) => (
          <li key={index} onClick={() => handleFileClick(file)}>
            {file}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default FileList;






import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

@RestController
public class FileController {

    private static final String D_DRIVE_PATH = "D:/your/folder/path/";

    @GetMapping("/api/files/download")
    public ResponseEntity<InputStreamResource> downloadFile(@RequestParam String fileName) throws IOException {
        File file = new File(D_DRIVE_PATH + fileName);

        if (file.exists()) {
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);

            InputStreamResource resource = new InputStreamResource(new FileInputStream(file));

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(file.length())
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
