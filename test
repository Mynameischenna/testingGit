024-02-11T23:17:36.301-07:00  INFO 9500 --- [nio-8081-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 2 ms
com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field "db_key" (class newxml.PlanInfo), not marked as ignorable (24 known properties: "subsetCashCode", "estNumberOfParticipants", "dpDateTime", "clientEntityType", "city", "evId", "rolloverInd", "irsrlCode", "prodId", "planAnnivDate", "planName", "gaId", "clientName", "stateCode", "statusCode", "firstLineMailing", "zipCode", "scndLineMailing", "estPlanAssets", "provCompany", "country", "tpaFirmId", "internalComplianceInd", "estImplementationDate"])
 at [Source: (StringReader); line: 3, column: 93] (through reference chain: newxml.PlanInfo["db_key"])
	at com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException.from(UnrecognizedPropertyException.java:61)
	at com.fasterxml.jackson.databind.DeserializationContext.handleUnknownProperty(DeserializationContext.java:1138)
	at com.fasterxml.jackson.databind.deser.std.StdDeserializer.handleUnknownProperty(StdDeserializer.java:2224)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownProperty(BeanDeserializerBase.java:1709)
	at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.handleUnknownVanilla(BeanDeserializerBase.java:1687)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.vanillaDeserialize(BeanDeserializer.java:320)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:177)
	at com.fasterxml.jackson.dataformat.xml.deser.XmlDeserializationContext.readRootValue(XmlDeserializationContext.java:91)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4825)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3772)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3740)
	at newxml.PlanInfoController.createPlanInfoFromXml(PlanInfoController.java:51)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:261)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:189)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:917)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:829)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979)
	at org.springframework.web.s


package newxml;

import java.time.LocalDate;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;

@Entity
public class PlanInfo {

    @Id
    private String evId;
    private String planName;
    private String irsrlCode;
    private String provCompany;
    private String prodId;
    private String statusCode;
    private String dpDateTime;
    private String rolloverInd;
    private String gaId;
    private String clientName;
    private String firstLineMailing;
    private String scndLineMailing;
    private String city;
    private String stateCode;
    private String zipCode;
    private String country;
    private String internalComplianceInd;
    private String planAnnivDate;
    private int estNumberOfParticipants;
    private long estPlanAssets;
    private LocalDate estImplementationDate;
    private String subsetCashCode;
    private String clientEntityType;
    private String tpaFirmId;
	
    
    
    public String getEvId() {
        return evId;
    }

    public void setEvId(String evId) {
        this.evId = evId;
    }
	public String getPlanName() {
		return planName;
	}
	public void setPlanName(String planName) {
		this.planName = planName;
	}
	public String getIrsrlCode() {
		return irsrlCode;
	}
	public void setIrsrlCode(String irsrlCode) {
		this.irsrlCode = irsrlCode;
	}
	public String getProvCompany() {
		return provCompany;
	}
	public void setProvCompany(String provCompany) {
		this.provCompany = provCompany;
	}
	public String getProdId() {
		return prodId;
	}
	public void setProdId(String prodId) {
		this.prodId = prodId;
	}
	public String getStatusCode() {
		return statusCode;
	}
	public void setStatusCode(String statusCode) {
		this.statusCode = statusCode;
	}
	public String getDpDateTime() {
		return dpDateTime;
	}
	public void setDpDateTime(String dpDateTime) {
		this.dpDateTime = dpDateTime;
	}
	public String getRolloverInd() {
		return rolloverInd;
	}
	public void setRolloverInd(String rolloverInd) {
		this.rolloverInd = rolloverInd;
	}
	public String getGaId() {
		return gaId;
	}
	public void setGaId(String gaId) {
		this.gaId = gaId;
	}
	public String getClientName() {
		return clientName;
	}
	public void setClientName(String clientName) {
		this.clientName = clientName;
	}
	public String getFirstLineMailing() {
		return firstLineMailing;
	}
	public void setFirstLineMailing(String firstLineMailing) {
		this.firstLineMailing = firstLineMailing;
	}
	public String getScndLineMailing() {
		return scndLineMailing;
	}
	public void setScndLineMailing(String scndLineMailing) {
		this.scndLineMailing = scndLineMailing;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public String getStateCode() {
		return stateCode;
	}
	public void setStateCode(String stateCode) {
		this.stateCode = stateCode;
	}
	public String getZipCode() {
		return zipCode;
	}
	public void setZipCode(String zipCode) {
		this.zipCode = zipCode;
	}
	public String getCountry() {
		return country;
	}
	public void setCountry(String country) {
		this.country = country;
	}
	public String getInternalComplianceInd() {
		return internalComplianceInd;
	}
	public void setInternalComplianceInd(String internalComplianceInd) {
		this.internalComplianceInd = internalComplianceInd;
	}
	public String getPlanAnnivDate() {
		return planAnnivDate;
	}
	public void setPlanAnnivDate(String planAnnivDate) {
		this.planAnnivDate = planAnnivDate;
	}
	public int getEstNumberOfParticipants() {
		return estNumberOfParticipants;
	}
	public void setEstNumberOfParticipants(int estNumberOfParticipants) {
		this.estNumberOfParticipants = estNumberOfParticipants;
	}
	public long getEstPlanAssets() {
		return estPlanAssets;
	}
	public void setEstPlanAssets(long estPlanAssets) {
		this.estPlanAssets = estPlanAssets;
	}
	public LocalDate getEstImplementationDate() {
		return estImplementationDate;
	}
	public void setEstImplementationDate(LocalDate estImplementationDate) {
		this.estImplementationDate = estImplementationDate;
	}
	public String getSubsetCashCode() {
		return subsetCashCode;
	}
	public void setSubsetCashCode(String subsetCashCode) {
		this.subsetCashCode = subsetCashCode;
	}
	public String getClientEntityType() {
		return clientEntityType;
	}
	public void setClientEntityType(String clientEntityType) {
		this.clientEntityType = clientEntityType;
	}
	public String getTpaFirmId() {
		return tpaFirmId;
	}
	public void setTpaFirmId(String tpaFirmId) {
		this.tpaFirmId = tpaFirmId;
	}
	@Override
	public String toString() {
		return "PlanInfo [ evId=" + evId + ", planName=" + planName + ", irsrlCode=" + irsrlCode
				+ ", provCompany=" + provCompany + ", prodId=" + prodId + ", statusCode=" + statusCode + ", dpDateTime="
				+ dpDateTime + ", rolloverInd=" + rolloverInd + ", gaId=" + gaId + ", clientName=" + clientName
				+ ", firstLineMailing=" + firstLineMailing + ", scndLineMailing=" + scndLineMailing + ", city=" + city
				+ ", stateCode=" + stateCode + ", zipCode=" + zipCode + ", country=" + country
				+ ", internalComplianceInd=" + internalComplianceInd + ", planAnnivDate=" + planAnnivDate
				+ ", estNumberOfParticipants=" + estNumberOfParticipants + ", estPlanAssets=" + estPlanAssets
				+ ", estImplementationDate=" + estImplementationDate + ", subsetCashCode=" + subsetCashCode
				+ ", clientEntityType=" + clientEntityType + ", tpaFirmId=" + tpaFirmId + "]";
	}

    // Constructors, getters, setters...
    
}
<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-compiler-plugin</artifactId>
            <version>3.11.0</version>
            <configuration>
                <source>1.8</source>
                <target>1.8</target>
            </configuration>
        </plugin>
    </plugins>
</build>
<dependencies>
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.13.0</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-tomcat</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi</artifactId>
        <version>5.0.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.poi</groupId>
        <artifactId>poi-ooxml</artifactId>
        <version>5.0.0</version>
    </dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
	

// DataTable.js

import React, { useState, useEffect } from 'react';

const DataTable = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    // Fetch data from API when the component mounts
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      // Replace 'your-api-endpoint' with the actual API endpoint
      const response = await fetch('http://localhost:8085/');
      const result = await response.json();
      setData(result); // Set the fetched data to the state
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  return (
    <div>
      <h1>Data Table</h1>
      <table>
        <thead>
          <tr>
            {/* Map column headers based on the structure of your data */}
            {Object.keys(data[0] || {}).map((header, index) => (
              <th key={index}>{header}</th>
            ))}
          </tr>
        </thead>
        <tbody>
          {/* Map data rows */}
          {data.map((row, rowIndex) => (
            <tr key={rowIndex}>
              {/* Map row values based on the structure of your data */}
              {Object.values(row).map((value, columnIndex) => (
                <td key={columnIndex}>{value}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DataTable;


import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class XmlDataParser {

    public static void main(String[] args) throws Exception {
        // Load XML file
        File xmlFile = new File("yourXMLfile.xml");
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document document = dBuilder.parse(xmlFile);
        document.getDocumentElement().normalize();

        // Map to store data
        Map<String, Map<String, String>> parentDataMap = new HashMap<>();

        // Get all parent elements
        NodeList parentElements = document.getElementsByTagName("parentElementName");

        for (int i = 0; i < parentElements.getLength(); i++) {
            Node parentElementNode = parentElements.item(i);

            if (parentElementNode.getNodeType() == Node.ELEMENT_NODE) {
                Element parentElement = (Element) parentElementNode;

                // Map to store child element data
                Map<String, String> childDataMap = new HashMap<>();

                // Get all child elements inside the parent element
                NodeList childElements = parentElement.getChildNodes();

                for (int j = 0; j < childElements.getLength(); j++) {
                    Node childNode = childElements.item(j);

                    if (childNode.getNodeType() == Node.ELEMENT_NODE) {
                        Element childElement = (Element) childNode;
                        String elementName = childElement.getNodeName();
                        String elementValue = childElement.getTextContent();

                        // Store child element data in the inner map
                        childDataMap.put(elementName, elementValue);
                    }
                }

                // Store the inner map in the outer map with parent element name as the key
                parentDataMap.put(parentElement.getNodeName(), childDataMap);
            }
        }

        // Print or use the resulting data map as needed
        System.out.println(parentDataMap);
    }
}


import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class XmlDataToObject {

    public static void main(String[] args) {
        try {
            // Parse the XML file
            File xmlFile = new File("yourXMLfile.xml");
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document document = dBuilder.parse(xmlFile);
            document.getDocumentElement().normalize();

            // Create a Map to store element name and data
            Map<String, String> dataMap = new HashMap<>();

            // Specify the element name you want to retrieve
            String targetElement = "yourElement";

            // Get the NodeList of elements with the specified name
            NodeList nodeList = document.getElementsByTagName(targetElement);

            // Iterate through the NodeList and store data in the map
            for (int i = 0; i < nodeList.getLength(); i++) {
                Element element = (Element) nodeList.item(i);
                String elementName = element.getNodeName();
                String elementData = element.getTextContent();
                dataMap.put(elementName, elementData);
            }

            // Print or use the dataMap as needed
            System.out.println(dataMap);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}




<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.13.0</version> <!-- Use the latest version available -->
</dependency>

import com.fasterxml.jackson.databind.ObjectMapper;

// Assuming your data is in a Map<String, String> called extractedData
ObjectMapper objectMapper = new ObjectMapper();
String jsonData = objectMapper.writeValueAsString(extractedData);


NodeList nodeList = document.getElementsByTagName("yourElement");
String data = nodeList.item(0).getTextContent();

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = factory.newDocumentBuilder();
Document document = builder.parse(new File("yourXMLfile.xml"));
  export const Foo = () => (
  <form>
    <div className="form-row">
      <div className="form-group col-md-4">
        <input type="text" className="form-control" id="planYearEnds" />
        <label htmlFor="planYearEnds">Plan Year Ends</label>
      </div>
      <div className="form-group col-md-4">
        <button
          type="button"
          className="btn btn-secondary"
          id="servicesAndBilling"
        >
          Services And Billing
        </button>
      </div>
      <div className="form-group col-md-4">
        <button type="button" className="btn btn-secondary" id="pyeTesting1">
          PYE Testing
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <label>YEAR END INFO</label>
      </div>
      <div className="form-group col-md-2">
        <label>COUNTS</label>
      </div>
      <div className="form-group col-md-8">
        <label>5500 INFO</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="yearEnd" />
        <label htmlFor="yearEnd">Year End</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="eligibleEmployees" />
        <label htmlFor="eligibleEmployees">Eligible Employees</label>
      </div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="xml5500">
          5500 XML
        </button>
        <button type="button" className="btn btn-primary" id="email5500">
          5500 Email
        </button>
      </div>
      <div className="form-group col-md-3">
        <input type="text" className="form-control" id="type5500" />
        <label htmlFor="type5500">5500 Type</label>
      </div>
      <div className="form-group col-md-3">
        <input type="text" className="form-control" id="filingStatus" />
        <label htmlFor="filingStatus">Filing Status</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="yearStart" />
        <label htmlFor="yearStart">Year Start</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="totalEmployees" />
        <label htmlFor="totalEmployees">Total Employees</label>
      </div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="yeq">
          YEQ
        </button>
        <button type="button" className="btn btn-primary" id="dfvcEmail">
          DFVC Email
        </button>
      </div>
      <div className="form-group col-md-3">
        <input type="text" className="form-control" id="signer5500" />
        <label htmlFor="signer5500">5500 Signer</label>
        <div className="form-check">
          <label className="form-check-label">
            <input
              className="form-check-input"
              id="partial5500"
              type="checkbox"
            />{" "}
            5500 Partial
          </label>
        </div>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="taxYear" />
        <label htmlFor="taxYear">Tax Year</label>
      </div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="resetPortalUser">
          Reset Portal User
        </button>
        <button type="button" className="btn btn-primary" id="addCompanyToFTW">
          Add Company to FTW
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="pointsValue" />
        <label htmlFor="pointsValue">Points Value</label>
      </div>
      <div className="form-group col-md-2">
        <button
          type="button"
          className="btn btn-primary"
          id="contributionSources"
        >
          Contribution Sources
        </button>
        <button type="button" className="btn btn-primary" id="moveItemsToPSC">
          Move Items To PSC
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <label>SERVICES</label>
      </div>
      <div className="form-group col-md-6">
        <label>FORFEITURE INFO</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="planDocument"
            />{" "}
            Plan Document
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="yearEndComplianceTesting"
            />{" "}
            Year End Compliance Testing
          </label>
        </div>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="matchForfType" />
        <label htmlFor="matchForfType">Match Forf Type</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="matchForfAmt" />
        <label htmlFor="matchForfAmt">Match Forf Amt</label>
      </div>
      <div className="form-group col-md-2">
        <button type="button" className="btn btn-primary" id="folder">
          Folder
        </button>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="midYrComplianceTesting"
            />{" "}
            Mid Yr Compliance Testing
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="preparation5500"
            />{" "}
            5500 Preparation
          </label>
        </div>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="psForfType" />
        <label htmlFor="psForfType">P/S Forf Type</label>
      </div>
      <div className="form-group col-md-2">
        <input type="text" className="form-control" id="psForfAmt" />
        <label htmlFor="psForfAmt">P/S Forf Amt</label>
      </div>
      <div className="form-group col-md-2"></div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="employerAllocations"
            />{" "}
            Employer Allocations
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="matchingAllocations"
            />{" "}
            Matching Allocations
          </label>
        </div>
      </div>
      <div className="form-group col-md-2">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="unusedForfeitures"
            />{" "}
            Unused Forfeitures
          </label>
        </div>
      </div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2"></div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="shMatchCalc"
            />{" "}
            SH Match - Calc
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="shNonElectiveCalc"
            />{" "}
            SH Non Elective - Calc
          </label>
        </div>
      </div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2"></div>
      <div className="form-group col-md-2"></div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <label>SCRIPTING</label>
      </div>
      <div className="form-group col-md-6">
        <label>PLAN FEATURES</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-6">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="mmlContribution"
            />{" "}
            MML Contribution
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="stopAutomation"
            />{" "}
            Stop Automation
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="easyEligibility"
            />{" "}
            EASY Eligibility
          </label>
        </div>
        <input type="text" className="form-control" id="ascNumber" />
        <label htmlFor="ascNumber">ASC Number</label>
      </div>
      <div className="form-group col-md-3">
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="safeHarborPlan"
            />{" "}
            Safe Harbor Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="safeHarborAdpAcp"
            />{" "}
            Safe Harbor ADP/ACP
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="simplePlan"
            />{" "}
            Simple Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="newComp" />{" "}
            New Comp
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="ageWeighted"
            />{" "}
            Age Weighted
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="afterTax" />{" "}
            After Tax
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="nonErisaPlan"
            />{" "}
            Non Erisa Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="matchOnlyPlan"
            />{" "}
            Match Only Plan
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="qaca" />{" "}
            QACA
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="eaca" />{" "}
            EACA (6 month correction)
          </label>
        </div>
      </div>
      <div className="form-group col-md-3">
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="svcMatch" />{" "}
            Svc Match
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="nav" /> NAV
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input type="checkbox" className="form-check-input" id="pdiData" />{" "}
            PDI Data
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="lifeInsurance"
            />{" "}
            Life Insurance
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="churchCertiInsert"
            />{" "}
            Church Certi Insert
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="noCatchup"
            />{" "}
            No Catch-up
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="multipleEr"
            />{" "}
            Multiple ER
          </label>
        </div>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="controlledGroup"
            />{" "}
            Controlled Group
          </label>
        </div>
        <button
          type="button"
          className="btn btn-primary"
          id="controlledGroupButton"
        >
          Controlled Group
        </button>
        <div className="form-check">
          <label className="form-check-label">
            <input
              type="checkbox"
              className="form-check-input"
              id="testByLocation"
            />{" "}
            Test By Location
          </label>
        </div>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-12">
        <input type="text" className="form-control" id="installationNote" />
        <label htmlFor="installationNote">Comments</label>
      </div>
    </div>
    <div className="form-row">
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="planSpecs">
          Plan Specs
        </button>
      </div>
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="pyeTesting2">
          PYE Testing
        </button>
      </div>
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="pyeQa">
          PYE QA
        </button>
      </div>
      <div className="form-group col-md-3">
        <button type="button" className="btn btn-primary" id="teamChecklist">
          Team Checklist
        </button>
      </div>
    </div>
    <button type="submit" className="btn btn-primary">
      Submit
    </button>
  </form>
)

package com.empower.email;

import java.io.IOException;
import java.io.InputStream;

//import java.net.http.HttpHeaders;
import org.springframework.http.HttpHeaders;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.http.MediaType;
import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;


@RestController
@CrossOrigin("*")
public class Emailcon {
	@Autowired
	private JavaMailSender mailsend;
	private static final String UPLOAD_DIR = "D:\\python presidency";
	
	@GetMapping("/files")
    public ResponseEntity<List<String>> getFiles() {
        try {
            // List all files in the directory
            List<String> files = Arrays.stream(Paths.get(UPLOAD_DIR).toFile().list())
                    .collect(Collectors.toList());
            return ResponseEntity.ok(files);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }
//	@GetMapping("/{filename}")
//	public static void openFile(@PathVariable String filePath) {
//        try {
//            // Convert the file path to a URI
//            URI uri = Paths.get(filePath).toUri();
//
//            // Open the file with the default system application
//            Desktop.getDesktop().browse(uri);
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }

//	@GetMapping("/{filename}")
//	public ResponseEntity<UrlResource> downloadFile(@PathVariable String filename) {
//	    try {
//	        // Load file as UrlResource
//	        Path filePath = Paths.get(UPLOAD_DIR).resolve(filename).normalize();
//	        UrlResource urlResource = new UrlResource(filePath.toUri());
//
//	        // Check if the file exists
//	        if (urlResource.exists()) {
//	            return ResponseEntity.ok()
//	                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + urlResource.getFilename() + "\"")
//	                    .body(urlResource);
//	        } else {
//	            return ResponseEntity.status(404).body(null);
//	        }
//	    } catch (IOException e) {
//	        return ResponseEntity.status(500).body(null);
//	    }
//	}
	
	

	// ... (other imports)

	@GetMapping("/{filename}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable String filename) {
        try {
            // Load file content as bytes
            Path filePath = Paths.get(UPLOAD_DIR).resolve(filename).normalize();
            byte[] fileContent = Files.readAllBytes(filePath);

            // Determine the media type based on the file extension
            MediaType mediaType = determineMediaType(filename);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(mediaType);

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(fileContent);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    private MediaType determineMediaType(String filename) {
        String fileExtension = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();

        switch (fileExtension) {
        	case "xml":
        		return MediaType.APPLICATION_ATOM_XML;
        	case "json":
        		return MediaType.APPLICATION_JSON;
            case "pdf":
                return MediaType.APPLICATION_PDF;
            case "jpg":
            case "jpeg":
            case "png":
            case "gif":
                return MediaType.IMAGE_JPEG; // or MediaType.IMAGE_PNG for PNG files
            // Add more cases for other file types if needed
            default:
                return MediaType.APPLICATION_OCTET_STREAM;
        }
    }
    

	@PostMapping("/balu")
	public void adds()
	{
		System.out.println("hello adds");
	}
	@PostMapping("/gmail")
	public void fun1(@RequestBody Emailentity entity)
	{
		SimpleMailMessage message=new SimpleMailMessage();
		message.setTo(entity.getTo());
		message.setSubject(entity.getSubject());
		message.setText(entity.getBody());
		mailsend.send(message);
		System.out.println("message");
	}
}



import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.http.MediaType;
import javax.annotation.Resource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.UrlResource;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
@GetMapping("/files")
    public ResponseEntity<List<String>> getFiles() {
        try {
            // List all files in the directory
            List<String> files = Arrays.stream(Paths.get(UPLOAD_DIR).toFile().list())
                    .collect(Collectors.toList());
            return ResponseEntity.ok(files);
        } catch (Exception e) {
            return ResponseEntity.status(500).body(null);
        }
    }


@GetMapping("/{filename}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable String filename) {
        try {
            // Load file content as bytes
            Path filePath = Paths.get(UPLOAD_DIR).resolve(filename).normalize();
            byte[] fileContent = Files.readAllBytes(filePath);

            // Determine the media type based on the file extension
            MediaType mediaType = determineMediaType(filename);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(mediaType);

            return ResponseEntity.ok()
                    .headers(headers)
                    .body(fileContent);
        } catch (IOException e) {
            return ResponseEntity.status(500).body(null);
        }
    }

    private MediaType determineMediaType(String filename) {
        String fileExtension = filename.substring(filename.lastIndexOf('.') + 1).toLowerCase();

        switch (fileExtension) {
        	case "xml":
        		return MediaType.APPLICATION_ATOM_XML;
        	case "json":
        		return MediaType.APPLICATION_JSON;
            case "pdf":
                return MediaType.APPLICATION_PDF;
            case "jpg":
            case "jpeg":
            case "png":
            case "gif":
                return MediaType.IMAGE_JPEG; // or MediaType.IMAGE_PNG for PNG files
            // Add more cases for other file types if needed
            default:
                return MediaType.APPLICATION_OCTET_STREAM;
        }
    }
ompx rsvq bfaw zdyv

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-mail</artifactId>
</dependency>

spring.mail.host=smtp.example.com
spring.mail.port=587
spring.mail.username=your-email@example.com
spring.mail.password=your-email-password
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EmailController {

    @Autowired
    private JavaMailSender emailSender;

    @PostMapping("/sendEmail")
    public void sendEmail(@RequestBody EmailRequest emailRequest) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(emailRequest.getTo());
        message.setSubject(emailRequest.getSubject());
        message.setText(emailRequest.getBody());

        emailSender.send(message);
    }
}





const [loading, setLoading] = useState(true); // Added loading state



@RestController
@RequestMapping("/api/files")
public class FileController {

    private static final String D_DRIVE_PATH = "D:/your/folder/path/";

    @GetMapping("/list")
    public ResponseEntity<List<String>> getFileList() {
        File folder = new File(D_DRIVE_PATH);
        String[] fileList = folder.list();
        return ResponseEntity.ok(Arrays.asList(fileList));
    }

    @GetMapping("/download")
    public ResponseEntity<Resource> downloadFile(@RequestParam String fileName) throws IOException {
        File file = new File(D_DRIVE_PATH + fileName);
        InputStreamResource resource = new InputStreamResource(new FileInputStream(file));

        HttpHeaders headers = new HttpHeaders();
        headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);

        return ResponseEntity.ok()
                .headers(headers)
                .contentLength(file.length())
                .contentType(MediaType.APPLICATION_OCTET_STREAM)
                .body(resource);
    }
}




react:


import React, { useState, useEffect } from 'react';
import axios from 'axios';

const FileList = () => {
  const [files, setFiles] = useState([]);

  useEffect(() => {
    // Fetch the list of files from the backend
    axios.get('http://your-backend-url/api/files/list')
      .then(response => setFiles(response.data))
      .catch(error => console.error('Error fetching file list:', error));
  }, []);

  const handleFileClick = (fileName) => {
    // Download the selected file from the backend
    window.open(`http://your-backend-url/api/files/download?fileName=${fileName}`);
  };

  return (
    <div>
      <h2>File List:</h2>
      <ul>
        {files.map((file, index) => (
          <li key={index} onClick={() => handleFileClick(file)}>
            {file}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default FileList;






import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

@RestController
public class FileController {

    private static final String D_DRIVE_PATH = "D:/your/folder/path/";

    @GetMapping("/api/files/download")
    public ResponseEntity<InputStreamResource> downloadFile(@RequestParam String fileName) throws IOException {
        File file = new File(D_DRIVE_PATH + fileName);

        if (file.exists()) {
            HttpHeaders headers = new HttpHeaders();
            headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName);

            InputStreamResource resource = new InputStreamResource(new FileInputStream(file));

            return ResponseEntity.ok()
                    .headers(headers)
                    .contentLength(file.length())
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(resource);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
